{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"stm32学习\" category",
    "description": "欢迎大家来到邦的轩辕的小屋，这里会分享everything",
    "home_page_url": "https://bangdexuanyuan.github.io",
    "items": [
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E6%97%A0%E7%BA%BF%E9%80%9A%E8%AE%AF%E4%B8%8B%E8%BD%BD%E5%99%A8/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E6%97%A0%E7%BA%BF%E9%80%9A%E8%AE%AF%E4%B8%8B%E8%BD%BD%E5%99%A8/",
            "title": "无线下载器",
            "date_published": "2024-03-10T11:40:00.000Z",
            "content_html": "<p>无线通讯：</p>\n<p>无线空中传输速率，指的是无线模块在空中传输的频率。</p>\n<p>2M：速度最快，此时调试器的性能最大，最快</p>\n<p>1M：速度会减慢，但是减慢的速度并不多，可以稍微增加一点距离，但是增加的不多。</p>\n<p>250K：距离增加的非常多，但是调试器速度下降也比较多。建议远距离的可以使用。</p>\n<p>无限地址的设置：</p>\n<p>内部无线模块的地址，接收端和发送端的地址必须一样。</p>\n<p><strong>唯一使用的注意事项：</strong></p>\n<p>在keil中，我们点击魔术棒按钮，然后在Debug这个界面里面，在右侧界面，把stlink的选项设置为CMSIS-DAP-Debugger。</p>\n<p>之后点击settings按钮，通过观察右侧的SW Device看看对于单片机的类型，是否进行了识别。</p>\n<p>然后把CMSIS-DAP-JTAG&#x2F;SW Adapter这个选项修改成第二行。</p>\n<p>并把端口的类型改成SW类型。</p>\n<p><strong>tips：</strong>使用的时候，我们接收端直接通过USB与电脑相连，另一个接收端，通过SW，采用杜邦线和目标单片机进行相连。</p>\n<p>需要注意的是，我们接收端的供电采用充电宝或者自己画板子的时候，可以加一个供电的USB口。</p>\n<p>另外，自己于2024.3.10日调试的时候，因为单片机的问题，也曾出现过，检测不到单片机的问题。</p>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/EXTI%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/",
            "url": "https://bangdexuanyuan.github.io/stm32/EXTI%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/",
            "title": "EXTI外部中断",
            "date_published": "2023-09-02T16:21:00.000Z",
            "content_html": "<h4 id=\"EXTI外部中断\"><a href=\"#EXTI外部中断\" class=\"headerlink\" title=\"EXTI外部中断\"></a>EXTI外部中断</h4><p>NVIC的名字叫做，嵌套中断向量控制器</p>\n<p>NVIC的出现，就是为了当CPU的秘书，如果我们把所有的中断都接在CPU上，CPU对应位置就得进行适配，设计上就很麻烦。并且如果很多中断进行申请，造成了拥堵，CPU也会很难搞，因为CPU还是主要负责进行运算的，中断分配的任务就放到别的地方吧。</p>\n<p>NVIC有很多个输入口，你有多少个中断都可以接过来</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f35828661c6c8e54dee9d2.png\"></p>\n<p>NVIC只有一个输出口，直接接到CPU上</p>\n<p>stm32有68个可屏蔽中断通道，包含EXTI、TIM、ADC、USART、SPI、I2C、RTC等多个外设使用NVIC统一管理中断，每个中断通道都拥有16个可编程的优先等级，可对优先级进行分组，进一步设置抢占优先级和响应优先级</p>\n<p>NVIC的中断优先级由优先级寄存器的4位（0~15）决定，这4位可以进行切分，分为高n位的抢占优先级和低4-n位的响应优先级，记住，值越小的优先级越高，比如0就是最高的优先级</p>\n<p>抢占优先级高的可以中断嵌套，响应优先级高的可以优先排队，<strong>抢占优先级和响应优先级均相同的按中断号排队</strong></p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f35a2d661c6c8e54df3a92.png\"></p>\n<p>举个例子，就好像是有个医生在给一个人进行看病，抢占优先级高的可以直接把看病的那个人挤开，让自己去看。然后响应优先级就好像是有个人排队，他就应该排在第一位，大概就是这个意思。</p>\n<hr>\n<p>综上所述，现在我们可以这么理解，NVIC其实可以理解成为一个叫号系统，而CPU就是那个医生，下面我们来介绍第一位病人，EXTI外部中断</p>\n<hr>\n<p>EXTI（Extern Interrupt）外部中断</p>\n<p>EXTI可以监测指定GPIO口的电平信号，当其指定的GPIO口产生电平变化时，EXTI将立即向NVIC发出中断申请，经过NVIC裁决后即可中断CPU主程序，使CPU执行EXTI对应的中断程序</p>\n<p>支持的触发方式：上升沿&#x2F;下降沿&#x2F;双边沿&#x2F;软件触发</p>\n<p><strong>解释一下</strong>：这里的上升沿是指由低电平上升到高电平，下降沿是由高电平降低到低电平，而双边沿就是指上下都计数</p>\n<p>支持的GPIO口：所有GPIO口，但相同的Pin不能同时触发中断</p>\n<p>通道数：16个GPIO_Pin，外加PVD输出、RTC闹钟、USB唤醒、以太网唤醒</p>\n<p>触发响应方式：中断响应&#x2F;事件响应</p>\n<h4 id=\"首先介绍一下EXTI的基本结构\"><a href=\"#首先介绍一下EXTI的基本结构\" class=\"headerlink\" title=\"首先介绍一下EXTI的基本结构\"></a>首先介绍一下EXTI的基本结构</h4><p><img data-src=\"https://pic.imgdb.cn/item/64f355a9661c6c8e54de9017.png\"></p>\n<p>这里的每个GPIO都有16个引脚，显然对于只有16个输入口的EXT是远远超出的，所以我们中间加一个AFIO中断引脚选择器，你可以理解为GPIOA，B，C共用一个Pin引脚口，那么就可以解释了，为什么相同的引脚不能同时触发中断，因为这样，你根本不知道是哪个GPIO口发生了中断。</p>\n<p>经过EXTI后，分为了两种输出，一种直接接到NVIC，一种接入其他外设。</p>\n<p>根据常理，本来20种的中断输入应该有20种的中断输出，但是可能是STM公司觉得有点占用NVIC的通道，于是，将EXTI5<del>9， EXTI10</del>15分别合并为了一种通道， 也就是说EXTI5~9会触发同一种中断函数，同理10到15也是</p>\n<p>对于合并通道的中断函数，还需根据标志位进一步确定这个是由哪个中断函数进来的</p>\n<h4 id=\"AFIO复用IO口\"><a href=\"#AFIO复用IO口\" class=\"headerlink\" title=\"AFIO复用IO口\"></a>AFIO复用IO口</h4><p>AFIO主要用于引脚复用功能的选择和重定义，在STM32中，AFIO主要完成两个任务：复用功能引脚重映射、中断引脚选择。</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f360b1661c6c8e54e160f5.png\"></p>\n<p>这就是AFIO的作用</p>\n<h4 id=\"EXTI外部中断的框图\"><a href=\"#EXTI外部中断的框图\" class=\"headerlink\" title=\"EXTI外部中断的框图\"></a>EXTI外部中断的框图</h4><p><img data-src=\"https://pic.imgdb.cn/item/64f4a337661c6c8e541d2cc6.png\"></p>\n<p>记住其中带弧度的是或门，只要有一个输入端是1，那最终输出端的数值就是1</p>\n<p>平的是与门，记住电路的符号就行</p>\n<p>这也就能解释为什么软件的外部中断，也可以进行中断</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f4a5f3661c6c8e541d9481.png\"></p>\n<p>由于自身设计的微妙，我们可以做到A，B两个端口输出的波的相位差90度，可以通过判断A，B端口的高低电平，从而确定此时是正转还是反转。</p>\n<p>分析A端，当左端的端口并未进行接通时，由于VCC连接R1，相当于进行电位的上拉，从此A点的电位为高电位。而当左端的端口接上时A端相当于直接接GND。这里的R3起到了限流电阻的作用，防止电流过大。</p>\n<p>这里的C1起到了<strong>滤波电容</strong>的作用，防止输出的电位过于抖动</p>\n<p>滤波电容这块，感觉还是不太会</p>\n<p>右端的电路同理</p>\n<p>程序部分</p>\n<p>首先在Hardware文件夹中新建CountSensor.h和CountSensor.c文件</p>\n<pre><code class=\"c\">CountSensor.h文件\n    #ifndef _COUNT_SENSOR_H\n    #define _COUNT_SENSOR_H\n\n    void CountSensor_Init(void);\n    uint16_t get(void);\n\n    #endif\n</code></pre>\n<h4 id=\"那么如何配置外部的中断\"><a href=\"#那么如何配置外部的中断\" class=\"headerlink\" title=\"那么如何配置外部的中断\"></a>那么如何配置外部的中断</h4><p><img data-src=\"https://pic.imgdb.cn/item/64f355a9661c6c8e54de9017.png\"></p>\n<p>只需要把从GPIO到NVIC这一路的信号电路都打开即可</p>\n<p>第一步，配置RCC，把我们这里涉及到的外设时钟都打开，不打开时钟，外设是无法工作的</p>\n<p>第二步，配置GPIO口，选择我们的端口为输入模式</p>\n<p>第三步，配置AFIO，选择我们用的这一路GPIO，连接到后面的EXTI</p>\n<p>第四步，配置EXTI，选择边沿触发模式，不如上升沿，下降沿，或者双边沿</p>\n<p>第五步，配置NVIC，给我们这个中断一个合适的优先级别</p>\n<p>最后通过NVIC，外部中断的信号就能进入CPU了，这样，CPU才能收到中断信号来跳转到中断函数里面，执行中断程序</p>\n<p>那，这五步就是外部中断的配置流程</p>\n<p>1.首先第一步，配置时钟RCC</p>\n<pre><code class=\"c\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);\n</code></pre>\n<p>注意是RCC_APB2因为GPIOB是APB2的外设</p>\n<pre><code class=\"c\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);\n</code></pre>\n<p>当你不确定这个外设是接在哪个总线上的时候，我们可以跳转到这个函数的定义</p>\n<p>比如这个函数RCC_APB2这个函数，可以通过arg看到所有的这些外设类型</p>\n<pre><code class=\"c\">/**\n  * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.\n  * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.\n  *   This parameter can be any combination of the following values:\n  *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,\n  *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,\n  *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,\n  *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,\n  *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,\n  *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,\n  *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     \n  * @param  NewState: new state of the specified peripheral clock.\n  *   This parameter can be: ENABLE or DISABLE.\n  * @retval None\n  */\n</code></pre>\n<p><strong>接着还需要打开EXTI和NVIC的外设</strong>，但是这两个外设的时钟是一直打开的，所以不需要再次打开，</p>\n<p>NVIC不需要开启时钟的原因是因为，NVIC属于内核的外设，内核的外设都是不需要开启时钟的</p>\n<p>而RCC管的都是内核外的外设，所以管不到NVIC</p>\n<p>第二步，配置GPIO</p>\n<pre><code class=\"c++\">GPIO_InitTypeDef GPIO_InitStructure;//注释，这里的GPIO_InitStructure只是一个名称，也可以替换成为u，等等其他的名字\nGPIO_InitStructure.GPIO_Mode=GPIO_Mode_IPU;//这个输入模式，具体需要什么，需要到stm32手册中进行查询\nGPIO_InitStructure.GPIO_Pin=GPIO_Pin_14;\nGPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;\nGPIO_Init(GPIOB,&amp;GPIO_InitStructure);\n</code></pre>\n<p>接下来进行第三步，配置AFIO，AFIO并没有自己独立的库函数，它的对应函数在GPIO的文件中</p>\n<pre><code class=\"c++\">void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource);\n</code></pre>\n<p>然后在其中进行跳转，可以查到对应的</p>\n<pre><code class=\"c++\">/**\n  * @brief  Selects the GPIO pin used as EXTI Line.\n  * @param  GPIO_PortSource: selects the GPIO port to be used as source for EXTI lines.\n  *   This parameter can be GPIO_PortSourceGPIOx where x can be (A..G).\n  * @param  GPIO_PinSource: specifies the EXTI line to be configured.\n  *   This parameter can be GPIO_PinSourcex where x can be (0..15).\n  * @retval None\n  */\nvoid GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)\n&#123;\n  uint32_t tmp = 0x00;\n  /* Check the parameters */\n  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));\n  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));\n  \n  tmp = ((uint32_t)0x0F) &lt;&lt; (0x04 * (GPIO_PinSource &amp; (uint8_t)0x03));\n  AFIO-&gt;EXTICR[GPIO_PinSource &gt;&gt; 0x02] &amp;= ~tmp;\n  AFIO-&gt;EXTICR[GPIO_PinSource &gt;&gt; 0x02] |= (((uint32_t)GPIO_PortSource) &lt;&lt; (0x04 * (GPIO_PinSource &amp; (uint8_t)0x03)));\n&#125;\n</code></pre>\n<p>通过最后两行，我们可以发现，其实，这个函数就是配置AFIO的函数</p>\n<p>如果你想配置PB14号口为中断口，那么我们就可以这样写</p>\n<pre><code class=\"c++\">GPIO_EXTILineConfig(GPIO_PortSourceGPIOB,GPIO_PinSource14);\n</code></pre>\n<h4 id=\"第四步，配置EXTI文件\"><a href=\"#第四步，配置EXTI文件\" class=\"headerlink\" title=\"第四步，配置EXTI文件\"></a>第四步，配置EXTI文件</h4><p>首先先来学习一下EXTI的基本库函数</p>\n<pre><code class=\"c++\">void EXTI_DeInit(void);//调用它，就可以把EXTI的配置都清除，恢复成上电默认的状态\nvoid EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct);//可以根据这个结构体里的函数配置EXTI外设，初始化EXTI主要用的就是这个函数，使用方法与GPIO_Init等同对比就行 \nvoid EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct);\nvoid EXTI_GenerateSWInterrupt(uint32_t EXTI_Line);\nFlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line);\nvoid EXTI_ClearFlag(uint32_t EXTI_Line);\nITStatus EXTI_GetITStatus(uint32_t EXTI_Line);\nvoid EXTI_ClearITPendingBit(uint32_t EXTI_Line);\n</code></pre>\n<p>代码书写</p>\n<p>我们首先肯定得初始化外设</p>\n<pre><code class=\"C++\">/**\n  * @brief  Initializes the EXTI peripheral according to the specified\n  *         parameters in the EXTI_InitStruct.\n  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure\n  *         that contains the configuration information for the EXTI peripheral.\n  * @retval None\n  */\nvoid EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)\n</code></pre>\n<p>然后根据提示，进行相关参数的配置</p>\n<p>在文档中查找相关词EXTI_InitTypeDef，可以得到如下的代码</p>\n<pre><code class=\"c++\">    EXTI_InitTypeDef a;\n    a.EXTI_Line=EXTI_Line14;//这四项直接在定义完a后会直接出来\n    a.EXTI_LineCmd=ENABLE;\n    a.EXTI_Mode=EXTI_Mode_Interrupt;\n    a.EXTI_Trigger=EXTI_Trigger_Falling;\n    EXTI_Init(&amp;a);//初始化a去\n</code></pre>\n<p>在全局寻找EXTI_Line，<strong>第一个参数</strong></p>\n<pre><code class=\"c\">\n#define EXTI_Line0       ((uint32_t)0x00001)  /*!&lt; External interrupt line 0 */\n#define EXTI_Line1       ((uint32_t)0x00002)  /*!&lt; External interrupt line 1 */\n#define EXTI_Line2       ((uint32_t)0x00004)  /*!&lt; External interrupt line 2 */\n#define EXTI_Line3       ((uint32_t)0x00008)  /*!&lt; External interrupt line 3 */\n#define EXTI_Line4       ((uint32_t)0x00010)  /*!&lt; External interrupt line 4 */\n#define EXTI_Line5       ((uint32_t)0x00020)  /*!&lt; External interrupt line 5 */\n#define EXTI_Line6       ((uint32_t)0x00040)  /*!&lt; External interrupt line 6 */\n#define EXTI_Line7       ((uint32_t)0x00080)  /*!&lt; External interrupt line 7 */\n#define EXTI_Line8       ((uint32_t)0x00100)  /*!&lt; External interrupt line 8 */\n#define EXTI_Line9       ((uint32_t)0x00200)  /*!&lt; External interrupt line 9 */\n#define EXTI_Line10      ((uint32_t)0x00400)  /*!&lt; External interrupt line 10 */\n#define EXTI_Line11      ((uint32_t)0x00800)  /*!&lt; External interrupt line 11 */\n#define EXTI_Line12      ((uint32_t)0x01000)  /*!&lt; External interrupt line 12 */\n#define EXTI_Line13      ((uint32_t)0x02000)  /*!&lt; External interrupt line 13 */\n#define EXTI_Line14      ((uint32_t)0x04000)  /*!&lt; External interrupt line 14 */\n#define EXTI_Line15      ((uint32_t)0x08000)  /*!&lt; External interrupt line 15 */\n#define EXTI_Line16      ((uint32_t)0x10000)  /*!&lt; External interrupt line 16 Connected to the PVD Output */\n#define EXTI_Line17      ((uint32_t)0x20000)  /*!&lt; External interrupt line 17 Connected to the RTC Alarm event */\n#define EXTI_Line18      ((uint32_t)0x40000)  /*!&lt; External interrupt line 18 Connected to the USB Device/USB OTG FS\n                                                   Wakeup from suspend event */                                    \n#define EXTI_Line19      ((uint32_t)0x80000)  /*!&lt; External interrupt line 19 Connected to the Ethernet Wakeup event */\n                                          \n</code></pre>\n<p><strong>第二个参数</strong></p>\n<pre><code class=\"c\">FunctionalState EXTI_LineCmd;     /*!&lt; Specifies the new state of the selected EXTI lines.\n                                         This parameter can be set either to ENABLE or DISABLE */ \n\n开始中断还是不开启，ENABLE还是DISABLE\n</code></pre>\n<p><strong>第三个参数</strong></p>\n<pre><code class=\"c\">\ntypedef enum\n&#123;\n  EXTI_Mode_Interrupt = 0x00,\n  EXTI_Mode_Event = 0x04\n&#125;EXTIMode_TypeDef;\n</code></pre>\n<p>是外部中断还是事件中断，这里我们采用外部中断</p>\n<p><strong>第四个参数</strong></p>\n<pre><code class=\"c\">/** \n  * @brief  EXTI Trigger enumeration  \n  */\n\ntypedef enum\n&#123;\n  EXTI_Trigger_Rising = 0x08,\n  EXTI_Trigger_Falling = 0x0C,  \n  EXTI_Trigger_Rising_Falling = 0x10\n&#125;EXTITrigger_TypeDef;\n</code></pre>\n<p>这里代表的是选择上升沿触发，下降沿触发，还是上升下降沿都触发</p>\n<p>到此为止，外部中断配置完成，第四步结束</p>\n<pre><code class=\"c\">    EXTI_InitTypeDef a;\n    a.EXTI_Line=EXTI_Line14;\n    a.EXTI_LineCmd=ENABLE;\n    a.EXTI_Mode=EXTI_Mode_Interrupt;\n    a.EXTI_Trigger=EXTI_Trigger_Falling;\n    EXTI_Init(&amp;a);\n</code></pre>\n<h5 id=\"第五步，配置NVIC外设\"><a href=\"#第五步，配置NVIC外设\" class=\"headerlink\" title=\"第五步，配置NVIC外设\"></a>第五步，配置NVIC外设</h5><p>因为NVIC属于stm32内核，所以其库函数，被分配到杂项misc中</p>\n<p>先学习一下NVIC的库函数</p>\n<pre><code class=\"c\">void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);\n</code></pre>\n<p>这个函数用来配置中断分组的，参数是中断分组的方式</p>\n<pre><code class=\"c\">void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);\n</code></pre>\n<p>根据NVIC结构体中指定的参数初始化NVIC</p>\n<p>跳转</p>\n<pre><code class=\"c\">NVIC_PriorityGroupConfig\n</code></pre>\n<p>查到</p>\n<pre><code class=\"c\">/**\n  * @brief  Configures the priority grouping: pre-emption priority and subpriority.\n  * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. \n  *   This parameter can be one of the following values:\n  *     @arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority\n  *                                4 bits for subpriority\n  *     @arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority\n  *                                3 bits for subpriority\n  *     @arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority\n  *                                2 bits for subpriority\n  *     @arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority\n  *                                1 bits for subpriority\n  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority\n  *                                0 bits for subpriority\n  * @retval None\n  */\nvoid NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)\n&#123;\n  /* Check the parameters */\n  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));\n  \n  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */\n  SCB-&gt;AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;\n&#125;\n\n//pre-emption priority代表的是抢占优先级，subpriority代表的是相应优先级\n</code></pre>\n<p>这里我们选择第二组，两位响应，两位抢占，稍微平均一点</p>\n<p>即配置成</p>\n<pre><code class=\"c++\">void NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);\n</code></pre>\n<p>然后就是经典操作了</p>\n<p>对NVIC的初始化</p>\n<pre><code class=\"c\">    NVIC_InitTypeDef b;\n    b.NVIC_IRQChannel= ;\n    b.NVIC_IRQChannelCmd= ;\n    b.NVIC_IRQChannelPreemptionPriority= ;\n    b.NVIC_IRQChannelSubPriority=  ;\n    NVIC_Init(&amp;b);\n</code></pre>\n<p>接下来就是配置参数</p>\n<p>跳转定义，全局工程文件搜索IRQn_Type</p>\n<p>根据我们选择芯片的种类，选择对应的中断函数</p>\n<pre><code class=\"c\">#ifdef STM32F10X_MD\n  ADC1_2_IRQn                 = 18,     /*!&lt; ADC1 and ADC2 global Interrupt                       */\n  USB_HP_CAN1_TX_IRQn         = 19,     /*!&lt; USB Device High Priority or CAN1 TX Interrupts       */\n  USB_LP_CAN1_RX0_IRQn        = 20,     /*!&lt; USB Device Low Priority or CAN1 RX0 Interrupts       */\n  CAN1_RX1_IRQn               = 21,     /*!&lt; CAN1 RX1 Interrupt                                   */\n  CAN1_SCE_IRQn               = 22,     /*!&lt; CAN1 SCE Interrupt                                   */\n  EXTI9_5_IRQn                = 23,     /*!&lt; External Line[9:5] Interrupts                        */\n  TIM1_BRK_IRQn               = 24,     /*!&lt; TIM1 Break Interrupt                                 */\n  TIM1_UP_IRQn                = 25,     /*!&lt; TIM1 Update Interrupt                                */\n  TIM1_TRG_COM_IRQn           = 26,     /*!&lt; TIM1 Trigger and Commutation Interrupt               */\n  TIM1_CC_IRQn                = 27,     /*!&lt; TIM1 Capture Compare Interrupt                       */\n  TIM2_IRQn                   = 28,     /*!&lt; TIM2 global Interrupt                                */\n  TIM3_IRQn                   = 29,     /*!&lt; TIM3 global Interrupt                                */\n  TIM4_IRQn                   = 30,     /*!&lt; TIM4 global Interrupt                                */\n  I2C1_EV_IRQn                = 31,     /*!&lt; I2C1 Event Interrupt                                 */\n  I2C1_ER_IRQn                = 32,     /*!&lt; I2C1 Error Interrupt                                 */\n  I2C2_EV_IRQn                = 33,     /*!&lt; I2C2 Event Interrupt                                 */\n  I2C2_ER_IRQn                = 34,     /*!&lt; I2C2 Error Interrupt                                 */\n  SPI1_IRQn                   = 35,     /*!&lt; SPI1 global Interrupt                                */\n  SPI2_IRQn                   = 36,     /*!&lt; SPI2 global Interrupt                                */\n  USART1_IRQn                 = 37,     /*!&lt; USART1 global Interrupt                              */\n  USART2_IRQn                 = 38,     /*!&lt; USART2 global Interrupt                              */\n  USART3_IRQn                 = 39,     /*!&lt; USART3 global Interrupt                              */\n  EXTI15_10_IRQn              = 40,     /*!&lt; External Line[15:10] Interrupts                      */\n  RTCAlarm_IRQn               = 41,     /*!&lt; RTC Alarm through EXTI Line Interrupt                */\n  USBWakeUp_IRQn              = 42      /*!&lt; USB Device WakeUp from suspend through EXTI Line Interrupt */  \n#endif /* STM32F10X_MD */  \n</code></pre>\n<p>配置第一个参数</p>\n<pre><code class=\"c\">b.NVIC_IRQChannel=EXTI15_10_IRQn ;\n</code></pre>\n<p>配置第二个参数</p>\n<pre><code class=\"c\">FunctionalState NVIC_IRQChannelCmd;         /*!&lt; Specifies whether the IRQ channel defined in NVIC_IRQChannel\n                                                   will be enabled or disabled. \n                                                   This parameter can be set either to ENABLE or DISABLE */ \n</code></pre>\n<p>负责确定中断通道是使能还是失能，这里我们选择ENABLE</p>\n<p>配置第三个参数</p>\n<pre><code class=\"c\">NVIC_IRQChannelPreemptionPriority\n这个是负责的抢占优先级\nNVIC_IRQChannelSubPriority\n    这个是负责相应优先级\n</code></pre>\n<p>对于当前我们的这种情况，因为只有一种中断，所以我们采用参数可以 随便一点，只有当有很多个中断的时候，才会出现拥挤</p>\n<pre><code class=\"c\">    b.NVIC_IRQChannelPreemptionPriority=1 ;\n    b.NVIC_IRQChannelSubPriority= 1 ;\n</code></pre>\n<p>高电平(GPIO_PIN_SET)、低电平(GPIO_PIN_RESET)。</p>\n<p>那么中断程序应该放在哪里呢，这就需要我们写一个中断函数</p>\n<p>在STM32中，中断函数的名称都是固定的，每个中断通道都对应一个中断函数</p>\n<p>中断函数的名字，我们可以参照一下启动文件，在其中找到中断函数</p>\n<pre><code class=\"c\">EXTI15_10_IRQHandler\n</code></pre>\n<p>注意，这个中断函数一定要书写正确，因为如果中断函数写错了，那么程序就无法进入中断了</p>\n<pre><code class=\"c\">void EXTI15_10_IRQHandler(void)\n&#123;\n        if(EXTI_GetITStatus(EXTI_Line14)==1)//获取一下是哪个中断置为1了\n        &#123;\n            EXTI_ClearITPendingBit(EXTI_Line14);//这里需要清除一下中断，因为如果中断函数不清除的话，会一直在中断函数里面循环。如果你不清楚中断标志位，那么它就会一直申请中断。这样程序就会不断相应中断，执行中断程序，那么程序就会卡死在中断程序里面了，所以我们每次中断程序结束后，都应该清除一下标志位\n            num++;\n        &#125;\t\t\n    \n&#125;\t\n</code></pre>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E5%9B%BA%E4%BB%B6%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E5%9B%BA%E4%BB%B6%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "title": "stm32定时器外设时钟",
            "date_published": "2023-09-02T07:28:00.000Z",
            "content_html": "<pre><code class=\"c\">void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState);\nvoid RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);\nvoid RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState);\n</code></pre>\n<p>定时器函数</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210427151456665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjI5NTYz,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);</p>\n<p>NewState参数是一个枚举类型，用于指示要使能或禁用指定的外设时钟。可选值为：ENABLE和DISABLE。</p>\n<p><strong>例1-1</strong>：以下代码片段用于使能GPIOA和USART1外设的时钟：</p>\n<pre><code class=\"text\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_USART1, ENABLE);\n</code></pre>\n<p>在操作外设之前，必须先使能其时钟。</p>\n<h3 id=\"2、引脚配置\"><a href=\"#2、引脚配置\" class=\"headerlink\" title=\"2、引脚配置\"></a>2、引脚配置</h3><p>GPIO_InitTypeDef结构体是STM32固件库中提供给开发者的一个方便、易用的工具，当我们要配置一个GPIO引脚时，需要设置该引脚的多个参数，如引脚方向、输出类型、速度、上拉&#x2F;下拉模式等，这些参数需要通过寄存器进行设置。而寄存器的操作比较繁琐，容易出错，因此STM32固件库提供了GPIO_InitTypeDef结构体，它封装了对GPIO外设寄存器的访问，使得开发者可以通过设置结构体的成员变量，来快速、简单地配置GPIO引脚的多个参数。</p>\n<p>先配置GPIO_InitTypeDef结构体；结构体的定义如下：</p>\n<p>这个是已经配置好的模式</p>\n<pre><code class=\"text\">typedef struct\n&#123;\n  uint16_t GPIO_Pin;             /*!&lt; Specifies the GPIO pins to be configured.\n                                      This parameter can be any value of @ref GPIO_pins_define */\n\n  GPIOSpeed_TypeDef GPIO_Speed;  /*!&lt; Specifies the speed for the selected pins.\n                                      This parameter can be a value of @ref GPIOSpeed_TypeDef */\n\n  GPIOMode_TypeDef GPIO_Mode;    /*!&lt; Specifies the operating mode for the selected pins.\n                                      This parameter can be a value of @ref GPIOMode_TypeDef */\n&#125;GPIO_InitTypeDef;\n</code></pre>\n<p>GPIO_Pin表示要配置的GPIO引脚，可以使用逻辑或运算符“|”将多个引脚组合在一起。</p>\n<p>GPIO_Mode表示GPIO引脚的工作模式。</p>\n<table>\n<thead>\n<tr>\n<th>输入</th>\n<th></th>\n<th>输出</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GPIO_Mode_AIN</td>\n<td>模拟输入</td>\n<td>GPIO_Mode_Out_OD</td>\n<td>普通开漏输出</td>\n</tr>\n<tr>\n<td>GPIO_Mode_IN_FLOATING</td>\n<td>浮空输入</td>\n<td>GPIO_Mode_Out_PP</td>\n<td>普通推挽输出</td>\n</tr>\n<tr>\n<td>GPIO_Mode_IPU</td>\n<td>上拉输入</td>\n<td>GPIO_Mode_AF_OD</td>\n<td>复用推挽输出</td>\n</tr>\n<tr>\n<td>GPIO_Mode_IPD</td>\n<td>下拉输入</td>\n<td>GPIO_Mode_AF_PP</td>\n<td>复用开漏输出</td>\n</tr>\n</tbody></table>\n<p>GPIO_Speed表示GPIO引脚的速度，可选值为低速（GPIO_Speed_2MHz）、中速（GPIO_Speed_10MHz）或高速（GPIO_Speed_50MHz）。</p>\n<p>一般默认为普通推挽输出</p>\n<p><strong>例2-1：</strong>将PA0和PA1两个引脚配置为50MHz的推挽输出，并应用于GPIOA外设。</p>\n<pre><code class=\"c\">GPIO_InitTypeDef GPIO_InitStructure;//这个GPIO_InitStructure就是一个结构体的名称，你也可以改为u,然后后面的名称对应都变成u就行\nGPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;\nGPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;\nGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\nGPIO_Init(GPIOA, &amp;GPIO_InitStructure);\n</code></pre>\n<p>以上代码将GPIOA的PA0引脚输出低&#x2F;高电平，即将PA0引脚对应的寄存器的输出位设置为0&#x2F;1。</p>\n<p>注意：在操作GPIO引脚之前，必须先配置其为输出模式。否则，GPIO引脚将不能输出电平。</p>\n<p>*注意：在很多开发板上，GPIO输出控制LED等外设的亮灭，常常使用了PNP型晶体管或是开漏输出方式。这种方式下，当GPIO引脚输出低电平时，PNP型晶体管或是开漏输出器件会通电，外设（如LED）被点亮，而当GPIO引脚输出高电平时，PNP型晶体管或是开漏输出器件不通电，外设（如LED）被熄灭。</p>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/stm32%206-1Tim%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD/",
            "url": "https://bangdexuanyuan.github.io/stm32/stm32%206-1Tim%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD/",
            "title": "定时器学习",
            "date_published": "2023-09-02T02:32:00.000Z",
            "content_html": "<h4 id=\"stm32-6-1Tim定时器中断\"><a href=\"#stm32-6-1Tim定时器中断\" class=\"headerlink\" title=\"stm32 6-1Tim定时器中断\"></a>stm32 6-1Tim定时器中断</h4><p>stm32拥有16位计数器，预分频器，自动重装寄存器的实际单元。如果预分频器和自动重装寄存器都设置最大，2的16次方，因为2的16次方为66536</p>\n<p>在72MHz计数时钟下可以实现最大59.65s的定时</p>\n<p>这部分之后再听一遍</p>\n<p>不仅具有基本的定时中断功能，而且还包括内外时钟源的选择，输入捕获，输出比较，编码器接口，主从触发模式等多种功能</p>\n<p>![](C:\\all study document\\Microcontroller study\\32\\图片笔记\\Snipaste_2023-08-24_22-05-54.png)</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/650fb062c458853aef4a4114.png\"></p>\n<p>时基单元：由自动重装寄存器，预分频器与CNT计数器组成，预分频器之前，连接的就是基准计数时钟的输入，最终来到了控制器的这个位置，由于基本定时器只能选择内部时钟，所以你可以直接认为这根线直接连接到了输入端这里，也就是内部时钟CK_INT，内部时钟的来源是RCC的TIMxCLK，这里的频率一般是内部系统的主频72MHz</p>\n<p>我们看时基单元，它可以首先对输入进来的72MHz计数时钟进行预分频，比如这个寄存器写0，就是不分频，或者说是1分频，这个时候的输出频率等于输入频率等于72MHz，如果预分频器写1，就是2分频，那么输出的频率就为36MHz，如果写2，就是三分频，输出频率等于72&#x2F;3等于24MHz，以此类推</p>\n<p>实际的分频系数等于预分频器的系数加一，这个预分频器是16位的，所以最大值可以写65535，也就是最大65536分频的，这就是预分频器，就是对输入的频率提前进行预分频的操作</p>\n<p>然后就是计数器，就是对预分频后的计数时钟进行计数，计数时钟每来一个上升沿，计数时钟的值就加一，这个计数器也是16位的，可以从0计数到65535；如果再加的话，计数器就会回到零，重新进行计数，所以计数器的值在运行过程中会不断进行自增运行，当自增达到目标值的时候，产生中断，就完成了定时的任务。</p>\n<p>所以现在还需要一个存储目标值函数的计数器，就是自动重装载寄存器，自动重装载计数器也是16位的，它存储的就是我们的计数目标，在运行的过程中，计数值不断增加，自动重装值是固定的目标，当计数值等于重装计数器的值的时候，也就是即使时间到了，那它就会产生一个中断信号，并且清零计数器</p>\n<p>在这里有一个向上的箭头，表示这里会产生一个中断信号，像这种计数值等于重装值产生的中断，我们一般称之为更新中断，这个更新中断之后，就会通往NVIC，我们再配置好NVIC的定时器通道，那定时器的更新中断就能得到CPU的响应了，这里向下的箭头，代表这里会产生一个事件，这里对应的事件，就叫做更新事件</p>\n",
            "tags": [
                "单片机"
            ]
        }
    ]
}