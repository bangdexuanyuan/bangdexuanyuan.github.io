{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"stm32\" tag",
    "description": "欢迎大家来到邦的轩辕的小屋，这里会分享everything",
    "home_page_url": "https://bangdexuanyuan.github.io",
    "items": [
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E5%9B%BA%E4%BB%B6%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E5%9B%BA%E4%BB%B6%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "title": "stm32定时器外设时钟",
            "date_published": "2023-09-02T07:28:00.000Z",
            "content_html": "<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RCC_AHBPeriphClockCmd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> RCC_AHBPeriph<span class=\"token punctuation\">,</span> FunctionalState NewState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> RCC_APB2Periph<span class=\"token punctuation\">,</span> FunctionalState NewState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RCC_APB1PeriphClockCmd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> RCC_APB1Periph<span class=\"token punctuation\">,</span> FunctionalState NewState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>定时器函数</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210427151456665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjI5NTYz,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);</p>\n<p>NewState 参数是一个枚举类型，用于指示要使能或禁用指定的外设时钟。可选值为：ENABLE 和 DISABLE。</p>\n<p><strong>例 1-1</strong>：以下代码片段用于使能 GPIOA 和 USART1 外设的时钟：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_USART1, ENABLE);</pre></td></tr></table></figure><p>在操作外设之前，必须先使能其时钟。</p>\n<h3 id=\"2-引脚配置\"><a class=\"markdownIt-Anchor\" href=\"#2-引脚配置\">#</a> 2、引脚配置</h3>\n<p>GPIO_InitTypeDef 结构体是 STM32 固件库中提供给开发者的一个方便、易用的工具，当我们要配置一个 GPIO 引脚时，需要设置该引脚的多个参数，如引脚方向、输出类型、速度、上拉 / 下拉模式等，这些参数需要通过寄存器进行设置。而寄存器的操作比较繁琐，容易出错，因此 STM32 固件库提供了 GPIO_InitTypeDef 结构体，它封装了对 GPIO 外设寄存器的访问，使得开发者可以通过设置结构体的成员变量，来快速、简单地配置 GPIO 引脚的多个参数。</p>\n<p>先配置 GPIO_InitTypeDef 结构体；结构体的定义如下：</p>\n<p>这个是已经配置好的模式</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>typedef struct</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  uint16_t GPIO_Pin;             /*!&lt; Specifies the GPIO pins to be configured.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                      This parameter can be any value of @ref GPIO_pins_define */</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  GPIOSpeed_TypeDef GPIO_Speed;  /*!&lt; Specifies the speed for the selected pins.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                      This parameter can be a value of @ref GPIOSpeed_TypeDef */</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  GPIOMode_TypeDef GPIO_Mode;    /*!&lt; Specifies the operating mode for the selected pins.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                      This parameter can be a value of @ref GPIOMode_TypeDef */</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&#125;GPIO_InitTypeDef;</pre></td></tr></table></figure><p>GPIO_Pin 表示要配置的 GPIO 引脚，可以使用逻辑或运算符 “|” 将多个引脚组合在一起。</p>\n<p>GPIO_Mode 表示 GPIO 引脚的工作模式。</p>\n<table>\n<thead>\n<tr>\n<th>输入</th>\n<th></th>\n<th>输出</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GPIO_Mode_AIN</td>\n<td>模拟输入</td>\n<td>GPIO_Mode_Out_OD</td>\n<td>普通开漏输出</td>\n</tr>\n<tr>\n<td>GPIO_Mode_IN_FLOATING</td>\n<td>浮空输入</td>\n<td>GPIO_Mode_Out_PP</td>\n<td>普通推挽输出</td>\n</tr>\n<tr>\n<td>GPIO_Mode_IPU</td>\n<td>上拉输入</td>\n<td>GPIO_Mode_AF_OD</td>\n<td>复用推挽输出</td>\n</tr>\n<tr>\n<td>GPIO_Mode_IPD</td>\n<td>下拉输入</td>\n<td>GPIO_Mode_AF_PP</td>\n<td>复用开漏输出</td>\n</tr>\n</tbody>\n</table>\n<p>GPIO_Speed 表示 GPIO 引脚的速度，可选值为低速（GPIO_Speed_2MHz）、中速（GPIO_Speed_10MHz）或高速（GPIO_Speed_50MHz）。</p>\n<p>一般默认为普通推挽输出</p>\n<p>** 例 2-1：** 将 PA0 和 PA1 两个引脚配置为 50MHz 的推挽输出，并应用于 GPIOA 外设。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GPIO_InitTypeDef GPIO_InitStructure<span class=\"token punctuation\">;</span><span class=\"token comment\">// 这个 GPIO_InitStructure 就是一个结构体的名称，你也可以改为 u, 然后后面的名称对应都变成 u 就行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Pin <span class=\"token operator\">=</span> GPIO_Pin_0 <span class=\"token operator\">|</span> GPIO_Pin_1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Mode <span class=\"token operator\">=</span> GPIO_Mode_Out_PP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Speed <span class=\"token operator\">=</span> GPIO_Speed_50MHz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">GPIO_Init</span><span class=\"token punctuation\">(</span>GPIOA<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>GPIO_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上代码将 GPIOA 的 PA0 引脚输出低 / 高电平，即将 PA0 引脚对应的寄存器的输出位设置为 0/1。</p>\n<p>注意：在操作 GPIO 引脚之前，必须先配置其为输出模式。否则，GPIO 引脚将不能输出电平。</p>\n<p>* 注意：在很多开发板上，GPIO 输出控制 LED 等外设的亮灭，常常使用了 PNP 型晶体管或是开漏输出方式。这种方式下，当 GPIO 引脚输出低电平时，PNP 型晶体管或是开漏输出器件会通电，外设（如 LED）被点亮，而当 GPIO 引脚输出高电平时，PNP 型晶体管或是开漏输出器件不通电，外设（如 LED）被熄灭。</p>\n",
            "tags": [
                "stm32"
            ]
        }
    ]
}