{
    "version": "https://jsonfeed.org/version/1",
    "title": "null",
    "description": "欢迎大家来到邦的轩辕的小屋，这里会分享everything",
    "home_page_url": "https://bangdexuanyuan.github.io",
    "items": [
        {
            "id": "https://bangdexuanyuan.github.io/life/%E6%B5%B7%E8%88%AA%E6%B8%B8%E8%AE%B0/",
            "url": "https://bangdexuanyuan.github.io/life/%E6%B5%B7%E8%88%AA%E6%B8%B8%E8%AE%B0/",
            "title": "海航游记",
            "date_published": "2024-08-21T04:50:00.000Z",
            "content_html": "<p>如今我更愿意相信人生是守恒的，今天的努力未必会在你规定的时间回报你，但一定会在未来落到你的身上。</p>\n<p>最有希望的 e2 寄掉了，没绷住，最没有希望的 b2 有了，世事真是无常。</p>\n<p>明年再来吧，也算是圆了自己一个国赛的梦。</p>\n",
            "tags": [
                "南京"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/life/%E9%82%93%E7%B4%AB%E6%A3%8B/",
            "url": "https://bangdexuanyuan.github.io/life/%E9%82%93%E7%B4%AB%E6%A3%8B/",
            "title": "邓紫棋演唱会",
            "date_published": "2024-07-13T14:00:00.000Z",
            "content_html": "<p>我的秘密 想对你说</p>\n<p>我的泪滴 想让你触摸</p>\n<p>无言以对 也想蹉跎</p>\n<p>我的年岁 想为你挥霍</p>\n<p>如果 你让我</p>\n<p>整个宇宙 我都想让你拥有</p>\n<p>以你为念的星宿 陪你到时间尽头</p>\n<p>就跟我走 若世界狂如洪流</p>\n<p>我陪你寻觅方舟 自由在夜的尽头</p>\n<p>I am the one that you’ve been looking for</p>\n<p>I am the one that you’ve been looking for</p>\n<p>没有你 快乐太单薄</p>\n<p>是你让快乐足够斑驳</p>\n<p>没有你 世界像荒漠</p>\n<p>你是我荒漠里的江河</p>\n<p>如果 你让我</p>\n<p>整个宇宙 我都想让你拥有</p>\n<p>以你为念的星宿 陪你到时间尽头</p>\n<p>就跟我走 若世界狂如洪流</p>\n<p>我陪你寻觅方舟 自由在夜的尽头</p>\n<p>就跟我走 夜的尽头 就是自由</p>\n<p>就跟我走 我带你走 夜的尽头 是永恒的自由</p>\n<p>I am the one that you’ve been looking for</p>\n<p>I am the one that you’ve been looking for</p>\n<p>I am the one that you’ve been looking for</p>\n<p>The way, the truth, the life that you’ve been looking for</p>\n<p>I am the one that you’ve been looking for</p>\n<p>I am the one that you’ve been looking for</p>\n<p>I am the one that you’ve been looking for</p>\n<p>The way, the truth, the life that you’ve been looking for</p>\n<p>若世界狂如洪流</p>\n<p>我陪你寻觅方舟</p>\n<p>自由在夜的尽头</p>\n<p>7.13 嗨皮，下次，再见。</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/669383cdd9c307b7e98415ab.jpg\" alt=\"\"></p>\n",
            "tags": [
                "哈尔滨生活"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/study/%E5%BD%B1%E5%93%8D%E9%9B%B6%E4%BB%B6%E7%96%B2%E5%8A%B3%E5%BC%BA%E5%BA%A6%E7%9A%84%E5%9B%A0%E7%B4%A0/",
            "url": "https://bangdexuanyuan.github.io/study/%E5%BD%B1%E5%93%8D%E9%9B%B6%E4%BB%B6%E7%96%B2%E5%8A%B3%E5%BC%BA%E5%BA%A6%E7%9A%84%E5%9B%A0%E7%B4%A0/",
            "title": "",
            "date_published": "2024-06-08T16:06:09.605Z",
            "content_html": "<p>材料力学复习：</p>\n<h3 id=\"影响零件疲劳强度的因素\"><a class=\"markdownIt-Anchor\" href=\"#影响零件疲劳强度的因素\">#</a> 影响零件疲劳强度的因素</h3>\n<p>影响工件疲劳寿命的因素很多，有<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aGlkYW8uYmFpZHUuY29tL3NlYXJjaD93b3JkPSVFNSVCQSU5NCVFNSU4QSU5QiVFOSU5QiU4NiVFNCVCOCVBRCZhbXA7ZnI9aWtub3dfcGNfcWJfaGlnaGxpZ2h0\">应力集中</span>、零件尺寸、表面状态</p>\n<p>1.<strong> 应力集中的影响</strong>：零件受载时，在几何形状突然变化处，如圆角、孔、凹槽等，要产生应力集中，对应力集中敏感还与材料有关，常用有效应力集中系数（可查有关手册）来考虑应力集中对疲劳强度的影响。材料的强渡极限越高，对应力集中越敏感。如果在同一个截面上同时有几个应立集中源时，应该采用其中最大有效应力集中系数进行计算。<br>\n2.** 尺寸的影响：** 零件尺寸的大小对疲劳强度的影响可以用尺寸系数（可以查有关手册）来表示。当其他条件相同时，尺寸越大，对零件疲劳强度的影响越显著。原因是由于材料的晶粒较粗大，出现缺陷的概率大，同时机械加工后表面冷作硬化层（对疲劳强度有利）相对较薄。</p>\n<p>3.<strong> 表面状态的影响</strong>：零件表面质量对疲劳强度的影响可以用表面状态系数（可以查有关手册）来表示。铸铁对于加工后的表面状态很不敏感，可以取钢的强度极限极高，表面越粗糙，表面状态系数越低，所以用高强度合金钢制造的零件，为了使疲劳强度有所提高，其表面应该有较高的加工质量。此外，还可以采取下列措施来改善表面。</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/pwm%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E4%BC%9A%E5%87%BA%E9%94%99/",
            "url": "https://bangdexuanyuan.github.io/stm32/pwm%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E4%BC%9A%E5%87%BA%E9%94%99/",
            "title": "pwm为什么还会出错",
            "date_published": "2024-06-08T05:54:00.000Z",
            "content_html": "<p>最近在调 pwm 舵机机械臂，发现我在 keil Debug 对下位机调试的时候，上位机传下来的数据，没有乱，但是反映到机械臂上，就是它会来回抽搐，然后我查询网上资料，有得人说，是因为模拟地和数字地共地得原因，但是之前也是数字地和模拟地共在了一起，当时也是好用得，而且，专家们的意见也不统一，所以这个由这个原因引起的概率十分小，那么问题在哪？</p>\n<p>频率也对，电压也在额定电压中的，信号线也没有短接。</p>\n<p>抱着试一试的心态，我换了一个机械臂测试，发现，它最终好用了。</p>\n<p>一开始，我只接上了一个舵机，好用，当接上第二个舵机的时候，本来应该一上电就自启动的 stm32, 它没有自启动，我看到稳压电源的电流值变成了 1.3A，正常的时候，电流应该是 300ma，所以我猜是舵机赌转了，然后我用万用表去测量，果然是第二次的舵机的正负短接了。但是第二次进入的舵机，我也没有对它操作，所以唯一的可能性就是这个舵机本来就是坏的，事实也是如此。</p>\n<p>综上，如果，你的硬件，软件感觉都没有问题，但是这个机器就是不按照你想的来，那么最好的办法就是换一个舵机，换一块 32，有的东西是你改变不了。</p>\n",
            "tags": [
                "mistake"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/diary/2024.6.5%E5%8F%B7%E8%B0%83%E8%AF%95%E6%97%A5%E5%BF%97/",
            "url": "https://bangdexuanyuan.github.io/diary/2024.6.5%E5%8F%B7%E8%B0%83%E8%AF%95%E6%97%A5%E5%BF%97/",
            "title": "",
            "date_published": "2024-06-06T11:04:17.312Z",
            "content_html": "<p>单片机有时候上电后，不自动复位，是因为在外设初始化之前需要添加延时</p>\n<pre><code class=\"language-c++\">  SystemClock_Config();\n\n  /* USER CODE BEGIN SysInit */\n\tdelay_ms(1000);\n\n\n  /* Initialize all configured peripherals */\n  MX_GPIO_Init();\n  MX_I2C1_Init();\n  MX_TIM1_Init();\n  MX_TIM2_Init();\n  MX_TIM3_Init();\n  MX_TIM4_Init();\n  MX_USART3_UART_Init();\n</code></pre>\n<p>这样，复位部分才能正常工作。</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/diary/%E7%94%B5%E8%B0%83%E5%AF%BC%E9%80%9A/",
            "url": "https://bangdexuanyuan.github.io/diary/%E7%94%B5%E8%B0%83%E5%AF%BC%E9%80%9A/",
            "title": "",
            "date_published": "2024-06-05T09:11:47.951Z",
            "content_html": "<p>电调导通</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/diary/%E6%B0%B4%E4%B8%8B%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%97%AD%E7%8E%AF%E7%8E%AF%E8%8A%82/",
            "url": "https://bangdexuanyuan.github.io/diary/%E6%B0%B4%E4%B8%8B%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%97%AD%E7%8E%AF%E7%8E%AF%E8%8A%82/",
            "title": "",
            "date_published": "2024-06-03T14:45:59.807Z",
            "content_html": "<p>水下机器人闭环环节</p>\n<p>一直目前我写的 MPU6050 向前是</p>\n<p><img data-src=\"https://images.tcdn.com.br/img/img_prod/715570/acelerometro_e_giroscopio_3_eixos_mpu_6050_mpu6050_359657_1_20201213232607.jpg\" alt=\"\"></p>\n<p>规定，纸面的左右是 x 轴，当这个 mpu6050 模块绕着 x 轴旋转的时候，此时产生的角是 roll，且如果上方向着纸面里面旋转，此时的 roll 角会越来越大，直到 90 度</p>\n<p>再规定，纸面的上下形成一条直线，这个线称为 y 轴，此时 mpu6050 绕着这个轴旋转的时候，此时产生的角是 pitch, 且如果左边的边是向纸面里面旋进的，这个时候的 pitch 会越来越大，直到 90 度。</p>\n<p>MPU6050 的初始化一定记得放在延时之前</p>\n<pre><code class=\"language-c++\">res = MPU6050_DMP_Init();\n\tif(res!=0)\n\t&#123;\n\t\tprintf(&quot;MPU6050 Init ERROR res = %d \\r\\n&quot;,res);\n\t\twhile(res)//这句话的意思是当res的值不为0时，一直保持while循环\n\t\t&#123;\n\t\t\tHAL_Delay(300);\n\t\t\tres = MPU6050_DMP_Init();\n\t\t\tprintf(&quot;MPU6050 Init ERROR res=%d \\r\\n &quot;,res);\n\t\t&#125;\n\t\tprintf(&quot;MPU6050 Init SUCCEED! \\r\\n&quot;);\n\t&#125;\n\telse \n\t&#123;\n\t\tprintf(&quot;MPU6050 Init SUCCEED! \\r\\n&quot;);\n\t&#125;\n\tHAL_TIM_PWM_Start(&amp;htim1,TIM_CHANNEL_1);\n\tHAL_TIM_PWM_Start(&amp;htim1,TIM_CHANNEL_2);\n\t__HAL_TIM_SetCompare(&amp;htim1, TIM_CHANNEL_1, 1500);\n\t__HAL_TIM_SetCompare(&amp;htim1, TIM_CHANNEL_2, 1500);\n\tHAL_Delay(5000);\n</code></pre>\n<p>应该这样写.</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/diary/2024.5.27%20-%20%E5%89%AF%E6%9C%AC/",
            "url": "https://bangdexuanyuan.github.io/diary/2024.5.27%20-%20%E5%89%AF%E6%9C%AC/",
            "title": "stm调试日志",
            "date_published": "2024-06-03T03:35:00.000Z",
            "content_html": "<p>抽象，因为一个</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/665d398d5e6d1bfa059b314e.png\" alt=\"\"></p>\n<p>__HAL 少写一个短横线，查了半天的错误，抽象。</p>\n<p>紧接着，我在串口中断里面，去获取当前的角度，其实，这一步就相当于是定时器的作用，</p>\n<p>然后我发现一个现象，就是我的下位机好像不进入中断了，我一开始一位是我的 RX 和 TX 口接错了，结果查了半天，发现不是这个错误。</p>\n<p>然后我先去获取上位机的数据，因为我点击执行机构在执行前会先进行判断，判断这个包是不是传的有问题</p>\n<p>也就是我代码中的这一行。</p>\n<pre><code>        if(Rx_data[0]==0x7F&amp;&amp;Rx_data[1]==0x01&amp;&amp;Rx_data[24]==0x77) &#123; \n</code></pre>\n<p>在这一步，我先判断帧头和帧尾，还有命令行，如果这三个数据帧，没有发生改变，我再进一步进行判断。</p>\n<p>下一步就是用到了 CRC 校验</p>\n<p>我首先在上位机，也就是岸上，去计算一个 CRC 值，因为我规定的是 uint16, 也就是 16 位的，所以我需要拆成两个八位的进行传输。</p>\n<p>也就是 Rx_data [23] 和 RX_data [22]</p>\n<p>这里 RX_data [23] 是高位</p>\n<p>紧接着，我再计算下位机，也就是水下部分，前 21 项，也就是数组下标 0~20，因为上位机也计算了 21 位，所以下位机也计算 21 位，</p>\n<p>如果 CRC 校验完的数字再一样，那么我们就可以确定这个数据包是没有错误的。</p>\n<pre><code>\t\t\tcrc_shou = CRC16(Rx_data,21,0xffff);\n\t\t\tcrc_fa = (Rx_data[23]&lt;&lt;8) |Rx_data[22];//\n</code></pre>\n<p>也就是下面的部分：</p>\n<pre><code>if(crc_shou==crc_fa)&#123;\t\n\t\t\t\t\t\n//\t\t\t\t\t\tMPU6050_DMP_Get_Data(&amp;pitch,&amp;roll,&amp;yaw);\n\t\t\t\t\t\terr_pitch = target_pitch - pitch;\n\t\t\t\t\t\terr_roll =target_roll - roll;\n\t\t\t\t\t\tpwm_balance_pitch+=pid_update(err_pitch);\n\t\t\t\t\t\tpwm_balance_roll +=pid_update(err_roll);\n\t\t\t\t\t\tAixAngf1= (-0.927)*((float) ((AixAng1+5)/10)-181.0);//是经过处理之后的数据，AixAngf1的现象为前后可转动90度，所以AixAngf1的数值为-90~90度\n\t\t\t\t\t\tAixAngf2= ((float) ((AixAng2+5)/10)-185.0)*0.9375;\n\t\t\t\t\t\tAixAngf3 = ((float) ((AixAng3+5)/10)-182.0)*(-0.9375)+180;\n\t\t\t\t\t\tadc1_error = motor_adc1 - 2089;//得知当前adc1的差值\n\t\t\t\t\t\tmotor_pwm1 = 1500 + adc1_error*0.25;\n\t\t\t\t\t\tadc2_error = motor_adc2 - 2063;\n\t\t\t\t\t\tmotor_pwm2 = 1500 + adc2_error*0.25;\n\t\t\t\t\t\tadc3_error = motor_adc3 - 2048;\n\t\t\t\t\t\tmotor_pwm3 = 1500 + adc3_error*0.25;\n\t\t\t\t\t\tadc4_error = motor_adc4 - 2065;//控制左转和右转\n\t\t\t\t\t\tmotor_pwm4 = 1500 + adc4_error*0.25;\n\t\t\t\t\t\tpwm1 = (1500 - motor_pwm1*0.5 +motor_pwm2*0.5)/3*2+(3000-motor_pwm4)/3;\n\t\t\t\t\t\tif(pwm1&gt;2000) pwm1=2000;\n\t\t\t\t\t\tif(pwm1&lt;1000) pwm1=1000;\n\t\t\t\t\t\tpwm2 = (3000 - (motor_pwm1*0.5)-(motor_pwm2*0.5))/3*2+motor_pwm4/3;\n\t\t\t\t\t\tif(pwm2&gt;2000) pwm2=2000;\n\t\t\t\t\t\tif(pwm2&lt;1000) pwm2=1000;\n\t\t\t\t\t\tpwm3 = (motor_pwm1*0.5 +motor_pwm2*0.5)/3*2 + (motor_pwm4)/3;\n\t\t\t\t\t\tif(pwm3&gt;2000) pwm3=2000;\n\t\t\t\t\t\tif(pwm3&lt;1000) pwm3=1000;\n\t\t\t\t\t\tpwm4=(1500 + motor_pwm1*0.5 - motor_pwm2*0.5)/3*2+(3000 - motor_pwm4)/3;\n\t\t\t\t\t\tif(pwm4&gt;2000) pwm4=2000;\n\t\t\t\t\t\tif(pwm4&lt;1000) pwm4=1000;\n\t\t\t\t\tpwm5=3000 - motor_pwm3;\n\t\t\t\t\tpwm6=3000 - motor_pwm3;\n\t\t\t\t\t//mpu6050调节部分\n\t\t\t\t\tpwm5 = pwm5+pwm_balance_pitch+pwm_balance_roll;\n\t\t\t\t\tpwm6 = pwm6+pwm_balance_pitch-pwm_balance_roll;\n\t\t\t\t\tif(pwm5&gt;2000) pwm5=2000;\n\t\t\t\t\tif(pwm5&lt;1000) pwm5=1000;\n\t\t\t\t\tif(pwm6&gt;2000) pwm6=2000;\n\t\t\t\t\tif(pwm6&lt;1000) pwm6=1000;\n\t\t\t\t\tangle_pwm4 = 1500 + 10*open_angle;//PA6\n//\t\t\t\t\t__HAL_TIM_SetCompare(&amp;htim3, TIM_CHANNEL_1, angle_pwm4); \n\t\t\t\t\tangle_pwm3 = 1150 + 7.22*AixAngf1;\n//\t\t\t\t\t__HAL_TIM_SetCompare(&amp;htim3, TIM_CHANNEL_2, angle_pwm3); \n\t\t\t\t\tangle_pwm2 = 1200 +600/90*AixAngf2;\n//\t\t\t\t\t__HAL_TIM_SetCompare(&amp;htim3, TIM_CHANNEL_3, angle_pwm2);\n\t\t\t\t\tangle_pwm1 = 1500 +650/90*AixAngf3;\n//\t\t\t\t\t__HAL_TIM_SetCompare(&amp;htim3, TIM_CHANNEL_4, angle_pwm1);\n\n\n\t\t\t__HAL_TIM_SetCompare(&amp;htim1, TIM_CHANNEL_1, pwm1 );\n\t\t\t__HAL_TIM_SetCompare(&amp;htim1, TIM_CHANNEL_2, pwm2 );\n\t\t\t__HAL_TIM_SetCompare(&amp;htim1, TIM_CHANNEL_3, pwm3 );\n\t\t\t__HAL_TIM_SetCompare(&amp;htim1, TIM_CHANNEL_4, pwm4 );\n\t\t\t__HAL_TIM_SetCompare(&amp;htim2, TIM_CHANNEL_1, pwm5);\n\t\t\t__HAL_TIM_SetCompare(&amp;htim2, TIM_CHANNEL_2, pwm6);\n//\t\t\t//控制舵机的\n\t\t\t__HAL_TIM_SetCompare(&amp;htim3, TIM_CHANNEL_1, angle_pwm4); \n\t\t\t__HAL_TIM_SetCompare(&amp;htim3, TIM_CHANNEL_2, angle_pwm3); \n\t\t\t__HAL_TIM_SetCompare(&amp;htim3, TIM_CHANNEL_3, angle_pwm2);\n\t\t\t__HAL_TIM_SetCompare(&amp;htim3, TIM_CHANNEL_4, angle_pwm1);\n</code></pre>\n<p>但是，想法是这样，实际上却不太一样，我从下位机单纯获取数据，获取</p>\n<p>回到一开始说的部分，我在测试数据传输的时候，发现下位机好像进入不了中断，</p>\n<p>我说卧槽，这是为什么，然后我单独拿串口去读数据，发现，485 传过来的数据，传到下位机的第二位是 0xC1, 可是我给上位机设定的是 0x01 呀，然后我初步判断是 485 的问题，让数据在传输的过程中发生了改变。</p>\n<p>然后我又去单独测上位机，我去判断数据包，发现上位机发下来的就是 0xc1, 诶呦卧槽了，我给的可是 0x01</p>\n<p>然后我又测了好几遍，都是这个样子，然后，就刚才，当我听着逃跑计划的歌，去测得时候，md，又好使了，上位机发得数据，又能变成 0x01 了，诶呦我勒个大雷，我不知道为啥又能改了？可能是我原来复位键摁得有问题，maybe。</p>\n<p>2024.6.4 调试日志：</p>\n<p>控制盒，主手的供电，必须采取 stlink 供电，如果直接采用稳压供电，会不稳，我也不知道为什么。很抽象。</p>\n<p>2024.6.5 调试日志：</p>\n<p>目前，已经把机器的推进器部分大概调整好了，然后需要记住，串口线的颜色，橙色的接蓝色，黄色的接绿色。</p>\n<p>然后，我现在画的板子，有时候上电，板子上面的单片机的电源会不导通，测稳压模块两端的电压，发现其是不导通的。</p>\n<p>2024.6.6 日调试日志：</p>\n<p>现在单片机的下位机感觉时间一长，串口还是容易卡死在中断里面。</p>\n",
            "tags": [
                "mistake"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/diary/2024.5.27/",
            "url": "https://bangdexuanyuan.github.io/diary/2024.5.27/",
            "title": "2024.5.27随记",
            "date_published": "2024-05-27T13:54:00.000Z",
            "content_html": "<p>这首歌可以破音但不能降调，我的意思是，人生可以失败但不能退缩</p>\n",
            "tags": [
                "mind"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/study/%E6%9D%90%E6%96%99%E5%8A%9B%E5%AD%A6/",
            "url": "https://bangdexuanyuan.github.io/study/%E6%9D%90%E6%96%99%E5%8A%9B%E5%AD%A6/",
            "title": "",
            "date_published": "2024-04-08T16:10:32.484Z",
            "content_html": "<p>第三章：</p>\n<p>扭转：</p>\n<p>方向：由截面法分析出来的，内力如果沿着截面向外，那么大小就是正的。</p>\n<p>如果分析出来的内力沿着截面向内，那么大小就是负的。</p>\n<p>分析的时候使用的方法是右手定则。</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/pcb/%E5%BC%AF%E7%9F%A9%EF%BC%8C%E5%89%AA%E5%8A%9B%E4%B8%8E%E5%88%86%E5%B8%83%E8%BD%BD%E8%8D%B7%E9%9B%86%E8%8D%B7%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/",
            "url": "https://bangdexuanyuan.github.io/pcb/%E5%BC%AF%E7%9F%A9%EF%BC%8C%E5%89%AA%E5%8A%9B%E4%B8%8E%E5%88%86%E5%B8%83%E8%BD%BD%E8%8D%B7%E9%9B%86%E8%8D%B7%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/",
            "title": "",
            "date_published": "2024-03-27T17:08:05.166Z",
            "content_html": "<p>弯矩，剪力与分布载荷集荷之间的关系及其应用</p>\n<p>分布载荷集度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">q(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 向上为正，向下为负</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>F</mi><mi>s</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>d</mi><mi>x</mi><mo>=</mo><mi>q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dF_s(x)/dx = q(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>F</mi><mi>s</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>x</mi><mo>=</mo><mi>d</mi><msub><mi>S</mi><mi>q</mi></msub></mrow><annotation encoding=\"application/x-tex\">dF_s(x) = q(x)dx=dS_q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mi>s</mi></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F_s(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 的意思是两个截面剪力的差，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>S</mi><mi>q</mi></msub></mrow><annotation encoding=\"application/x-tex\">dS_q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> 表示 q 围成的面积</p>\n<p><img data-src=\"C:/%E8%B5%84%E6%96%99%E7%9B%98/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E8%AF%BE/%E6%9D%90%E6%96%99%E5%8A%9B%E5%AD%A6/Snipaste_2024-03-28_00-13-50.png\" alt=\"\"></p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/pcb/%E4%BB%A3%E7%A0%81/",
            "url": "https://bangdexuanyuan.github.io/pcb/%E4%BB%A3%E7%A0%81/",
            "title": "",
            "date_published": "2024-03-27T03:32:09.754Z",
            "content_html": "<pre><code class=\"language-c++\">/* USER CODE BEGIN Header */\n/**\n  ******************************************************************************\n  * @file           : main.c\n  * @brief          : Main program body\n  ******************************************************************************\n  * @attention\n  *\n  * Copyright (c) 2024 STMicroelectronics.\n  * All rights reserved.\n  *\n  * This software is licensed under terms that can be found in the LICENSE file\n  * in the root directory of this software component.\n  * If no LICENSE file comes with this software, it is provided AS-IS.\n  *\n  ******************************************************************************\n  */\n/* USER CODE END Header */\n/* Includes ------------------------------------------------------------------*/\n#include &quot;main.h&quot;\n#include &quot;usart.h&quot;\n#include &quot;gpio.h&quot;\n\n/* Private includes ----------------------------------------------------------*/\n/* USER CODE BEGIN Includes */\nuint8_t  RxBuffer[300];\nuint8_t cnt;\nuint8_t Rx_data[300];\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n/* USER CODE END Includes */\n\n/* Private typedef -----------------------------------------------------------*/\n/* USER CODE BEGIN PTD */\nint fputc(int ch, FILE *f)\n&#123;\n  HAL_UART_Transmit(&amp;huart1, (uint8_t *)&amp;ch, 1, 0xffff);\n  return ch;\n&#125;\n \n/**\n  * 函数功能: 重定向c库函数getchar,scanf到DEBUG_USARTx\n  * 输入参数: 无\n  * 返 回 值: 无\n  * 说    明：无\n  */\nint fgetc(FILE *f)\n&#123;\n  uint8_t ch = 0;\n  HAL_UART_Receive(&amp;huart1, &amp;ch, 1, 0xffff);\n  return ch;\n&#125;\n\n/* USER CODE END PTD */\n\n/* Private define ------------------------------------------------------------*/\n/* USER CODE BEGIN PD */\nvoid servo(float angle1,float angle2,float angle3,float angle4)\n&#123;\n\t\t\n&#125;\n/* USER CODE END PD */\n\n/* Private macro -------------------------------------------------------------*/\n/* USER CODE BEGIN PM */\n\n/* USER CODE END PM */\n\n/* Private variables ---------------------------------------------------------*/\n\n/* USER CODE BEGIN PV */\n\n/* USER CODE END PV */\n\n/* Private function prototypes -----------------------------------------------*/\nvoid SystemClock_Config(void);\n/* USER CODE BEGIN PFP */\nstatic float  AixAngf1 = 0;\nstatic float  AixAngf2 = 0;\nstatic float  AixAngf3 = 0;\nstatic float  AixAngf4 = 0;\n/* USER CODE END PFP */\nstatic uint16_t  AixAng1 = 0;\nstatic uint16_t  AixAng2 = 0;\nstatic uint16_t  AixAng3 = 0;\nstatic uint16_t  AixAng4 = 0;\nstatic uint16_t open_angle =0;\n/* Private user code ---------------------------------------------------------*/\n/* USER CODE BEGIN 0 */\n\nvoid HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)\n&#123;\n    if(huart-&gt;Instance==USART2)//首先判断是否是USART2触发的中断\n\t\t&#123;\n//\t\t\tprintf(&quot;%c%c%c%c%c&quot;,Rx_data[0],Rx_data[1],Rx_data[2],Rx_data[3],Rx_data[4]);\n//\t&amp;&amp;Rx_data[1]==0x01&amp;&amp;Rx_data[17]==0x77\n       if(Rx_data[0]==0x7F&amp;&amp;Rx_data[1]==0x01&amp;&amp;Rx_data[17]==0x77) &#123;\n\t\t\t\tAixAng1 = Rx_data[3]|(Rx_data[4]&lt;&lt;8);\n\t\t\t\tAixAng2 = Rx_data[5]|(Rx_data[6]&lt;&lt;8);\n\t\t\t\tAixAng3 = Rx_data[7]|(Rx_data[8]&lt;&lt;8);\n\t\t\t\tAixAng4 = Rx_data[9]|(Rx_data[10]&lt;&lt;8);\n\t\t\t\topen_angle =  Rx_data[13]|(Rx_data[14]&lt;&lt;8);\n\t\t\t\tprintf(&quot;%d\\r\\n&quot;,open_angle);\n\n\t\t\t\tAixAngf1= 90.0-(float) ((AixAng1+5)/10);//是经过处理之后的数据，AixAngf1的现象为前后可转动90度，所以AixAngf1的数值为-90~90度\n\t\t\t\n\t\t\t\tAixAngf2= (float) ((AixAng2+5)/10)*0.9-260.0;\n\t\t\t//AixAngf2的现象也是向前可以达到-90度，向后45度最多，但是这个传感器在0~90这个区间有点问题，感觉像是2倍的关系，直接就偏移过去了\n\t\t\t//实际应该是0~45但是传感器输出的数据是0~90\n\t\t\t\n\t\t\t\tAixAngf3= (-1)*((float) ((AixAng3+5)/10)-78.0)+99.0;\n\t\t\t//AixAngf3，它的实际现象是向前为0度，但是向后为0~135度\n\t\t\t\tAixAngf4= (186.0-(float) ((AixAng4+5)/10))*0.9;\n\t\t\t\tprintf(&quot;%f\\r\\n&quot;,AixAngf1);\n\t\t\t\tprintf(&quot;%f\\r\\n&quot;,AixAngf2);\n\t\t\t\tprintf(&quot;%f\\r\\n&quot;,AixAngf3);\n\t\t\t\tprintf(&quot;%f\\r\\n&quot;,AixAngf4);\n\n//\t\t\t\t &#125;\n//\t\t\t\t if(Rx_data[1]==0x02)\n//\t\t\t\t &#123;\n//\t\t\t\t\tprintf(&quot;关灯&quot;);\n//\t\t\t\t &#125;\n//\t\t\t\t if(Rx_data[1]==0x03)\n//\t\t\t\t &#123;\n//\t\t\t\t\t\tprintf(&quot;老等&quot;);\n//\t\t\t\t &#125;\n//\t\t\t\t\t \n//\t\t\t\t\tswitch (Rx_data[1]) &#123;\n//                  case 0x01: &#123;\n//                      printf(&quot;Servo_1 turn\\r\\n&quot;);\n//                      printf(&quot;angle=%d\\r\\n&quot;, Rx_data[2] * 256 + Rx_data[3]);\n//                  &#125;\n//                      break;\n//                  case 0x02: &#123;\n//                      printf(&quot;Servo_2 turn\\r\\n&quot;);\n//                      printf(&quot;angle=%d\\r\\n&quot;, Rx_data[2] * 256 + Rx_data[3]);\n//                  &#125;\n//                      break;\n//                  case 0x03: &#123;\n//                      printf(&quot;Servo_3 turn\\r\\n&quot;);\n//                      printf(&quot;angle=%d\\r\\n&quot;, Rx_data[2] * 256 + Rx_data[3]);\n//                  &#125;\n//                      break;\n//                  case 0x04: &#123;\n//                      printf(&quot;Servo_4 turn\\r\\n&quot;);\n//                      printf(&quot;angle=%d\\r\\n&quot;, Rx_data[2] * 256 + Rx_data[3]);\n//                  &#125;\n//                      break;\n//                  default:\n//                      printf(&quot;data_error!&quot;);\n//              &#125;\n//          &#125;\n//          else\n//          &#123;\n//              printf(&quot;Data——error!\\r\\n&quot;);\n//          &#125;\n\t\t\t\t\t&#125;\n          for (int i = 0; i &lt; 18; ++i) &#123;\n              Rx_data[i]=0;\n          &#125;\n\t\t\tHAL_UART_Receive_IT(&amp;huart2,(uint8_t*)Rx_data,18);\n\t\t&#125;\n&#125;\n/* USER CODE END 0 */\n\n/**\n  * @brief  The application entry point.\n  * @retval int\n  */\nint main(void)\n&#123;\n  /* USER CODE BEGIN 1 */\n\n  /* USER CODE END 1 */\n\n  /* MCU Configuration--------------------------------------------------------*/\n\n  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n  HAL_Init();\n\n  /* USER CODE BEGIN Init */\n\n  /* USER CODE END Init */\n\n  /* Configure the system clock */\n  SystemClock_Config();\n\n  /* USER CODE BEGIN SysInit */\n\n  /* USER CODE END SysInit */\n\n  /* Initialize all configured peripherals */\n  MX_GPIO_Init();\n  MX_USART1_UART_Init();\n  MX_USART2_UART_Init();\n  /* USER CODE BEGIN 2 */\n\tHAL_UART_Receive_IT(&amp;huart2,(uint8_t*)Rx_data,18);\n\n  /* USER CODE END 2 */\n\n  /* Infinite loop */\n  /* USER CODE BEGIN WHILE */\n  while (1)\n  &#123;\n\t\t\n    /* USER CODE END WHILE */\n\n    /* USER CODE BEGIN 3 */\n//\t\tHAL_UART_Transmit(&amp;huart1 ,(uint8_t*)Tx_data , 5,0xffff);\n//\t\tHAL_Delay(2000);\n  &#125;\n  /* USER CODE END 3 */\n&#125;\n\n/**\n  * @brief System Clock Configuration\n  * @retval None\n  */\nvoid SystemClock_Config(void)\n&#123;\n  RCC_OscInitTypeDef RCC_OscInitStruct = &#123;0&#125;;\n  RCC_ClkInitTypeDef RCC_ClkInitStruct = &#123;0&#125;;\n\n  /** Initializes the RCC Oscillators according to the specified parameters\n  * in the RCC_OscInitTypeDef structure.\n  */\n  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;\n  RCC_OscInitStruct.HSEState = RCC_HSE_ON;\n  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;\n  RCC_OscInitStruct.HSIState = RCC_HSI_ON;\n  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;\n  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;\n  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;\n  if (HAL_RCC_OscConfig(&amp;RCC_OscInitStruct) != HAL_OK)\n  &#123;\n    Error_Handler();\n  &#125;\n\n  /** Initializes the CPU, AHB and APB buses clocks\n  */\n  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK\n                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;\n  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;\n\n  if (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)\n  &#123;\n    Error_Handler();\n  &#125;\n&#125;\n\n/* USER CODE BEGIN 4 */\n\n/* USER CODE END 4 */\n\n/**\n  * @brief  This function is executed in case of error occurrence.\n  * @retval None\n  */\nvoid Error_Handler(void)\n&#123;\n  /* USER CODE BEGIN Error_Handler_Debug */\n  /* User can add his own implementation to report the HAL error return state */\n  __disable_irq();\n  while (1)\n  &#123;\n  &#125;\n  /* USER CODE END Error_Handler_Debug */\n&#125;\n\n#ifdef  USE_FULL_ASSERT\n/**\n  * @brief  Reports the name of the source file and the source line number\n  *         where the assert_param error has occurred.\n  * @param  file: pointer to the source file name\n  * @param  line: assert_param error line source number\n  * @retval None\n  */\nvoid assert_failed(uint8_t *file, uint32_t line)\n&#123;\n  /* USER CODE BEGIN 6 */\n  /* User can add his own implementation to report the file name and line number,\n     ex: printf(&quot;Wrong parameters value: file %s on line %d\\r\\n&quot;, file, line) */\n  /* USER CODE END 6 */\n&#125;\n#endif /* USE_FULL_ASSERT */\n\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/pcb/123/",
            "url": "https://bangdexuanyuan.github.io/pcb/123/",
            "title": "",
            "date_published": "2024-03-26T16:50:22.284Z",
            "content_html": "<p>1150 是从上到下的第二个舵机的机械中值。</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/pcb/%E7%94%BBPCB%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/",
            "url": "https://bangdexuanyuan.github.io/pcb/%E7%94%BBPCB%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/",
            "title": "水下机器人画板子的时候遇到的一些问题",
            "date_published": "2024-03-25T15:00:00.000Z",
            "content_html": "<p><img data-src=\"https://pic.imgdb.cn/item/6600519a9f345e8d030af8c2.png\" alt=\"\"></p>\n<p>在自己画板子的时候，第一版板子，自己并没有注意到一个问题，就是这个电源的母端接口，也就是 U2 那个部分，自己设计的时候，想让焊盘弄得大一些，让电流能够更好地通过，但是自己忽略了一个问题，就是这个焊盘太大了，导致负极的焊盘和正极的那个电源插口连接上了，导致短路。</p>\n<p>真是个低级的问题，但是自己还是犯了，很抽象。</p>\n<p>幸亏自己是通过电压表测量了一下，没有直接接到电源上，否则，不知道会出现什么问题。可能直接就炸了吧。</p>\n<p>还有，自己得学会开窗得操作，根据百度，对于 PCB 开窗的解释如下：</p>\n<p>阻焊覆盖，就是<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY2ZhbnMuY29tL3YvdGFnLzgyLw==\"> PCB</span> 上的导线都是盖油的，可以防止短路，对器件造成伤害，其实就是自己平时嘉立创打板之后，</p>\n<p>所谓开窗就是去掉导线上的油漆层，让导线裸露可以上锡。</p>\n<p>开窗还有一个很常见功能，就是后期烫锡增加铜箔厚度，方便过大<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY2ZhbnMuY29tL3RhZ3MvJUU3JTk0JUI1JUU2JUI1JTgxLw==\">电流</span>，散热，这在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaHFjaGlwLmNvbS9hcHAuaHRtbA==\">电源</span>板和<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMuZWxlY2ZhbnMuY29tL3podXRpX2RpYW5qaV8xLmh0bWw=\">电机控制</span>板中比较常见。</p>\n<p>然后，明白一点，就是在自己直接用封装进行 PCB 绘制的时候，网络一定要统一，就是该是 GND 的，可以在</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/660059a99f345e8d033c3631.png\" alt=\"\"></p>\n<p>如右图所示，网络是可以进行修改的，因为我们并没有进行原理图的绘制，所以，我们本应该是 GND 的网络，会变成未知的网络格式，比如 s24820, 这个时候，我们铺铜的时候，也会发现，其显示是否保存成为一个孤岛，这个也就间接表示，我们的网络其实建立的不对。</p>\n<p>然后自己的程序，明天接着进行调试。</p>\n<p>主手部分的那个 PCB 板子，手柄处，进行了测量，还是存在 a,b 处存在短接的问题，这个问题仍然没有解决，这可能也是主控板的串口，通过 232 转 ttl，并没有输出数据的原因。</p>\n<p>明天的事情，我们明天再聊。</p>\n<p>卧槽了，太离谱了，他竟然又好用了。</p>\n<p>然后现在得进度就是我们需要把 PCB 板子重新画一边，因为刚才的原因嘛，导致电池的正极和负极是导通的状态，这个肯定是不行的。</p>\n<p>然后根据昨天的经验，我们可以通过把网络进行修改，然后使得自己 PCB 板子好用。</p>\n<p>最后，记得开窗，就是把阻焊覆盖这层给去掉，让其散热均匀。</p>\n<p>然后其实这一版 PCB 改完之后，我们其实可以考虑，把舵机的信号线加上了，因为主手的程序可以出来了，所以我们也可以考虑把主手的信号线加上了。</p>\n<p>关于电子舱的设计部分，全由我自己全全进行设计</p>\n<p>目前有问题的就是水下摄像头的部分，首先是摄像头和树莓派相连，然后树莓派通过网线和电力载波相连，电力载波通过 a 和 b 线将信号传输到水上，水上也有一个电力载波模块，将电力载波模块通过网线和电脑相连，实现实时图像的传输。</p>\n<p>关于供电部分，树莓派需要进行供电，电力载波也需要进行供电。树莓派的供电，可以使用 typec 口进行供电，所以考虑怎么引出来一个 usb 口，从而给树莓派供电。</p>\n",
            "tags": [
                "pcb"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E5%8D%95%E7%89%87%E6%9C%BA%E4%B9%8B%E9%97%B4%E4%B8%B2%E5%8F%A3%E6%B2%9F%E9%80%9A/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E5%8D%95%E7%89%87%E6%9C%BA%E4%B9%8B%E9%97%B4%E4%B8%B2%E5%8F%A3%E6%B2%9F%E9%80%9A/",
            "title": "水上和水下双单片机串口沟通",
            "date_published": "2024-03-24T07:10:00.000Z",
            "content_html": "<p>由于项目的需要，需要一个水上 stm32 单片机与水下的电子仓里面的 stm32 进行通讯。</p>\n<p>我的思路是这样的，先不考虑距离传输，直接采用串口进行传输。</p>\n<p>然后我的思路是，采用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>t</mi><mi>m</mi><mn>32</mn><mi>c</mi><mi>u</mi><mi>b</mi><mi>e</mi><mi>m</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">stm32cubemx</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">m</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">x</span></span></span></span> 对串口进行配置，因为是全双工的，所以我想法是利用串口 ttl 模块</p>\n<p>通过查阅资料，一般的串口通讯 ttl 能传播的距离为 10m 左右，对于水下机器人的传播距离显然不适用，所以之后我们会采用 485 模块，通过 485 模块，将水下机器人的传播距离增大至 1km.</p>\n<p>之前测试的时候，我是想通过 ttl 模块，直接对单片机发送 16 进制的数据，测试 hal 库的中断接收好不好用，但是在测试的过程中，我发现，通过 ttl 模块对单片机发送的数据和在 hal 里面，调用发送中断函数，其发送的 16 进制的数据，并不一样，在这个地方。我卡了好久，</p>\n<p>现在考虑怎么把控制速度和舵机的进行融合，我们可以这样。</p>\n<p>在接受中断里面，通过接收中断，把舵机的信号接收，然后通过判断其正确之后，我们将其和单片机采集的 ADC 值进行融合，然后发送数据包，通过 485 发送给水下单片机，从而操作其工作。</p>\n",
            "tags": [
                "水下机器人"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/No%20targer%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "url": "https://bangdexuanyuan.github.io/stm32/No%20targer%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "title": "关于keil中出现No target connnect问题的解决",
            "date_published": "2024-03-23T07:43:12.000Z",
            "content_html": "<h4 id=\"问题描述\"><a class=\"markdownIt-Anchor\" href=\"#问题描述\">#</a> 问题描述：</h4>\n<ul>\n<li>IDE: Keil5</li>\n<li>仿真器：ST-LINK/V2 (使用 SWJ 调试)</li>\n<li>出现问题：烧录程序时，出现 No target connected 的提示，具体如下图所示：</li>\n</ul>\n<p><img data-src=\"https://img2020.cnblogs.com/blog/1936876/202011/1936876-20201105204801926-505140701.png\" alt=\"img\"><img data-src=\"https://img2020.cnblogs.com/blog/1936876/202011/1936876-20201105204916335-1440071308.png\" alt=\"img\"></p>\n<h2 id=\"情况swj功能在代码中被关闭了\"><a class=\"markdownIt-Anchor\" href=\"#情况swj功能在代码中被关闭了\">#</a> 情况：SWJ 功能在代码中被关闭了</h2>\n<p>这种情况的特点往往是：之前烧录都好好的，某次烧录后突然就不行。<strong>并且当你一直按着开发板的 reset 键时，你会发现又能识别设备了</strong>（根据这个现象，网上有给出先按住 reset 键，在点烧录按钮后立刻松开 reset 的笨办法，这个方法看手速和人品，有概率解决）。<img data-src=\"https://img2020.cnblogs.com/blog/1936876/202011/1936876-20201105215825006-2077899545.png\" alt=\"img\"></p>\n<p><strong>出现这种情况的原因是，你烧录的代码里把芯片的 SWJ 调试功能给屏蔽了</strong>。这部分的代码在<strong> stm32f1xx_hal_msp.c</strong> 这个文件的 **HAL_MspInit ()<strong> 函数里，<br>\n如图：正是</strong>__HAL_AFIO_REMAP_SWJ_DISABLE ()** 这个函数把 SWJ 调试功能屏蔽了，所以你连接 swj 没反应。<br>\n<img data-src=\"https://img2020.cnblogs.com/blog/1936876/202011/1936876-20201105221408760-1793201712.png\" alt=\"img\"></p>\n<p>解决办法是：把这句代码删了，编译后用上面的笨办法烧录进去，以后只点烧录按钮即可！（如果是 JTAG 调试，道理类似）</p>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/under%20water%20robot/%E4%B8%B2%E5%8F%A3%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/",
            "url": "https://bangdexuanyuan.github.io/under%20water%20robot/%E4%B8%B2%E5%8F%A3%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/",
            "title": "STM32串口传输数据",
            "date_published": "2024-03-21T10:30:00.000Z",
            "content_html": "<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>T</mi><mi>M</mi><mn>32</mn><mi>C</mi><mi>U</mi><mi>B</mi><mi>E</mi><mi>M</mi><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">STM32CUBEMX</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> 利用串口传输数据</p>\n<p>1. 串口的发送与接收</p>\n<ul>\n<li>\n<p>HAL_UART_Transmit (); 串口发送数据，使用超时管理机制</p>\n</li>\n<li>\n<p>HAL_UART_Receive (); 串口接收数据，使用超时管理机制</p>\n</li>\n<li>\n<p>HAL_UART_Transmit_IT (); 串口中断模式发送</p>\n</li>\n<li>\n<p>HAL_UART_Receive_IT (); 串口中断模式接收</p>\n</li>\n<li>\n<p>HAL_UART_Transmit_DMA (); 串口 DMA 模式发送</p>\n</li>\n<li>\n<p>HAL_UART_Transmit_DMA (); 串口 DMA 模式接收</p>\n</li>\n</ul>\n<pre><code class=\"language-c++\">HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)\n\n</code></pre>\n<p>功能：<strong>串口</strong>发送指定长度的数据。如果超时没发送完成，则不再发送，返回超时标志（HAL_TIMEOUT）。</p>\n<pre><code>UART_HandleTypeDef*huart 例如huart1就是其中一个别名\n</code></pre>\n</li>\n</ul>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/study/hello-world/",
            "url": "https://bangdexuanyuan.github.io/study/hello-world/",
            "title": "英语论文学习",
            "date_published": "2024-03-13T10:30:00.000Z",
            "content_html": "<p>英语论文写作的时候，一般由以下的结构组成：</p>\n<ul>\n<li><strong>title,author,abstract,keywords</strong></li>\n</ul>\n<p>Descriptive (说明性的) information that lets readers search for an article.</p>\n<ul>\n<li><strong>Information</strong></li>\n</ul>\n<p>What is the context for this project?</p>\n<p>How does it fit in with other research on the topic?</p>\n<p>What is the research question?</p>\n<p>总结：以上说的是 WHY 部分</p>\n<ul>\n<li><strong>Methods</strong></li>\n</ul>\n<p>What did the author do to answer the research question?</p>\n<p>总结：以上部分说的是 HOW 部分</p>\n<ul>\n<li><strong>Results</strong></li>\n</ul>\n<p>What was the answer to the question?</p>\n<p>This is often shown in tables and figures.</p>\n<p>总结：以上部分说的是 WHAT</p>\n<ul>\n<li><strong>Discussion/Conclusion</strong></li>\n</ul>\n<p>What is the significance of this project?</p>\n<p>How does it fit in with what else is known about the topic?</p>\n<p>总结：以上部分说的是 SO WHAT 部分</p>\n<ul>\n<li><strong>References</strong>（参考文献部分）</li>\n</ul>\n<p><strong>Features of Academic English</strong></p>\n<ul>\n<li>it uses formal academic language and avoids colloqualisms (n. 口语)</li>\n<li>it avoid  等待补坑</li>\n</ul>\n<p><strong>Concrete example</strong> (专业英语风格的例子)</p>\n<ul>\n<li>\n<p>No idiomatic (习语)/colloquial (口语)/slang (俚语)    kid/boss/staff</p>\n</li>\n<li>\n<p>No phrasal verbs 没有动词短语     take up/get rid of/look into</p>\n</li>\n<li>\n<p>No personal pronouns 没有人称代词       i/me/you/your</p>\n</li>\n<li>\n<p>No contractions  (没有使用缩略形式)     It’ll / It’s</p>\n</li>\n<li>\n<p>No questions (不使用问题)  So why did the project fail?</p>\n</li>\n<li>\n<p>No emotional adverbs（不使用情绪化副词）  surprisingly/unfortunately</p>\n</li>\n<li>\n<p>No vague language (不适用含糊不清的语言)     and so on /etc</p>\n</li>\n<li>\n<p>No bullet points (不使用要点符号)   比如最前面的那个小黑点</p>\n</li>\n<li>\n<p>No reputation（不要重复）constant repeating same words (exclude key words) 关键词除外</p>\n</li>\n<li>\n<p>No basic language</p>\n</li>\n</ul>\n<p>like 换成 for example</p>\n<p>things 换成 factor</p>\n<p>lots of 换成 significant amount</p>\n<p>get 换成 obtain</p>\n<p>big 替换为 large</p>\n<p>look at examine 换成 examine</p>\n<ul>\n<li>YES passive stucture  we analyse 换成 the data is</li>\n<li>YES accurate vocabulary   law-rule-regulation</li>\n<li>YES precise figures/facts      a few hours 换成 x hours     5 years ago 换成 in   2015</li>\n<li>YES caution/tentative voice (谨慎 / 试探性的声音)  seem/appear/could/may</li>\n</ul>\n<p><strong>Essentials (n. 要点) of an Abstract</strong></p>\n<ul>\n<li>Research of background</li>\n</ul>\n<p>Why is the research important?Why would a reader be interested in the research?</p>\n<ul>\n<li>Existing problem</li>\n</ul>\n<p>(What problem does the research attempt to solve?What is the purpose or the scope of the project?)</p>\n<ul>\n<li>Methods employed (这里的 employed 应该是应用的意思)</li>\n</ul>\n<p>What are the scientific  approaches used in the study?</p>\n<ul>\n<li>Results or findings</li>\n</ul>\n<p>How do the research data indicate the results of the project?</p>\n<p>研究数据如何表明项目的结果？</p>\n<ul>\n<li>Conclusions from the research</li>\n</ul>\n<p>What can we conclude from the research ?What changes should be implemented as a result of the works?</p>\n<p>我们可以从研究中得出什么结论？工程结束后，应实施哪些更改？</p>\n<p>考试专用：</p>\n<p>一些英语论文中专业的用法：</p>\n<ul>\n<li>\n<p>systematically review     系统综述</p>\n</li>\n<li>\n<p>reach a mature stage     达到成熟阶段</p>\n</li>\n<li>\n<p>aim /attempt/intend to  目的 / 企图 / 打算</p>\n</li>\n<li>\n<p>assess/estimate the efficacy of   评估 / 估计… 的功效</p>\n</li>\n<li>\n<p>investigate (调查)/explore the relationship (探索关系)/interaction (相互影响) between …and…</p>\n</li>\n<li>\n<p>the primary (主要的，首要的）</p>\n</li>\n<li>\n<p>proposed（提出了）…outperform（胜过）…on</p>\n</li>\n<li>\n<p>…allow for a conclusive interpretation (总结性的解释)</p>\n</li>\n<li>\n<p>we introduce the notion (概念)/framework (框架，结构)  of</p>\n</li>\n<li>\n<p>a major area of interest within the field of       … 的主要兴趣领域</p>\n</li>\n</ul>\n",
            "tags": [
                "英语"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E6%97%A0%E7%BA%BF%E9%80%9A%E8%AE%AF%E4%B8%8B%E8%BD%BD%E5%99%A8/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E6%97%A0%E7%BA%BF%E9%80%9A%E8%AE%AF%E4%B8%8B%E8%BD%BD%E5%99%A8/",
            "title": "无线下载器",
            "date_published": "2024-03-10T11:40:00.000Z",
            "content_html": "<p>无线通讯：</p>\n<p>无线空中传输速率，指的是无线模块在空中传输的频率。</p>\n<p>2M：速度最快，此时调试器的性能最大，最快</p>\n<p>1M：速度会减慢，但是减慢的速度并不多，可以稍微增加一点距离，但是增加的不多。</p>\n<p>250K：距离增加的非常多，但是调试器速度下降也比较多。建议远距离的可以使用。</p>\n<p>无限地址的设置：</p>\n<p>内部无线模块的地址，接收端和发送端的地址必须一样。</p>\n<p><strong>唯一使用的注意事项：</strong></p>\n<p>在 keil 中，我们点击魔术棒按钮，然后在 Debug 这个界面里面，在右侧界面，把 stlink 的选项设置为 CMSIS-DAP-Debugger。</p>\n<p>之后点击 settings 按钮，通过观察右侧的 SW Device 看看对于单片机的类型，是否进行了识别。</p>\n<p>然后把 CMSIS-DAP-JTAG/SW Adapter 这个选项修改成第二行。</p>\n<p>并把端口的类型改成 SW 类型。</p>\n<p>**tips：** 使用的时候，我们接收端直接通过 USB 与电脑相连，另一个接收端，通过 SW，采用杜邦线和目标单片机进行相连。</p>\n<p>需要注意的是，我们接收端的供电采用充电宝或者自己画板子的时候，可以加一个供电的 USB 口。</p>\n<p>另外，自己于 2024.3.10 日调试的时候，因为单片机的问题，也曾出现过，检测不到单片机的问题。</p>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/PWM/",
            "url": "https://bangdexuanyuan.github.io/stm32/PWM/",
            "title": "",
            "date_published": "2023-12-18T14:13:26.699Z",
            "content_html": "<p>PWM 参数计算</p>\n<p>时基单元：</p>\n<p><img data-src=\"\" alt=\"\"></p>\n<p>![Snipaste_2023-12-18_21-35-40](C:\\all study document\\Microcontroller study\\32\\ 图片笔记 \\Snipaste_2023-12-18_21-35-40.png)</p>\n<p>跟 Keil51 一样，先进行预分频。</p>\n<p>自动重装器：设置一个值 ARR，每次计数从 0 开始，计数到 ARR 后清零，计数 ARR+1 次</p>\n<p>计数器 cnt：后根据内部时钟进行计数，每次和 CCR 捕获比较器进行比较；当 CNT&lt;CCR 时，电平置为有效电平；同理，当 CNT&gt;=CCR 时，置为无效电平，即为零；之后根据占空比进行电压的输出。</p>\n<p>keil 中代码的讲述</p>\n<pre><code>void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1);\nvoid TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2);\nvoid TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3);\nvoid TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4);\n</code></pre>\n<p>这个函数用来改变通道的占空比</p>\n<pre><code>void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);\nvoid TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);\nvoid TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);\nvoid TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);\n</code></pre>\n<p>这个是用结构体来初始化输出</p>\n<hr>\n<p>一。舵机不听指挥乱动</p>\n<p>没有与单片机共地</p>\n<p>舵机有三条线，分别是正负极和信号线 (用来输入 PWM 信号)，因为舵机所需要的驱动电压比较大，一般在 6v 往上了，一般的单片机供电无法驱动舵机，就需要单独的外接电源供电，这时注意舵机地线不仅要和外接电源负极相连，还要与单片机共地，不然 PWM 信号输入后舵机会不听使唤乱动，因为 PWM 信号由单片机输入，舵机与单片机没有供地，舵机就没有参考电平，就会乱转。</p>\n<p>PWM 需要和单片机共地，事实确实是这样</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%802/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%802/",
            "title": "",
            "date_published": "2023-10-04T10:57:34.951Z",
            "content_html": "<p>电路基础</p>\n<ul>\n<li>理想电压源阻抗为零，原因为：</li>\n</ul>\n<p>理想电压源 无论有多少电流流过都不会改变两端的电势差 ，所以内阻理想为零</p>\n<ul>\n<li>理想电流源阻抗为正无穷，原因如下：</li>\n</ul>\n<p><img data-src=\"https://pic.imgdb.cn/item/651d2bb1c458853aef9aa5d4.jpg\" alt=\"\"></p>\n<p>而理想化就是让他们两个的效率达到 100%<br>\n 那么对于电流源，效率最大就是让电流全流过工作电阻，即负载电阻 R，那么仅当内阻 Ro 为无穷大时能满足，此时为理想电流源。<br>\n同理，对于电压源，效率最大是把电压全加载负载电阻 R 两端，那么仅当内阻 Ro 为 0 时，Ro 不能分到电压，电压全分给 R，此时为理想电压源。</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/",
            "title": "",
            "date_published": "2023-09-14T08:25:48.744Z",
            "content_html": "<p>电路基础</p>\n<h5 id=\"明白什么是参考方向\"><a class=\"markdownIt-Anchor\" href=\"#明白什么是参考方向\">#</a> 明白什么是参考方向</h5>\n<p>首先，对于一个电路，一开始拿到手，我们是并不知道这个电路的电流和电压方向，那么就需要我们首先假定，假定电流一个流向，假定电压一个方向，也就是设定了一个参考方向</p>\n<p>那么，如果我们电流算出来了一个数，比如<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>I</mi><mi>A</mi></msub><mo>=</mo><mo>−</mo><mn>0.2</mn><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">I_A=-0.2A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">A</span></span></span></span>，就说明这个电流的实际方向，与参考方向是相反的，电压同理。那么很自然就会想到，电压电流，两个对象，一共就有 2*2 中组合方案，有参考方向相同的，就有参考方向相反的。于是我们引入关联与非关联，我们称电流的参考方向与电压的参考方向相同的，叫做关联，反之，称之为非关联。</p>\n<p>如果电压与电流关联，那么我们可</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/life/%E7%81%AB%E8%BD%A6%E9%A9%B6%E5%90%91%E4%BA%91%E5%A4%96%EF%BC%8C%E6%A2%A6%E5%AE%89%E9%AD%82%E4%BA%8E%E4%B9%9D%E9%9C%84/",
            "url": "https://bangdexuanyuan.github.io/life/%E7%81%AB%E8%BD%A6%E9%A9%B6%E5%90%91%E4%BA%91%E5%A4%96%EF%BC%8C%E6%A2%A6%E5%AE%89%E9%AD%82%E4%BA%8E%E4%B9%9D%E9%9C%84/",
            "title": "火车驶向云外 梦安魂于九霄",
            "date_published": "2023-09-13T02:39:00.000Z",
            "content_html": "<p>我那些残梦，灵异九霄。徒忙漫奋斗，满目沧愁。</p>\n<p>在滑翔之后，完美坠落。在四维宇宙，眩目遨游。</p>\n<p>我那些烂曲，流窜九州。云游魂飞奏，音愤符吼。</p>\n<p>在宿命身后，不停挥手。视死如归仇，毫无保留。</p>\n<p>黑色的不是夜晚，是漫长的孤单。看脚下一片黑暗，望头顶星光璀璨。</p>\n<p>叹世万物皆可盼，唯真爱最短暂。失去的永不复返，世守恒而今倍还。</p>\n<p>摇旗呐喊的热情，携光阴渐远去。人世间悲喜烂剧，昼夜轮播不停。</p>\n<p>纷飞的滥情男女，情仇爱恨别离。一代人终将老去，但总有人正年轻。</p>\n",
            "tags": [
                "音乐"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/Tim%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AD%A6%E4%B9%A0/",
            "url": "https://bangdexuanyuan.github.io/stm32/Tim%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AD%A6%E4%B9%A0/",
            "title": "",
            "date_published": "2023-09-06T14:18:20.175Z",
            "content_html": "<p>Tim 定时器学习</p>\n<p>定时器可以对输入的时钟进行计数，并在计数达到设定值的时候触发中断。当这个计数器的输入是一个准确可靠的基准时钟时，那它在对这个基准时钟进行计数的过程，实际上就是计时的过程</p>\n<p>16 位计数器、预分频器、自动重装寄存器的时基单元，在 72MHz 计数时钟下可以实现最大 59.65s 的定时。</p>\n<p>这里的计数器其实就是用来执行计数定时的一个寄存器，每来一个时钟，计数器加 1</p>\n<p>预分频器，可以对计数器的时钟进行分频，让这个计数更加灵活。</p>\n<p>自动重装寄存器就是计数的目标值，就是我想到计多少个时钟申请中断。</p>\n<p>这些寄存器构成了定时器最核心的部分，我们把这一块电路，成为时基单元。</p>\n<p>那这个时基单元里面的计数器，预分频器，自动重装寄存器都是 16 位。</p>\n<p>2 的 16 次方时 65536，也就是如果预分频器设置最大，自动重装也设置最大</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>编号</th>\n<th>总线</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>高级定时器</td>\n<td>TIM1、TIM8</td>\n<td>APB2</td>\n<td>拥有通用定时器全部功能，并额外具有重复计数器、死区生成、互补输出、刹车输入等功能</td>\n</tr>\n<tr>\n<td>通用定时器</td>\n<td>TIM2、TIM3、TIM4、TIM5</td>\n<td>APB1</td>\n<td>拥有基本定时器全部功能，并额外具有内外时钟源选择、输入捕获、输出比较、编码器接口、主从触发模式等功能</td>\n</tr>\n<tr>\n<td>基本定时器</td>\n<td>TIM6、TIM7</td>\n<td>APB1</td>\n<td>拥有定时中断、主模式触发 DAC 的功能</td>\n</tr>\n</tbody>\n</table>\n<p>STM32F103C8T6 定时器资源：TIM1、TIM2、TIM3、TIM4</p>\n<p>并额外具有重复计数器、死区生成、互补输出、刹车输入等功能，</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/EXTI%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/",
            "url": "https://bangdexuanyuan.github.io/stm32/EXTI%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/",
            "title": "EXTI外部中断",
            "date_published": "2023-09-02T16:21:00.000Z",
            "content_html": "<h4 id=\"exti外部中断\"><a class=\"markdownIt-Anchor\" href=\"#exti外部中断\">#</a> EXTI 外部中断</h4>\n<p>NVIC 的名字叫做，嵌套中断向量控制器</p>\n<p>NVIC 的出现，就是为了当 CPU 的秘书，如果我们把所有的中断都接在 CPU 上，CPU 对应位置就得进行适配，设计上就很麻烦。并且如果很多中断进行申请，造成了拥堵，CPU 也会很难搞，因为 CPU 还是主要负责进行运算的，中断分配的任务就放到别的地方吧。</p>\n<p>NVIC 有很多个输入口，你有多少个中断都可以接过来</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f35828661c6c8e54dee9d2.png\" alt=\"\"></p>\n<p>NVIC 只有一个输出口，直接接到 CPU 上</p>\n<p>stm32 有 68 个可屏蔽中断通道，包含 EXTI、TIM、ADC、USART、SPI、I2C、RTC 等多个外设使用 NVIC 统一管理中断，每个中断通道都拥有 16 个可编程的优先等级，可对优先级进行分组，进一步设置抢占优先级和响应优先级</p>\n<p>NVIC 的中断优先级由优先级寄存器的 4 位（0~15）决定，这 4 位可以进行切分，分为高 n 位的抢占优先级和低 4-n 位的响应优先级，记住，值越小的优先级越高，比如 0 就是最高的优先级</p>\n<p>抢占优先级高的可以中断嵌套，响应优先级高的可以优先排队，<strong>抢占优先级和响应优先级均相同的按中断号排队</strong></p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f35a2d661c6c8e54df3a92.png\" alt=\"\"></p>\n<p>举个例子，就好像是有个医生在给一个人进行看病，抢占优先级高的可以直接把看病的那个人挤开，让自己去看。然后响应优先级就好像是有个人排队，他就应该排在第一位，大概就是这个意思。</p>\n<hr>\n<p>综上所述，现在我们可以这么理解，NVIC 其实可以理解成为一个叫号系统，而 CPU 就是那个医生，下面我们来介绍第一位病人，EXTI 外部中断</p>\n<hr>\n<p>EXTI（Extern Interrupt）外部中断</p>\n<p>EXTI 可以监测指定 GPIO 口的电平信号，当其指定的 GPIO 口产生电平变化时，EXTI 将立即向 NVIC 发出中断申请，经过 NVIC 裁决后即可中断 CPU 主程序，使 CPU 执行 EXTI 对应的中断程序</p>\n<p>支持的触发方式：上升沿 / 下降沿 / 双边沿 / 软件触发</p>\n<p><strong>解释一下</strong>：这里的上升沿是指由低电平上升到高电平，下降沿是由高电平降低到低电平，而双边沿就是指上下都计数</p>\n<p>支持的 GPIO 口：所有 GPIO 口，但相同的 Pin 不能同时触发中断</p>\n<p>通道数：16 个 GPIO_Pin，外加 PVD 输出、RTC 闹钟、USB 唤醒、以太网唤醒</p>\n<p>触发响应方式：中断响应 / 事件响应</p>\n<h4 id=\"首先介绍一下exti的基本结构\"><a class=\"markdownIt-Anchor\" href=\"#首先介绍一下exti的基本结构\">#</a> 首先介绍一下 EXTI 的基本结构</h4>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f355a9661c6c8e54de9017.png\" alt=\"\"></p>\n<p>这里的每个 GPIO 都有 16 个引脚，显然对于只有 16 个输入口的 EXT 是远远超出的，所以我们中间加一个 AFIO 中断引脚选择器，你可以理解为 GPIOA，B，C 共用一个 Pin 引脚口，那么就可以解释了，为什么相同的引脚不能同时触发中断，因为这样，你根本不知道是哪个 GPIO 口发生了中断。</p>\n<p>经过 EXTI 后，分为了两种输出，一种直接接到 NVIC，一种接入其他外设。</p>\n<p>根据常理，本来 20 种的中断输入应该有 20 种的中断输出，但是可能是 STM 公司觉得有点占用 NVIC 的通道，于是，将 EXTI5~9， EXTI10~15 分别合并为了一种通道， 也就是说 EXTI5~9 会触发同一种中断函数，同理 10 到 15 也是</p>\n<p>对于合并通道的中断函数，还需根据标志位进一步确定这个是由哪个中断函数进来的</p>\n<h4 id=\"afio复用io口\"><a class=\"markdownIt-Anchor\" href=\"#afio复用io口\">#</a> AFIO 复用 IO 口</h4>\n<p>AFIO 主要用于引脚复用功能的选择和重定义，在 STM32 中，AFIO 主要完成两个任务：复用功能引脚重映射、中断引脚选择。</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f360b1661c6c8e54e160f5.png\" alt=\"\"></p>\n<p>这就是 AFIO 的作用</p>\n<h4 id=\"exti外部中断的框图\"><a class=\"markdownIt-Anchor\" href=\"#exti外部中断的框图\">#</a> EXTI 外部中断的框图</h4>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f4a337661c6c8e541d2cc6.png\" alt=\"\"></p>\n<p>记住其中带弧度的是或门，只要有一个输入端是 1，那最终输出端的数值就是 1</p>\n<p>平的是与门，记住电路的符号就行</p>\n<p>这也就能解释为什么软件的外部中断，也可以进行中断</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f4a5f3661c6c8e541d9481.png\" alt=\"\"></p>\n<p>由于自身设计的微妙，我们可以做到 A，B 两个端口输出的波的相位差 90 度，可以通过判断 A，B 端口的高低电平，从而确定此时是正转还是反转。</p>\n<p>分析 A 端，当左端的端口并未进行接通时，由于 VCC 连接 R1，相当于进行电位的上拉，从此 A 点的电位为高电位。而当左端的端口接上时 A 端相当于直接接 GND。这里的 R3 起到了限流电阻的作用，防止电流过大。</p>\n<p>这里的 C1 起到了<strong>滤波电容</strong>的作用，防止输出的电位过于抖动</p>\n<p>滤波电容这块，感觉还是不太会</p>\n<p>右端的电路同理</p>\n<p>程序部分</p>\n<p>首先在 Hardware 文件夹中新建 CountSensor.h 和 CountSensor.c 文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CountSensor<span class=\"token punctuation\">.</span>h文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_COUNT_SENSOR_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_COUNT_SENSOR_H</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">CountSensor_Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">uint16_t</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h4 id=\"那么如何配置外部的中断\"><a class=\"markdownIt-Anchor\" href=\"#那么如何配置外部的中断\">#</a> 那么如何配置外部的中断</h4>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f355a9661c6c8e54de9017.png\" alt=\"\"></p>\n<p>只需要把从 GPIO 到 NVIC 这一路的信号电路都打开即可</p>\n<p>第一步，配置 RCC，把我们这里涉及到的外设时钟都打开，不打开时钟，外设是无法工作的</p>\n<p>第二步，配置 GPIO 口，选择我们的端口为输入模式</p>\n<p>第三步，配置 AFIO，选择我们用的这一路 GPIO，连接到后面的 EXTI</p>\n<p>第四步，配置 EXTI，选择边沿触发模式，不如上升沿，下降沿，或者双边沿</p>\n<p>第五步，配置 NVIC，给我们这个中断一个合适的优先级别</p>\n<p>最后通过 NVIC，外部中断的信号就能进入 CPU 了，这样，CPU 才能收到中断信号来跳转到中断函数里面，执行中断程序</p>\n<p>那，这五步就是外部中断的配置流程</p>\n<p>1. 首先第一步，配置时钟 RCC</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_APB2Periph_GPIOB<span class=\"token punctuation\">,</span>ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意是 RCC_APB2 因为 GPIOB 是 APB2 的外设</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_APB2Periph_AFIO<span class=\"token punctuation\">,</span>ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当你不确定这个外设是接在哪个总线上的时候，我们可以跳转到这个函数的定义</p>\n<p>比如这个函数 RCC_APB2 这个函数，可以通过 arg 看到所有的这些外设类型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  *   This parameter can be any combination of the following values:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  * @param  NewState: new state of the specified peripheral clock.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  *   This parameter can be: ENABLE or DISABLE.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  * @retval None</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  */</span></pre></td></tr></table></figure><p><strong>接着还需要打开 EXTI 和 NVIC 的外设</strong>，但是这两个外设的时钟是一直打开的，所以不需要再次打开，</p>\n<p>NVIC 不需要开启时钟的原因是因为，NVIC 属于内核的外设，内核的外设都是不需要开启时钟的</p>\n<p>而 RCC 管的都是内核外的外设，所以管不到 NVIC</p>\n<p>第二步，配置 GPIO</p>\n<pre><code class=\"language-c++\">GPIO_InitTypeDef GPIO_InitStructure;//注释，这里的GPIO_InitStructure只是一个名称，也可以替换成为u，等等其他的名字\nGPIO_InitStructure.GPIO_Mode=GPIO_Mode_IPU;//这个输入模式，具体需要什么，需要到stm32手册中进行查询\nGPIO_InitStructure.GPIO_Pin=GPIO_Pin_14;\nGPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;\nGPIO_Init(GPIOB,&amp;GPIO_InitStructure);\n</code></pre>\n<p>接下来进行第三步，配置 AFIO，AFIO 并没有自己独立的库函数，它的对应函数在 GPIO 的文件中</p>\n<pre><code class=\"language-c++\">void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource);\n</code></pre>\n<p>然后在其中进行跳转，可以查到对应的</p>\n<pre><code class=\"language-c++\">/**\n  * @brief  Selects the GPIO pin used as EXTI Line.\n  * @param  GPIO_PortSource: selects the GPIO port to be used as source for EXTI lines.\n  *   This parameter can be GPIO_PortSourceGPIOx where x can be (A..G).\n  * @param  GPIO_PinSource: specifies the EXTI line to be configured.\n  *   This parameter can be GPIO_PinSourcex where x can be (0..15).\n  * @retval None\n  */\nvoid GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)\n&#123;\n  uint32_t tmp = 0x00;\n  /* Check the parameters */\n  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));\n  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));\n  \n  tmp = ((uint32_t)0x0F) &lt;&lt; (0x04 * (GPIO_PinSource &amp; (uint8_t)0x03));\n  AFIO-&gt;EXTICR[GPIO_PinSource &gt;&gt; 0x02] &amp;= ~tmp;\n  AFIO-&gt;EXTICR[GPIO_PinSource &gt;&gt; 0x02] |= (((uint32_t)GPIO_PortSource) &lt;&lt; (0x04 * (GPIO_PinSource &amp; (uint8_t)0x03)));\n&#125;\n</code></pre>\n<p>通过最后两行，我们可以发现，其实，这个函数就是配置 AFIO 的函数</p>\n<p>如果你想配置 PB14 号口为中断口，那么我们就可以这样写</p>\n<pre><code class=\"language-c++\">GPIO_EXTILineConfig(GPIO_PortSourceGPIOB,GPIO_PinSource14);\n</code></pre>\n<h4 id=\"第四步配置exti文件\"><a class=\"markdownIt-Anchor\" href=\"#第四步配置exti文件\">#</a> 第四步，配置 EXTI 文件</h4>\n<p>首先先来学习一下 EXTI 的基本库函数</p>\n<pre><code class=\"language-c++\">void EXTI_DeInit(void);//调用它，就可以把EXTI的配置都清除，恢复成上电默认的状态\nvoid EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct);//可以根据这个结构体里的函数配置EXTI外设，初始化EXTI主要用的就是这个函数，使用方法与GPIO_Init等同对比就行 \nvoid EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct);\nvoid EXTI_GenerateSWInterrupt(uint32_t EXTI_Line);\nFlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line);\nvoid EXTI_ClearFlag(uint32_t EXTI_Line);\nITStatus EXTI_GetITStatus(uint32_t EXTI_Line);\nvoid EXTI_ClearITPendingBit(uint32_t EXTI_Line);\n</code></pre>\n<p>代码书写</p>\n<p>我们首先肯定得初始化外设</p>\n<pre><code class=\"language-C++\">/**\n  * @brief  Initializes the EXTI peripheral according to the specified\n  *         parameters in the EXTI_InitStruct.\n  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure\n  *         that contains the configuration information for the EXTI peripheral.\n  * @retval None\n  */\nvoid EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)\n</code></pre>\n<p>然后根据提示，进行相关参数的配置</p>\n<p>在文档中查找相关词 EXTI_InitTypeDef，可以得到如下的代码</p>\n<pre><code class=\"language-c++\">\tEXTI_InitTypeDef a;\n\ta.EXTI_Line=EXTI_Line14;//这四项直接在定义完a后会直接出来\n\ta.EXTI_LineCmd=ENABLE;\n\ta.EXTI_Mode=EXTI_Mode_Interrupt;\n\ta.EXTI_Trigger=EXTI_Trigger_Falling;\n\tEXTI_Init(&amp;a);//初始化a去\n</code></pre>\n<p>在全局寻找 EXTI_Line，<strong>第一个参数</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line0</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00001</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 0 */</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line1</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00002</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 1 */</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line2</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00004</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 2 */</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line3</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00008</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 3 */</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line4</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00010</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 4 */</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line5</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00020</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 5 */</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line6</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00040</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 6 */</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line7</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00080</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 7 */</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line8</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00100</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 8 */</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line9</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00200</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 9 */</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line10</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00400</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 10 */</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line11</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00800</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 11 */</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line12</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x01000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 12 */</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line13</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x02000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 13 */</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line14</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x04000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 14 */</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line15</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x08000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 15 */</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line16</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x10000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 16 Connected to the PVD Output */</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line17</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x20000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 17 Connected to the RTC Alarm event */</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line18</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x40000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 18 Connected to the USB Device/USB OTG FS</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                                   Wakeup from suspend event */</span>                                    </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line19</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x80000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 19 Connected to the Ethernet Wakeup event */</span></span></pre></td></tr></table></figure><p><strong>第二个参数</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FunctionalState EXTI_LineCmd<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/*!&lt; Specifies the new state of the selected EXTI lines.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                         This parameter can be set either to ENABLE or DISABLE */</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>开始中断还是不开启，ENABLE还是DISABLE</pre></td></tr></table></figure><p><strong>第三个参数</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  EXTI_Mode_Interrupt <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  EXTI_Mode_Event <span class=\"token operator\">=</span> <span class=\"token number\">0x04</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>EXTIMode_TypeDef<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>是外部中断还是事件中断，这里我们采用外部中断</p>\n<p><strong>第四个参数</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  * @brief  EXTI Trigger enumeration  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  EXTI_Trigger_Rising <span class=\"token operator\">=</span> <span class=\"token number\">0x08</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  EXTI_Trigger_Falling <span class=\"token operator\">=</span> <span class=\"token number\">0x0C</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  EXTI_Trigger_Rising_Falling <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>EXTITrigger_TypeDef<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里代表的是选择上升沿触发，下降沿触发，还是上升下降沿都触发</p>\n<p>到此为止，外部中断配置完成，第四步结束</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>EXTI_InitTypeDef a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ta<span class=\"token punctuation\">.</span>EXTI_Line<span class=\"token operator\">=</span>EXTI_Line14<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ta<span class=\"token punctuation\">.</span>EXTI_LineCmd<span class=\"token operator\">=</span>ENABLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ta<span class=\"token punctuation\">.</span>EXTI_Mode<span class=\"token operator\">=</span>EXTI_Mode_Interrupt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ta<span class=\"token punctuation\">.</span>EXTI_Trigger<span class=\"token operator\">=</span>EXTI_Trigger_Falling<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">EXTI_Init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"第五步配置nvic外设\"><a class=\"markdownIt-Anchor\" href=\"#第五步配置nvic外设\">#</a> 第五步，配置 NVIC 外设</h5>\n<p>因为 NVIC 属于 stm32 内核，所以其库函数，被分配到杂项 misc 中</p>\n<p>先学习一下 NVIC 的库函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">NVIC_PriorityGroupConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> NVIC_PriorityGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个函数用来配置中断分组的，参数是中断分组的方式</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">NVIC_Init</span><span class=\"token punctuation\">(</span>NVIC_InitTypeDef<span class=\"token operator\">*</span> NVIC_InitStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>根据 NVIC 结构体中指定的参数初始化 NVIC</p>\n<p>跳转</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NVIC_PriorityGroupConfig</pre></td></tr></table></figure><p>查到</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  * @brief  Configures the priority grouping: pre-emption priority and subpriority.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  *   This parameter can be one of the following values:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  *     @arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  *                                4 bits for subpriority</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  *     @arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  *                                3 bits for subpriority</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  *     @arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  *                                2 bits for subpriority</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  *     @arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  *                                1 bits for subpriority</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  *                                0 bits for subpriority</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  * @retval None</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">NVIC_PriorityGroupConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> NVIC_PriorityGroup<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">/* Check the parameters */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">assert_param</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_NVIC_PRIORITY_GROUP</span><span class=\"token punctuation\">(</span>NVIC_PriorityGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">/* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  SCB<span class=\"token operator\">-></span>AIRCR <span class=\"token operator\">=</span> AIRCR_VECTKEY_MASK <span class=\"token operator\">|</span> NVIC_PriorityGroup<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//pre-emption priority 代表的是抢占优先级，subpriority 代表的是相应优先级</span></pre></td></tr></table></figure><p>这里我们选择第二组，两位响应，两位抢占，稍微平均一点</p>\n<p>即配置成</p>\n<pre><code class=\"language-c++\">void NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);\n</code></pre>\n<p>然后就是经典操作了</p>\n<p>对 NVIC 的初始化</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NVIC_InitTypeDef b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tb<span class=\"token punctuation\">.</span>NVIC_IRQChannel<span class=\"token operator\">=</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tb<span class=\"token punctuation\">.</span>NVIC_IRQChannelCmd<span class=\"token operator\">=</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tb<span class=\"token punctuation\">.</span>NVIC_IRQChannelPreemptionPriority<span class=\"token operator\">=</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tb<span class=\"token punctuation\">.</span>NVIC_IRQChannelSubPriority<span class=\"token operator\">=</span>  <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">NVIC_Init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接下来就是配置参数</p>\n<p>跳转定义，全局工程文件搜索 IRQn_Type</p>\n<p>根据我们选择芯片的种类，选择对应的中断函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">STM32F10X_MD</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  ADC1_2_IRQn                 <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; ADC1 and ADC2 global Interrupt                       */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  USB_HP_CAN1_TX_IRQn         <span class=\"token operator\">=</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; USB Device High Priority or CAN1 TX Interrupts       */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  USB_LP_CAN1_RX0_IRQn        <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; USB Device Low Priority or CAN1 RX0 Interrupts       */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  CAN1_RX1_IRQn               <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; CAN1 RX1 Interrupt                                   */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  CAN1_SCE_IRQn               <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; CAN1 SCE Interrupt                                   */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  EXTI9_5_IRQn                <span class=\"token operator\">=</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; External Line[9:5] Interrupts                        */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  TIM1_BRK_IRQn               <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; TIM1 Break Interrupt                                 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  TIM1_UP_IRQn                <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; TIM1 Update Interrupt                                */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  TIM1_TRG_COM_IRQn           <span class=\"token operator\">=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; TIM1 Trigger and Commutation Interrupt               */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  TIM1_CC_IRQn                <span class=\"token operator\">=</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; TIM1 Capture Compare Interrupt                       */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  TIM2_IRQn                   <span class=\"token operator\">=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; TIM2 global Interrupt                                */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  TIM3_IRQn                   <span class=\"token operator\">=</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; TIM3 global Interrupt                                */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  TIM4_IRQn                   <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; TIM4 global Interrupt                                */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  I2C1_EV_IRQn                <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; I2C1 Event Interrupt                                 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  I2C1_ER_IRQn                <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; I2C1 Error Interrupt                                 */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  I2C2_EV_IRQn                <span class=\"token operator\">=</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; I2C2 Event Interrupt                                 */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  I2C2_ER_IRQn                <span class=\"token operator\">=</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; I2C2 Error Interrupt                                 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  SPI1_IRQn                   <span class=\"token operator\">=</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; SPI1 global Interrupt                                */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  SPI2_IRQn                   <span class=\"token operator\">=</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; SPI2 global Interrupt                                */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  USART1_IRQn                 <span class=\"token operator\">=</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; USART1 global Interrupt                              */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  USART2_IRQn                 <span class=\"token operator\">=</span> <span class=\"token number\">38</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; USART2 global Interrupt                              */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  USART3_IRQn                 <span class=\"token operator\">=</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; USART3 global Interrupt                              */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  EXTI15_10_IRQn              <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; External Line[15:10] Interrupts                      */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  RTCAlarm_IRQn               <span class=\"token operator\">=</span> <span class=\"token number\">41</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; RTC Alarm through EXTI Line Interrupt                */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  USBWakeUp_IRQn              <span class=\"token operator\">=</span> <span class=\"token number\">42</span>      <span class=\"token comment\">/*!&lt; USB Device WakeUp from suspend through EXTI Line Interrupt */</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* STM32F10X_MD */</span></span></pre></td></tr></table></figure><p>配置第一个参数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>b<span class=\"token punctuation\">.</span>NVIC_IRQChannel<span class=\"token operator\">=</span>EXTI15_10_IRQn <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>配置第二个参数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FunctionalState NVIC_IRQChannelCmd<span class=\"token punctuation\">;</span>         <span class=\"token comment\">/*!&lt; Specifies whether the IRQ channel defined in NVIC_IRQChannel</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                                   will be enabled or disabled. </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                                   This parameter can be set either to ENABLE or DISABLE */</span></pre></td></tr></table></figure><p>负责确定中断通道是使能还是失能，这里我们选择 ENABLE</p>\n<p>配置第三个参数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NVIC_IRQChannelPreemptionPriority</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这个是负责的抢占优先级</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NVIC_IRQChannelSubPriority</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    这个是负责相应优先级</pre></td></tr></table></figure><p>对于当前我们的这种情况，因为只有一种中断，所以我们采用参数可以 随便一点，只有当有很多个中断的时候，才会出现拥挤</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>b<span class=\"token punctuation\">.</span>NVIC_IRQChannelPreemptionPriority<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tb<span class=\"token punctuation\">.</span>NVIC_IRQChannelSubPriority<span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>高电平 (GPIO_PIN_SET)、低电平 (GPIO_PIN_RESET)。</p>\n<p>那么中断程序应该放在哪里呢，这就需要我们写一个中断函数</p>\n<p>在 STM32 中，中断函数的名称都是固定的，每个中断通道都对应一个中断函数</p>\n<p>中断函数的名字，我们可以参照一下启动文件，在其中找到中断函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>EXTI15_10_IRQHandler</pre></td></tr></table></figure><p>注意，这个中断函数一定要书写正确，因为如果中断函数写错了，那么程序就无法进入中断了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">EXTI15_10_IRQHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">EXTI_GetITStatus</span><span class=\"token punctuation\">(</span>EXTI_Line14<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 获取一下是哪个中断置为 1 了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token function\">EXTI_ClearITPendingBit</span><span class=\"token punctuation\">(</span>EXTI_Line14<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里需要清除一下中断，因为如果中断函数不清除的话，会一直在中断函数里面循环。如果你不清楚中断标志位，那么它就会一直申请中断。这样程序就会不断相应中断，执行中断程序，那么程序就会卡死在中断程序里面了，所以我们每次中断程序结束后，都应该清除一下标志位</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\tnum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E5%9B%BA%E4%BB%B6%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E5%9B%BA%E4%BB%B6%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "title": "stm32定时器外设时钟",
            "date_published": "2023-09-02T07:28:00.000Z",
            "content_html": "<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RCC_AHBPeriphClockCmd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> RCC_AHBPeriph<span class=\"token punctuation\">,</span> FunctionalState NewState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> RCC_APB2Periph<span class=\"token punctuation\">,</span> FunctionalState NewState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RCC_APB1PeriphClockCmd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> RCC_APB1Periph<span class=\"token punctuation\">,</span> FunctionalState NewState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>定时器函数</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210427151456665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjI5NTYz,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);</p>\n<p>NewState 参数是一个枚举类型，用于指示要使能或禁用指定的外设时钟。可选值为：ENABLE 和 DISABLE。</p>\n<p><strong>例 1-1</strong>：以下代码片段用于使能 GPIOA 和 USART1 外设的时钟：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_USART1, ENABLE);</pre></td></tr></table></figure><p>在操作外设之前，必须先使能其时钟。</p>\n<h3 id=\"2-引脚配置\"><a class=\"markdownIt-Anchor\" href=\"#2-引脚配置\">#</a> 2、引脚配置</h3>\n<p>GPIO_InitTypeDef 结构体是 STM32 固件库中提供给开发者的一个方便、易用的工具，当我们要配置一个 GPIO 引脚时，需要设置该引脚的多个参数，如引脚方向、输出类型、速度、上拉 / 下拉模式等，这些参数需要通过寄存器进行设置。而寄存器的操作比较繁琐，容易出错，因此 STM32 固件库提供了 GPIO_InitTypeDef 结构体，它封装了对 GPIO 外设寄存器的访问，使得开发者可以通过设置结构体的成员变量，来快速、简单地配置 GPIO 引脚的多个参数。</p>\n<p>先配置 GPIO_InitTypeDef 结构体；结构体的定义如下：</p>\n<p>这个是已经配置好的模式</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>typedef struct</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  uint16_t GPIO_Pin;             /*!&lt; Specifies the GPIO pins to be configured.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                      This parameter can be any value of @ref GPIO_pins_define */</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  GPIOSpeed_TypeDef GPIO_Speed;  /*!&lt; Specifies the speed for the selected pins.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                      This parameter can be a value of @ref GPIOSpeed_TypeDef */</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  GPIOMode_TypeDef GPIO_Mode;    /*!&lt; Specifies the operating mode for the selected pins.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                      This parameter can be a value of @ref GPIOMode_TypeDef */</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&#125;GPIO_InitTypeDef;</pre></td></tr></table></figure><p>GPIO_Pin 表示要配置的 GPIO 引脚，可以使用逻辑或运算符 “|” 将多个引脚组合在一起。</p>\n<p>GPIO_Mode 表示 GPIO 引脚的工作模式。</p>\n<table>\n<thead>\n<tr>\n<th>输入</th>\n<th></th>\n<th>输出</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GPIO_Mode_AIN</td>\n<td>模拟输入</td>\n<td>GPIO_Mode_Out_OD</td>\n<td>普通开漏输出</td>\n</tr>\n<tr>\n<td>GPIO_Mode_IN_FLOATING</td>\n<td>浮空输入</td>\n<td>GPIO_Mode_Out_PP</td>\n<td>普通推挽输出</td>\n</tr>\n<tr>\n<td>GPIO_Mode_IPU</td>\n<td>上拉输入</td>\n<td>GPIO_Mode_AF_OD</td>\n<td>复用推挽输出</td>\n</tr>\n<tr>\n<td>GPIO_Mode_IPD</td>\n<td>下拉输入</td>\n<td>GPIO_Mode_AF_PP</td>\n<td>复用开漏输出</td>\n</tr>\n</tbody>\n</table>\n<p>GPIO_Speed 表示 GPIO 引脚的速度，可选值为低速（GPIO_Speed_2MHz）、中速（GPIO_Speed_10MHz）或高速（GPIO_Speed_50MHz）。</p>\n<p>一般默认为普通推挽输出</p>\n<p>** 例 2-1：** 将 PA0 和 PA1 两个引脚配置为 50MHz 的推挽输出，并应用于 GPIOA 外设。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GPIO_InitTypeDef GPIO_InitStructure<span class=\"token punctuation\">;</span><span class=\"token comment\">// 这个 GPIO_InitStructure 就是一个结构体的名称，你也可以改为 u, 然后后面的名称对应都变成 u 就行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Pin <span class=\"token operator\">=</span> GPIO_Pin_0 <span class=\"token operator\">|</span> GPIO_Pin_1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Mode <span class=\"token operator\">=</span> GPIO_Mode_Out_PP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Speed <span class=\"token operator\">=</span> GPIO_Speed_50MHz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">GPIO_Init</span><span class=\"token punctuation\">(</span>GPIOA<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>GPIO_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上代码将 GPIOA 的 PA0 引脚输出低 / 高电平，即将 PA0 引脚对应的寄存器的输出位设置为 0/1。</p>\n<p>注意：在操作 GPIO 引脚之前，必须先配置其为输出模式。否则，GPIO 引脚将不能输出电平。</p>\n<p>* 注意：在很多开发板上，GPIO 输出控制 LED 等外设的亮灭，常常使用了 PNP 型晶体管或是开漏输出方式。这种方式下，当 GPIO 引脚输出低电平时，PNP 型晶体管或是开漏输出器件会通电，外设（如 LED）被点亮，而当 GPIO 引脚输出高电平时，PNP 型晶体管或是开漏输出器件不通电，外设（如 LED）被熄灭。</p>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/stm32%206-1Tim%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD/",
            "url": "https://bangdexuanyuan.github.io/stm32/stm32%206-1Tim%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD/",
            "title": "定时器学习",
            "date_published": "2023-09-02T02:32:00.000Z",
            "content_html": "<h4 id=\"stm32-6-1tim定时器中断\"><a class=\"markdownIt-Anchor\" href=\"#stm32-6-1tim定时器中断\">#</a> stm32 6-1Tim 定时器中断</h4>\n<p>stm32 拥有 16 位计数器，预分频器，自动重装寄存器的实际单元。如果预分频器和自动重装寄存器都设置最大，2 的 16 次方，因为 2 的 16 次方为 66536</p>\n<p>在 72MHz 计数时钟下可以实现最大 59.65s 的定时</p>\n<p>这部分之后再听一遍</p>\n<p>不仅具有基本的定时中断功能，而且还包括内外时钟源的选择，输入捕获，输出比较，编码器接口，主从触发模式等多种功能</p>\n<p>![](C:\\all study document\\Microcontroller study\\32\\ 图片笔记 \\Snipaste_2023-08-24_22-05-54.png)</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/650fb062c458853aef4a4114.png\" alt=\"\"></p>\n<p>时基单元：由自动重装寄存器，预分频器与 CNT 计数器组成，预分频器之前，连接的就是基准计数时钟的输入，最终来到了控制器的这个位置，由于基本定时器只能选择内部时钟，所以你可以直接认为这根线直接连接到了输入端这里，也就是内部时钟 CK_INT，内部时钟的来源是 RCC 的 TIMxCLK，这里的频率一般是内部系统的主频 72MHz</p>\n<p>我们看时基单元，它可以首先对输入进来的 72MHz 计数时钟进行预分频，比如这个寄存器写 0，就是不分频，或者说是 1 分频，这个时候的输出频率等于输入频率等于 72MHz，如果预分频器写 1，就是 2 分频，那么输出的频率就为 36MHz，如果写 2，就是三分频，输出频率等于 72/3 等于 24MHz，以此类推</p>\n<p>实际的分频系数等于预分频器的系数加一，这个预分频器是 16 位的，所以最大值可以写 65535，也就是最大 65536 分频的，这就是预分频器，就是对输入的频率提前进行预分频的操作</p>\n<p>然后就是计数器，就是对预分频后的计数时钟进行计数，计数时钟每来一个上升沿，计数时钟的值就加一，这个计数器也是 16 位的，可以从 0 计数到 65535；如果再加的话，计数器就会回到零，重新进行计数，所以计数器的值在运行过程中会不断进行自增运行，当自增达到目标值的时候，产生中断，就完成了定时的任务。</p>\n<p>所以现在还需要一个存储目标值函数的计数器，就是自动重装载寄存器，自动重装载计数器也是 16 位的，它存储的就是我们的计数目标，在运行的过程中，计数值不断增加，自动重装值是固定的目标，当计数值等于重装计数器的值的时候，也就是即使时间到了，那它就会产生一个中断信号，并且清零计数器</p>\n<p>在这里有一个向上的箭头，表示这里会产生一个中断信号，像这种计数值等于重装值产生的中断，我们一般称之为更新中断，这个更新中断之后，就会通往 NVIC，我们再配置好 NVIC 的定时器通道，那定时器的更新中断就能得到 CPU 的响应了，这里向下的箭头，代表这里会产生一个事件，这里对应的事件，就叫做更新事件</p>\n",
            "tags": [
                "单片机"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/life/hello-world/",
            "url": "https://bangdexuanyuan.github.io/life/hello-world/",
            "title": "hello world",
            "date_published": "2023-09-02T02:00:00.000Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "哈尔滨生活"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/life/%E9%9D%92%E5%B2%9B%E4%B9%8B%E6%97%85/",
            "url": "https://bangdexuanyuan.github.io/life/%E9%9D%92%E5%B2%9B%E4%B9%8B%E6%97%85/",
            "title": "青岛之旅",
            "date_published": "2023-09-02T02:00:00.000Z",
            "content_html": "<p>2023 年 8 月 7~9，和 zjx 和 lh 去了趟从没有去过得青岛，真的，碰见高中同学，虽然长时间没有联系，还是原来的感觉。</p>\n<p>去了海军博物馆</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f2d252661c6c8e54b43cb9.jpg\" alt=\"\"></p>\n<p>去了小麦岛，去了鹿儿岛</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f2d24a661c6c8e54b43172.jpg\" alt=\"\"></p>\n<p>去了栈桥，人是真的多嘞</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f2d2fd661c6c8e54b4e2da.jpg\" alt=\"\"></p>\n<p>还吃了好吃的鲅鱼饺子，墨鱼丸，啤酒成为那段时间的专属</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f2d316661c6c8e54b4ea1d.jpg\" alt=\"\"></p>\n<p>记得凌晨 3，4 点的火车硬座，还有 LOL 的 solo 的时候，zjx 的破防，这是一段短暂而小有遗憾的时光。</p>\n",
            "tags": [
                "青岛生活"
            ]
        }
    ]
}