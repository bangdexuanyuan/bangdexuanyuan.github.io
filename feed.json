{
    "version": "https://jsonfeed.org/version/1",
    "title": "null",
    "description": "欢迎大家来到邦的轩辕的小屋，这里会分享everything",
    "home_page_url": "https://bangdexuanyuan.github.io",
    "items": [
        {
            "id": "https://bangdexuanyuan.github.io/diary/2024.5.27/",
            "url": "https://bangdexuanyuan.github.io/diary/2024.5.27/",
            "title": "2024.5.27随记",
            "date_published": "2024-05-27T13:54:00.000Z",
            "content_html": "<p>这首歌可以破音但不能降调，我的意思是，人生可以失败但不能退缩</p>\n",
            "tags": [
                "mind"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/study/%E6%9D%90%E6%96%99%E5%8A%9B%E5%AD%A6/",
            "url": "https://bangdexuanyuan.github.io/study/%E6%9D%90%E6%96%99%E5%8A%9B%E5%AD%A6/",
            "title": "",
            "date_published": "2024-04-08T16:10:32.484Z",
            "content_html": "<p>第三章：</p>\n<p>扭转：</p>\n<p>方向：由截面法分析出来的，内力如果沿着截面向外，那么大小就是正的。</p>\n<p>如果分析出来的内力沿着截面向内，那么大小就是负的。</p>\n<p>分析的时候使用的方法是右手定则。</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/pcb/%E5%BC%AF%E7%9F%A9%EF%BC%8C%E5%89%AA%E5%8A%9B%E4%B8%8E%E5%88%86%E5%B8%83%E8%BD%BD%E8%8D%B7%E9%9B%86%E8%8D%B7%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/",
            "url": "https://bangdexuanyuan.github.io/pcb/%E5%BC%AF%E7%9F%A9%EF%BC%8C%E5%89%AA%E5%8A%9B%E4%B8%8E%E5%88%86%E5%B8%83%E8%BD%BD%E8%8D%B7%E9%9B%86%E8%8D%B7%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/",
            "title": "",
            "date_published": "2024-03-27T17:08:05.166Z",
            "content_html": "<p>弯矩，剪力与分布载荷集荷之间的关系及其应用</p>\n<p>分布载荷集度$q(x)$向上为正，向下为负</p>\n<p>$dF_s(x)&#x2F;dx &#x3D; q(x)$</p>\n<p>$dF_s(x) &#x3D; q(x)dx&#x3D;dS_q$</p>\n<p>$F_s(x)$的意思是两个截面剪力的差，$dS_q$表示q围成的面积</p>\n<p><img data-src=\"C:/%E8%B5%84%E6%96%99%E7%9B%98/%E5%A4%A7%E5%AD%A6%E6%96%87%E5%8C%96%E8%AF%BE/%E6%9D%90%E6%96%99%E5%8A%9B%E5%AD%A6/Snipaste_2024-03-28_00-13-50.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/pcb/%E4%BB%A3%E7%A0%81/",
            "url": "https://bangdexuanyuan.github.io/pcb/%E4%BB%A3%E7%A0%81/",
            "title": "",
            "date_published": "2024-03-27T03:32:09.754Z",
            "content_html": "<pre><code class=\"c++\">/* USER CODE BEGIN Header */\n/**\n  ******************************************************************************\n  * @file           : main.c\n  * @brief          : Main program body\n  ******************************************************************************\n  * @attention\n  *\n  * Copyright (c) 2024 STMicroelectronics.\n  * All rights reserved.\n  *\n  * This software is licensed under terms that can be found in the LICENSE file\n  * in the root directory of this software component.\n  * If no LICENSE file comes with this software, it is provided AS-IS.\n  *\n  ******************************************************************************\n  */\n/* USER CODE END Header */\n/* Includes ------------------------------------------------------------------*/\n#include &quot;main.h&quot;\n#include &quot;usart.h&quot;\n#include &quot;gpio.h&quot;\n\n/* Private includes ----------------------------------------------------------*/\n/* USER CODE BEGIN Includes */\nuint8_t  RxBuffer[300];\nuint8_t cnt;\nuint8_t Rx_data[300];\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n/* USER CODE END Includes */\n\n/* Private typedef -----------------------------------------------------------*/\n/* USER CODE BEGIN PTD */\nint fputc(int ch, FILE *f)\n&#123;\n  HAL_UART_Transmit(&amp;huart1, (uint8_t *)&amp;ch, 1, 0xffff);\n  return ch;\n&#125;\n \n/**\n  * 函数功能: 重定向c库函数getchar,scanf到DEBUG_USARTx\n  * 输入参数: 无\n  * 返 回 值: 无\n  * 说    明：无\n  */\nint fgetc(FILE *f)\n&#123;\n  uint8_t ch = 0;\n  HAL_UART_Receive(&amp;huart1, &amp;ch, 1, 0xffff);\n  return ch;\n&#125;\n\n/* USER CODE END PTD */\n\n/* Private define ------------------------------------------------------------*/\n/* USER CODE BEGIN PD */\nvoid servo(float angle1,float angle2,float angle3,float angle4)\n&#123;\n        \n&#125;\n/* USER CODE END PD */\n\n/* Private macro -------------------------------------------------------------*/\n/* USER CODE BEGIN PM */\n\n/* USER CODE END PM */\n\n/* Private variables ---------------------------------------------------------*/\n\n/* USER CODE BEGIN PV */\n\n/* USER CODE END PV */\n\n/* Private function prototypes -----------------------------------------------*/\nvoid SystemClock_Config(void);\n/* USER CODE BEGIN PFP */\nstatic float  AixAngf1 = 0;\nstatic float  AixAngf2 = 0;\nstatic float  AixAngf3 = 0;\nstatic float  AixAngf4 = 0;\n/* USER CODE END PFP */\nstatic uint16_t  AixAng1 = 0;\nstatic uint16_t  AixAng2 = 0;\nstatic uint16_t  AixAng3 = 0;\nstatic uint16_t  AixAng4 = 0;\nstatic uint16_t open_angle =0;\n/* Private user code ---------------------------------------------------------*/\n/* USER CODE BEGIN 0 */\n\nvoid HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)\n&#123;\n    if(huart-&gt;Instance==USART2)//首先判断是否是USART2触发的中断\n        &#123;\n//\t\t\tprintf(&quot;%c%c%c%c%c&quot;,Rx_data[0],Rx_data[1],Rx_data[2],Rx_data[3],Rx_data[4]);\n//\t&amp;&amp;Rx_data[1]==0x01&amp;&amp;Rx_data[17]==0x77\n       if(Rx_data[0]==0x7F&amp;&amp;Rx_data[1]==0x01&amp;&amp;Rx_data[17]==0x77) &#123;\n                AixAng1 = Rx_data[3]|(Rx_data[4]&lt;&lt;8);\n                AixAng2 = Rx_data[5]|(Rx_data[6]&lt;&lt;8);\n                AixAng3 = Rx_data[7]|(Rx_data[8]&lt;&lt;8);\n                AixAng4 = Rx_data[9]|(Rx_data[10]&lt;&lt;8);\n                open_angle =  Rx_data[13]|(Rx_data[14]&lt;&lt;8);\n                printf(&quot;%d\\r\\n&quot;,open_angle);\n\n                AixAngf1= 90.0-(float) ((AixAng1+5)/10);//是经过处理之后的数据，AixAngf1的现象为前后可转动90度，所以AixAngf1的数值为-90~90度\n            \n                AixAngf2= (float) ((AixAng2+5)/10)*0.9-260.0;\n            //AixAngf2的现象也是向前可以达到-90度，向后45度最多，但是这个传感器在0~90这个区间有点问题，感觉像是2倍的关系，直接就偏移过去了\n            //实际应该是0~45但是传感器输出的数据是0~90\n            \n                AixAngf3= (-1)*((float) ((AixAng3+5)/10)-78.0)+99.0;\n            //AixAngf3，它的实际现象是向前为0度，但是向后为0~135度\n                AixAngf4= (186.0-(float) ((AixAng4+5)/10))*0.9;\n                printf(&quot;%f\\r\\n&quot;,AixAngf1);\n                printf(&quot;%f\\r\\n&quot;,AixAngf2);\n                printf(&quot;%f\\r\\n&quot;,AixAngf3);\n                printf(&quot;%f\\r\\n&quot;,AixAngf4);\n\n//\t\t\t\t &#125;\n//\t\t\t\t if(Rx_data[1]==0x02)\n//\t\t\t\t &#123;\n//\t\t\t\t\tprintf(&quot;关灯&quot;);\n//\t\t\t\t &#125;\n//\t\t\t\t if(Rx_data[1]==0x03)\n//\t\t\t\t &#123;\n//\t\t\t\t\t\tprintf(&quot;老等&quot;);\n//\t\t\t\t &#125;\n//\t\t\t\t\t \n//\t\t\t\t\tswitch (Rx_data[1]) &#123;\n//                  case 0x01: &#123;\n//                      printf(&quot;Servo_1 turn\\r\\n&quot;);\n//                      printf(&quot;angle=%d\\r\\n&quot;, Rx_data[2] * 256 + Rx_data[3]);\n//                  &#125;\n//                      break;\n//                  case 0x02: &#123;\n//                      printf(&quot;Servo_2 turn\\r\\n&quot;);\n//                      printf(&quot;angle=%d\\r\\n&quot;, Rx_data[2] * 256 + Rx_data[3]);\n//                  &#125;\n//                      break;\n//                  case 0x03: &#123;\n//                      printf(&quot;Servo_3 turn\\r\\n&quot;);\n//                      printf(&quot;angle=%d\\r\\n&quot;, Rx_data[2] * 256 + Rx_data[3]);\n//                  &#125;\n//                      break;\n//                  case 0x04: &#123;\n//                      printf(&quot;Servo_4 turn\\r\\n&quot;);\n//                      printf(&quot;angle=%d\\r\\n&quot;, Rx_data[2] * 256 + Rx_data[3]);\n//                  &#125;\n//                      break;\n//                  default:\n//                      printf(&quot;data_error!&quot;);\n//              &#125;\n//          &#125;\n//          else\n//          &#123;\n//              printf(&quot;Data——error!\\r\\n&quot;);\n//          &#125;\n                    &#125;\n          for (int i = 0; i &lt; 18; ++i) &#123;\n              Rx_data[i]=0;\n          &#125;\n            HAL_UART_Receive_IT(&amp;huart2,(uint8_t*)Rx_data,18);\n        &#125;\n&#125;\n/* USER CODE END 0 */\n\n/**\n  * @brief  The application entry point.\n  * @retval int\n  */\nint main(void)\n&#123;\n  /* USER CODE BEGIN 1 */\n\n  /* USER CODE END 1 */\n\n  /* MCU Configuration--------------------------------------------------------*/\n\n  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\n  HAL_Init();\n\n  /* USER CODE BEGIN Init */\n\n  /* USER CODE END Init */\n\n  /* Configure the system clock */\n  SystemClock_Config();\n\n  /* USER CODE BEGIN SysInit */\n\n  /* USER CODE END SysInit */\n\n  /* Initialize all configured peripherals */\n  MX_GPIO_Init();\n  MX_USART1_UART_Init();\n  MX_USART2_UART_Init();\n  /* USER CODE BEGIN 2 */\n    HAL_UART_Receive_IT(&amp;huart2,(uint8_t*)Rx_data,18);\n\n  /* USER CODE END 2 */\n\n  /* Infinite loop */\n  /* USER CODE BEGIN WHILE */\n  while (1)\n  &#123;\n        \n    /* USER CODE END WHILE */\n\n    /* USER CODE BEGIN 3 */\n//\t\tHAL_UART_Transmit(&amp;huart1 ,(uint8_t*)Tx_data , 5,0xffff);\n//\t\tHAL_Delay(2000);\n  &#125;\n  /* USER CODE END 3 */\n&#125;\n\n/**\n  * @brief System Clock Configuration\n  * @retval None\n  */\nvoid SystemClock_Config(void)\n&#123;\n  RCC_OscInitTypeDef RCC_OscInitStruct = &#123;0&#125;;\n  RCC_ClkInitTypeDef RCC_ClkInitStruct = &#123;0&#125;;\n\n  /** Initializes the RCC Oscillators according to the specified parameters\n  * in the RCC_OscInitTypeDef structure.\n  */\n  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;\n  RCC_OscInitStruct.HSEState = RCC_HSE_ON;\n  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;\n  RCC_OscInitStruct.HSIState = RCC_HSI_ON;\n  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;\n  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;\n  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;\n  if (HAL_RCC_OscConfig(&amp;RCC_OscInitStruct) != HAL_OK)\n  &#123;\n    Error_Handler();\n  &#125;\n\n  /** Initializes the CPU, AHB and APB buses clocks\n  */\n  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK\n                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\n  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\n  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;\n  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;\n  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;\n\n  if (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)\n  &#123;\n    Error_Handler();\n  &#125;\n&#125;\n\n/* USER CODE BEGIN 4 */\n\n/* USER CODE END 4 */\n\n/**\n  * @brief  This function is executed in case of error occurrence.\n  * @retval None\n  */\nvoid Error_Handler(void)\n&#123;\n  /* USER CODE BEGIN Error_Handler_Debug */\n  /* User can add his own implementation to report the HAL error return state */\n  __disable_irq();\n  while (1)\n  &#123;\n  &#125;\n  /* USER CODE END Error_Handler_Debug */\n&#125;\n\n#ifdef  USE_FULL_ASSERT\n/**\n  * @brief  Reports the name of the source file and the source line number\n  *         where the assert_param error has occurred.\n  * @param  file: pointer to the source file name\n  * @param  line: assert_param error line source number\n  * @retval None\n  */\nvoid assert_failed(uint8_t *file, uint32_t line)\n&#123;\n  /* USER CODE BEGIN 6 */\n  /* User can add his own implementation to report the file name and line number,\n     ex: printf(&quot;Wrong parameters value: file %s on line %d\\r\\n&quot;, file, line) */\n  /* USER CODE END 6 */\n&#125;\n#endif /* USE_FULL_ASSERT */\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/pcb/123/",
            "url": "https://bangdexuanyuan.github.io/pcb/123/",
            "title": "",
            "date_published": "2024-03-26T16:50:22.284Z",
            "content_html": "<p>1150是从上到下的第二个舵机的机械中值。</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/pcb/%E7%94%BBPCB%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/",
            "url": "https://bangdexuanyuan.github.io/pcb/%E7%94%BBPCB%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/",
            "title": "水下机器人画板子的时候遇到的一些问题",
            "date_published": "2024-03-25T15:00:00.000Z",
            "content_html": "<p><img data-src=\"https://pic.imgdb.cn/item/6600519a9f345e8d030af8c2.png\"></p>\n<p>在自己画板子的时候，第一版板子，自己并没有注意到一个问题，就是这个电源的母端接口，也就是U2那个部分，自己设计的时候，想让焊盘弄得大一些，让电流能够更好地通过，但是自己忽略了一个问题，就是这个焊盘太大了，导致负极的焊盘和正极的那个电源插口连接上了，导致短路。</p>\n<p>真是个低级的问题，但是自己还是犯了，很抽象。</p>\n<p>幸亏自己是通过电压表测量了一下，没有直接接到电源上，否则，不知道会出现什么问题。可能直接就炸了吧。</p>\n<p>还有，自己得学会开窗得操作，根据百度，对于PCB开窗的解释如下：</p>\n<p>阻焊覆盖，就是<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY2ZhbnMuY29tL3YvdGFnLzgyLw==\">PCB</span>上的导线都是盖油的，可以防止短路，对器件造成伤害，其实就是自己平时嘉立创打板之后，</p>\n<p>所谓开窗就是去掉导线上的油漆层，让导线裸露可以上锡。</p>\n<p>开窗还有一个很常见功能，就是后期烫锡增加铜箔厚度，方便过大<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY2ZhbnMuY29tL3RhZ3MvJUU3JTk0JUI1JUU2JUI1JTgxLw==\">电流</span>，散热，这在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaHFjaGlwLmNvbS9hcHAuaHRtbA==\">电源</span>板和<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMuZWxlY2ZhbnMuY29tL3podXRpX2RpYW5qaV8xLmh0bWw=\">电机控制</span>板中比较常见。</p>\n<p>然后，明白一点，就是在自己直接用封装进行PCB绘制的时候，网络一定要统一，就是该是GND的，可以在</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/660059a99f345e8d033c3631.png\"></p>\n<p>如右图所示，网络是可以进行修改的，因为我们并没有进行原理图的绘制，所以，我们本应该是GND的网络，会变成未知的网络格式，比如s24820,这个时候，我们铺铜的时候，也会发现，其显示是否保存成为一个孤岛，这个也就间接表示，我们的网络其实建立的不对。</p>\n<p>然后自己的程序，明天接着进行调试。</p>\n<p>主手部分的那个PCB板子，手柄处，进行了测量，还是存在a,b处存在短接的问题，这个问题仍然没有解决，这可能也是主控板的串口，通过232转ttl，并没有输出数据的原因。</p>\n<p>明天的事情，我们明天再聊。</p>\n<p>卧槽了，太离谱了，他竟然又好用了。</p>\n<p>然后现在得进度就是我们需要把PCB板子重新画一边，因为刚才的原因嘛，导致电池的正极和负极是导通的状态，这个肯定是不行的。</p>\n<p>然后根据昨天的经验，我们可以通过把网络进行修改，然后使得自己PCB板子好用。</p>\n<p>最后，记得开窗，就是把阻焊覆盖这层给去掉，让其散热均匀。</p>\n<p>然后其实这一版PCB改完之后，我们其实可以考虑，把舵机的信号线加上了，因为主手的程序可以出来了，所以我们也可以考虑把主手的信号线加上了。</p>\n<p>关于电子舱的设计部分，全由我自己全全进行设计</p>\n<p>目前有问题的就是水下摄像头的部分，首先是摄像头和树莓派相连，然后树莓派通过网线和电力载波相连，电力载波通过a和b线将信号传输到水上，水上也有一个电力载波模块，将电力载波模块通过网线和电脑相连，实现实时图像的传输。</p>\n<p>关于供电部分，树莓派需要进行供电，电力载波也需要进行供电。树莓派的供电，可以使用typec口进行供电，所以考虑怎么引出来一个usb口，从而给树莓派供电。</p>\n",
            "tags": [
                "pcb"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E5%8D%95%E7%89%87%E6%9C%BA%E4%B9%8B%E9%97%B4%E4%B8%B2%E5%8F%A3%E6%B2%9F%E9%80%9A/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E5%8D%95%E7%89%87%E6%9C%BA%E4%B9%8B%E9%97%B4%E4%B8%B2%E5%8F%A3%E6%B2%9F%E9%80%9A/",
            "title": "水上和水下双单片机串口沟通",
            "date_published": "2024-03-24T07:10:00.000Z",
            "content_html": "<p>由于项目的需要，需要一个水上stm32单片机与水下的电子仓里面的stm32进行通讯。</p>\n<p>我的思路是这样的，先不考虑距离传输，直接采用串口进行传输。</p>\n<p>然后我的思路是，采用$stm32cubemx$对串口进行配置，因为是全双工的，所以我想法是利用串口ttl模块</p>\n<p>通过查阅资料，一般的串口通讯ttl能传播的距离为10m左右，对于水下机器人的传播距离显然不适用，所以之后我们会采用485模块，通过485模块，将水下机器人的传播距离增大至1km.</p>\n<p>之前测试的时候，我是想通过ttl模块，直接对单片机发送16进制的数据，测试hal库的中断接收好不好用，但是在测试的过程中，我发现，通过ttl模块对单片机发送的数据和在hal里面，调用发送中断函数，其发送的16进制的数据，并不一样，在这个地方。我卡了好久，</p>\n<p>现在考虑怎么把控制速度和舵机的进行融合，我们可以这样。</p>\n<p>在接受中断里面，通过接收中断，把舵机的信号接收，然后通过判断其正确之后，我们将其和单片机采集的ADC值进行融合，然后发送数据包，通过485发送给水下单片机，从而操作其工作。</p>\n",
            "tags": [
                "水下机器人"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/No%20targer%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "url": "https://bangdexuanyuan.github.io/stm32/No%20targer%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/",
            "title": "关于keil中出现No target connnect问题的解决",
            "date_published": "2024-03-23T07:43:12.000Z",
            "content_html": "<h4 id=\"问题描述：\"><a href=\"#问题描述：\" class=\"headerlink\" title=\"问题描述：\"></a>问题描述：</h4><ul>\n<li>IDE: Keil5</li>\n<li>仿真器：ST-LINK&#x2F;V2(使用SWJ调试)</li>\n<li>出现问题：烧录程序时，出现No target connected的提示，具体如下图所示：</li>\n</ul>\n<p><img data-src=\"https://img2020.cnblogs.com/blog/1936876/202011/1936876-20201105204801926-505140701.png\" alt=\"img\"><img data-src=\"https://img2020.cnblogs.com/blog/1936876/202011/1936876-20201105204916335-1440071308.png\" alt=\"img\"></p>\n<h2 id=\"情况：SWJ功能在代码中被关闭了\"><a href=\"#情况：SWJ功能在代码中被关闭了\" class=\"headerlink\" title=\"情况：SWJ功能在代码中被关闭了\"></a>情况：SWJ功能在代码中被关闭了</h2><p> 这种情况的特点往往是：之前烧录都好好的，某次烧录后突然就不行。<strong>并且当你一直按着开发板的reset键时，你会发现又能识别设备了</strong>（根据这个现象，网上有给出先按住reset键，在点烧录按钮后立刻松开reset的笨办法，这个方法看手速和人品，有概率解决）。<img data-src=\"https://img2020.cnblogs.com/blog/1936876/202011/1936876-20201105215825006-2077899545.png\" alt=\"img\"></p>\n<p><strong>出现这种情况的原因是，你烧录的代码里把芯片的SWJ调试功能给屏蔽了</strong>。这部分的代码在<strong>stm32f1xx_hal_msp.c</strong>这个文件的**HAL_MspInit()<strong>函数里，<br>如图：正是</strong>__HAL_AFIO_REMAP_SWJ_DISABLE()**这个函数把SWJ调试功能屏蔽了，所以你连接swj没反应。<br><img data-src=\"https://img2020.cnblogs.com/blog/1936876/202011/1936876-20201105221408760-1793201712.png\" alt=\"img\"></p>\n<p>解决办法是：把这句代码删了，编译后用上面的笨办法烧录进去，以后只点烧录按钮即可！（如果是JTAG调试，道理类似）</p>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/under%20water%20robot/%E4%B8%B2%E5%8F%A3%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/",
            "url": "https://bangdexuanyuan.github.io/under%20water%20robot/%E4%B8%B2%E5%8F%A3%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/",
            "title": "STM32串口传输数据",
            "date_published": "2024-03-21T10:30:00.000Z",
            "content_html": "<ul>\n<li><p>$STM32CUBEMX$利用串口传输数据</p>\n<p>1.串口的发送与接收</p>\n<ul>\n<li><p>HAL_UART_Transmit();串口发送数据，使用超时管理机制 </p>\n</li>\n<li><p>HAL_UART_Receive();串口接收数据，使用超时管理机制</p>\n</li>\n<li><p>HAL_UART_Transmit_IT();串口中断模式发送  </p>\n</li>\n<li><p>HAL_UART_Receive_IT();串口中断模式接收</p>\n</li>\n<li><p>HAL_UART_Transmit_DMA();串口DMA模式发送</p>\n</li>\n<li><p>HAL_UART_Transmit_DMA();串口DMA模式接收</p>\n</li>\n</ul>\n<pre><code class=\"c++\">HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)\n</code></pre>\n<p>功能：<strong>串口</strong>发送指定长度的数据。如果超时没发送完成，则不再发送，返回超时标志（HAL_TIMEOUT）。</p>\n<pre><code>UART_HandleTypeDef*huart 例如huart1就是其中一个别名\n</code></pre>\n</li>\n</ul>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/study/hello-world/",
            "url": "https://bangdexuanyuan.github.io/study/hello-world/",
            "title": "英语论文学习",
            "date_published": "2024-03-13T10:30:00.000Z",
            "content_html": "<p>英语论文写作的时候，一般由以下的结构组成：</p>\n<ul>\n<li><strong>title,author,abstract,keywords</strong></li>\n</ul>\n<p>Descriptive(说明性的) information that lets readers search for an article.</p>\n<ul>\n<li><strong>Information</strong></li>\n</ul>\n<p>What is the context for this project?</p>\n<p>How does it fit in with other research on the topic?</p>\n<p>What is the research question?</p>\n<p>总结：以上说的是WHY部分</p>\n<ul>\n<li><strong>Methods</strong></li>\n</ul>\n<p>What did the author do to answer the research question?</p>\n<p>总结：以上部分说的是HOW部分</p>\n<ul>\n<li><strong>Results</strong></li>\n</ul>\n<p>What was the answer to the question?</p>\n<p>This is often shown in tables and figures.</p>\n<p>总结：以上部分说的是WHAT</p>\n<ul>\n<li><strong>Discussion&#x2F;Conclusion</strong></li>\n</ul>\n<p>What is the significance of this project?</p>\n<p>How does it fit in with what else is known about the topic?</p>\n<p>总结：以上部分说的是SO WHAT部分</p>\n<ul>\n<li><strong>References</strong>（参考文献部分）</li>\n</ul>\n<p><strong>Features of Academic English</strong> </p>\n<ul>\n<li>it uses formal academic language and avoids colloqualisms(n.口语)</li>\n<li>it avoid  等待补坑</li>\n</ul>\n<p><strong>Concrete example</strong>(专业英语风格的例子)</p>\n<ul>\n<li><p>No idiomatic(习语)&#x2F;colloquial(口语)&#x2F;slang(俚语)    kid&#x2F;boss&#x2F;staff</p>\n</li>\n<li><p>No phrasal verbs没有动词短语     take up&#x2F;get rid of&#x2F;look into</p>\n</li>\n<li><p>No personal pronouns没有人称代词       i&#x2F;me&#x2F;you&#x2F;your</p>\n</li>\n<li><p>No contractions  (没有使用缩略形式)     It’ll &#x2F; It’s</p>\n</li>\n<li><p>No questions(不使用问题)  So why did the project fail?</p>\n</li>\n<li><p>No emotional adverbs（不使用情绪化副词）  surprisingly&#x2F;unfortunately</p>\n</li>\n<li><p>No vague language(不适用含糊不清的语言)     and so on &#x2F;etc</p>\n</li>\n<li><p>No bullet points(不使用要点符号)   比如最前面的那个小黑点</p>\n</li>\n<li><p>No reputation（不要重复）constant repeating same words(exclude key words)关键词除外</p>\n</li>\n<li><p>No basic language</p>\n</li>\n</ul>\n<p>like 换成for example</p>\n<p>things 换成factor</p>\n<p>lots of 换成significant amount</p>\n<p>get 换成obtain</p>\n<p>big替换为large </p>\n<p>look at examine 换成examine</p>\n<ul>\n<li>YES passive stucture  we analyse换成the data is</li>\n<li>YES accurate vocabulary   law-rule-regulation</li>\n<li>YES precise figures&#x2F;facts      a few hours换成 x hours     5 years ago 换成in   2015 </li>\n<li>YES caution&#x2F;tentative voice(谨慎&#x2F;试探性的声音)  seem&#x2F;appear&#x2F;could&#x2F;may</li>\n</ul>\n<p><strong>Essentials(n.要点) of an Abstract</strong></p>\n<ul>\n<li>Research of background</li>\n</ul>\n<p>Why is the research important?Why would a reader be interested in the research?</p>\n<ul>\n<li>Existing problem</li>\n</ul>\n<p>(What problem does the research attempt to solve?What is the purpose or the scope of the project?)</p>\n<ul>\n<li>Methods employed(这里的employed应该是应用的意思)</li>\n</ul>\n<p>What are the scientific  approaches used in the study?</p>\n<ul>\n<li>Results or findings</li>\n</ul>\n<p>How do the research data indicate the results of the project?</p>\n<p>研究数据如何表明项目的结果？</p>\n<ul>\n<li>Conclusions from the research</li>\n</ul>\n<p>What can we conclude from the research ?What changes should be implemented as a result of the works?</p>\n<p>我们可以从研究中得出什么结论？工程结束后，应实施哪些更改？</p>\n<p>考试专用：</p>\n<p>一些英语论文中专业的用法：</p>\n<ul>\n<li><p>systematically review     系统综述</p>\n</li>\n<li><p>reach a mature stage     达到成熟阶段</p>\n</li>\n<li><p>aim &#x2F;attempt&#x2F;intend to  目的&#x2F;企图&#x2F;打算</p>\n</li>\n<li><p>assess&#x2F;estimate the efficacy of   评估&#x2F;估计…的功效</p>\n</li>\n<li><p>investigate(调查)&#x2F;explore the relationship(探索关系)&#x2F;interaction(相互影响) between …….and…….</p>\n</li>\n<li><p>the primary(主要的，首要的）</p>\n</li>\n<li><p>proposed（提出了）……outperform（胜过）……on</p>\n</li>\n<li><p>……allow for a conclusive interpretation(总结性的解释)</p>\n</li>\n<li><p>we introduce the notion(概念)&#x2F;framework(框架，结构)  of</p>\n</li>\n<li><p>a major area of interest within the field of       ……. 的主要兴趣领域</p>\n</li>\n</ul>\n",
            "tags": [
                "英语"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E6%97%A0%E7%BA%BF%E9%80%9A%E8%AE%AF%E4%B8%8B%E8%BD%BD%E5%99%A8/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E6%97%A0%E7%BA%BF%E9%80%9A%E8%AE%AF%E4%B8%8B%E8%BD%BD%E5%99%A8/",
            "title": "无线下载器",
            "date_published": "2024-03-10T11:40:00.000Z",
            "content_html": "<p>无线通讯：</p>\n<p>无线空中传输速率，指的是无线模块在空中传输的频率。</p>\n<p>2M：速度最快，此时调试器的性能最大，最快</p>\n<p>1M：速度会减慢，但是减慢的速度并不多，可以稍微增加一点距离，但是增加的不多。</p>\n<p>250K：距离增加的非常多，但是调试器速度下降也比较多。建议远距离的可以使用。</p>\n<p>无限地址的设置：</p>\n<p>内部无线模块的地址，接收端和发送端的地址必须一样。</p>\n<p><strong>唯一使用的注意事项：</strong></p>\n<p>在keil中，我们点击魔术棒按钮，然后在Debug这个界面里面，在右侧界面，把stlink的选项设置为CMSIS-DAP-Debugger。</p>\n<p>之后点击settings按钮，通过观察右侧的SW Device看看对于单片机的类型，是否进行了识别。</p>\n<p>然后把CMSIS-DAP-JTAG&#x2F;SW Adapter这个选项修改成第二行。</p>\n<p>并把端口的类型改成SW类型。</p>\n<p><strong>tips：</strong>使用的时候，我们接收端直接通过USB与电脑相连，另一个接收端，通过SW，采用杜邦线和目标单片机进行相连。</p>\n<p>需要注意的是，我们接收端的供电采用充电宝或者自己画板子的时候，可以加一个供电的USB口。</p>\n<p>另外，自己于2024.3.10日调试的时候，因为单片机的问题，也曾出现过，检测不到单片机的问题。</p>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/PWM/",
            "url": "https://bangdexuanyuan.github.io/stm32/PWM/",
            "title": "",
            "date_published": "2023-12-18T14:13:26.699Z",
            "content_html": "<p>PWM参数计算</p>\n<p>时基单元：</p>\n<p><img data-src=\"/\"></p>\n<p>![Snipaste_2023-12-18_21-35-40](C:\\all study document\\Microcontroller study\\32\\图片笔记\\Snipaste_2023-12-18_21-35-40.png)</p>\n<p>跟Keil51一样，先进行预分频。</p>\n<p>自动重装器：设置一个值ARR，每次计数从0开始，计数到ARR后清零，计数ARR+1次</p>\n<p>计数器cnt：后根据内部时钟进行计数，每次和CCR捕获比较器进行比较；当CNT&lt;CCR时，电平置为有效电平；同理，当CNT&gt;&#x3D;CCR时，置为无效电平，即为零；之后根据占空比进行电压的输出。</p>\n<p>keil中代码的讲述</p>\n<pre><code>void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1);\nvoid TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2);\nvoid TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3);\nvoid TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4);\n</code></pre>\n<p>这个函数用来改变通道的占空比</p>\n<pre><code>void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);\nvoid TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);\nvoid TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);\nvoid TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);\n</code></pre>\n<p>这个是用结构体来初始化输出</p>\n<hr>\n<p>一.舵机不听指挥乱动</p>\n<p>没有与单片机共地</p>\n<p>舵机有三条线，分别是正负极和信号线(用来输入PWM信号)，因为舵机所需要的驱动电压比较大，一般在6v往上了，一般的单片机供电无法驱动舵机，就需要单独的外接电源供电，这时注意舵机地线不仅要和外接电源负极相连，还要与单片机共地，不然PWM信号输入后舵机会不听使唤乱动，因为PWM信号由单片机输入，舵机与单片机没有供地，舵机就没有参考电平，就会乱转。</p>\n<p>PWM需要和单片机共地，事实确实是这样</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%802/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%802/",
            "title": "",
            "date_published": "2023-10-04T10:57:34.951Z",
            "content_html": "<p>电路基础</p>\n<ul>\n<li>理想电压源阻抗为零，原因为：</li>\n</ul>\n<p> 理想电压源 无论有多少电流流过都不会改变两端的电势差 ，所以内阻理想为零</p>\n<ul>\n<li>理想电流源阻抗为正无穷，原因如下：</li>\n</ul>\n<p><img data-src=\"https://pic.imgdb.cn/item/651d2bb1c458853aef9aa5d4.jpg\"></p>\n<p>而理想化就是让他们两个的效率达到100%<br>那么对于电流源，效率最大就是让电流全流过工作电阻，即负载电阻R，那么仅当内阻Ro为无穷大时能满足，此时为理想电流源。<br>同理，对于电压源，效率最大是把电压全加载负载电阻R两端，那么仅当内阻Ro为0时，Ro不能分到电压，电压全分给R，此时为理想电压源。</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/",
            "title": "",
            "date_published": "2023-09-14T08:25:48.744Z",
            "content_html": "<p>电路基础</p>\n<h5 id=\"明白什么是参考方向\"><a href=\"#明白什么是参考方向\" class=\"headerlink\" title=\"明白什么是参考方向\"></a>明白什么是参考方向</h5><p>首先，对于一个电路，一开始拿到手，我们是并不知道这个电路的电流和电压方向，那么就需要我们首先假定，假定电流一个流向，假定电压一个方向，也就是设定了一个参考方向</p>\n<p>那么，如果我们电流算出来了一个数，比如$I_A&#x3D;-0.2A$，就说明这个电流的实际方向，与参考方向是相反的，电压同理。那么很自然就会想到，电压电流，两个对象，一共就有2*2中组合方案，有参考方向相同的，就有参考方向相反的。于是我们引入关联与非关联，我们称电流的参考方向与电压的参考方向相同的，叫做关联，反之，称之为非关联。</p>\n<p>如果电压与电流关联，那么我们可</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/life/%E7%81%AB%E8%BD%A6%E9%A9%B6%E5%90%91%E4%BA%91%E5%A4%96%EF%BC%8C%E6%A2%A6%E5%AE%89%E9%AD%82%E4%BA%8E%E4%B9%9D%E9%9C%84/",
            "url": "https://bangdexuanyuan.github.io/life/%E7%81%AB%E8%BD%A6%E9%A9%B6%E5%90%91%E4%BA%91%E5%A4%96%EF%BC%8C%E6%A2%A6%E5%AE%89%E9%AD%82%E4%BA%8E%E4%B9%9D%E9%9C%84/",
            "title": "火车驶向云外 梦安魂于九霄",
            "date_published": "2023-09-13T02:39:00.000Z",
            "content_html": "<p>我那些残梦，灵异九霄。徒忙漫奋斗，满目沧愁。</p>\n<p>在滑翔之后，完美坠落。在四维宇宙，眩目遨游。</p>\n<p>我那些烂曲，流窜九州。云游魂飞奏，音愤符吼。</p>\n<p>在宿命身后，不停挥手。视死如归仇，毫无保留。</p>\n<p>黑色的不是夜晚，是漫长的孤单。看脚下一片黑暗，望头顶星光璀璨。</p>\n<p>叹世万物皆可盼，唯真爱最短暂。失去的永不复返，世守恒而今倍还。</p>\n<p>摇旗呐喊的热情，携光阴渐远去。人世间悲喜烂剧，昼夜轮播不停。</p>\n<p>纷飞的滥情男女，情仇爱恨别离。一代人终将老去，但总有人正年轻。</p>\n",
            "tags": [
                "音乐"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/Tim%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AD%A6%E4%B9%A0/",
            "url": "https://bangdexuanyuan.github.io/stm32/Tim%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AD%A6%E4%B9%A0/",
            "title": "",
            "date_published": "2023-09-06T14:18:20.175Z",
            "content_html": "<p>Tim定时器学习</p>\n<p>定时器可以对输入的时钟进行计数，并在计数达到设定值的时候触发中断。当这个计数器的输入是一个准确可靠的基准时钟时，那它在对这个基准时钟进行计数的过程，实际上就是计时的过程</p>\n<p>16位计数器、预分频器、自动重装寄存器的时基单元，在72MHz计数时钟下可以实现最大59.65s的定时。</p>\n<p>这里的计数器其实就是用来执行计数定时的一个寄存器，每来一个时钟，计数器加1</p>\n<p>预分频器，可以对计数器的时钟进行分频，让这个计数更加灵活。</p>\n<p>自动重装寄存器就是计数的目标值，就是我想到计多少个时钟申请中断。</p>\n<p>这些寄存器构成了定时器最核心的部分，我们把这一块电路，成为时基单元。</p>\n<p>那这个时基单元里面的计数器，预分频器，自动重装寄存器都是16位。</p>\n<p>2的16次方时65536，也就是如果预分频器设置最大，自动重装也设置最大</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>编号</th>\n<th>总线</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>高级定时器</td>\n<td>TIM1、TIM8</td>\n<td>APB2</td>\n<td>拥有通用定时器全部功能，并额外具有重复计数器、死区生成、互补输出、刹车输入等功能</td>\n</tr>\n<tr>\n<td>通用定时器</td>\n<td>TIM2、TIM3、TIM4、TIM5</td>\n<td>APB1</td>\n<td>拥有基本定时器全部功能，并额外具有内外时钟源选择、输入捕获、输出比较、编码器接口、主从触发模式等功能</td>\n</tr>\n<tr>\n<td>基本定时器</td>\n<td>TIM6、TIM7</td>\n<td>APB1</td>\n<td>拥有定时中断、主模式触发DAC的功能</td>\n</tr>\n</tbody></table>\n<p>STM32F103C8T6定时器资源：TIM1、TIM2、TIM3、TIM4</p>\n<p>并额外具有重复计数器、死区生成、互补输出、刹车输入等功能,</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/EXTI%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/",
            "url": "https://bangdexuanyuan.github.io/stm32/EXTI%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/",
            "title": "EXTI外部中断",
            "date_published": "2023-09-02T16:21:00.000Z",
            "content_html": "<h4 id=\"EXTI外部中断\"><a href=\"#EXTI外部中断\" class=\"headerlink\" title=\"EXTI外部中断\"></a>EXTI外部中断</h4><p>NVIC的名字叫做，嵌套中断向量控制器</p>\n<p>NVIC的出现，就是为了当CPU的秘书，如果我们把所有的中断都接在CPU上，CPU对应位置就得进行适配，设计上就很麻烦。并且如果很多中断进行申请，造成了拥堵，CPU也会很难搞，因为CPU还是主要负责进行运算的，中断分配的任务就放到别的地方吧。</p>\n<p>NVIC有很多个输入口，你有多少个中断都可以接过来</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f35828661c6c8e54dee9d2.png\"></p>\n<p>NVIC只有一个输出口，直接接到CPU上</p>\n<p>stm32有68个可屏蔽中断通道，包含EXTI、TIM、ADC、USART、SPI、I2C、RTC等多个外设使用NVIC统一管理中断，每个中断通道都拥有16个可编程的优先等级，可对优先级进行分组，进一步设置抢占优先级和响应优先级</p>\n<p>NVIC的中断优先级由优先级寄存器的4位（0~15）决定，这4位可以进行切分，分为高n位的抢占优先级和低4-n位的响应优先级，记住，值越小的优先级越高，比如0就是最高的优先级</p>\n<p>抢占优先级高的可以中断嵌套，响应优先级高的可以优先排队，<strong>抢占优先级和响应优先级均相同的按中断号排队</strong></p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f35a2d661c6c8e54df3a92.png\"></p>\n<p>举个例子，就好像是有个医生在给一个人进行看病，抢占优先级高的可以直接把看病的那个人挤开，让自己去看。然后响应优先级就好像是有个人排队，他就应该排在第一位，大概就是这个意思。</p>\n<hr>\n<p>综上所述，现在我们可以这么理解，NVIC其实可以理解成为一个叫号系统，而CPU就是那个医生，下面我们来介绍第一位病人，EXTI外部中断</p>\n<hr>\n<p>EXTI（Extern Interrupt）外部中断</p>\n<p>EXTI可以监测指定GPIO口的电平信号，当其指定的GPIO口产生电平变化时，EXTI将立即向NVIC发出中断申请，经过NVIC裁决后即可中断CPU主程序，使CPU执行EXTI对应的中断程序</p>\n<p>支持的触发方式：上升沿&#x2F;下降沿&#x2F;双边沿&#x2F;软件触发</p>\n<p><strong>解释一下</strong>：这里的上升沿是指由低电平上升到高电平，下降沿是由高电平降低到低电平，而双边沿就是指上下都计数</p>\n<p>支持的GPIO口：所有GPIO口，但相同的Pin不能同时触发中断</p>\n<p>通道数：16个GPIO_Pin，外加PVD输出、RTC闹钟、USB唤醒、以太网唤醒</p>\n<p>触发响应方式：中断响应&#x2F;事件响应</p>\n<h4 id=\"首先介绍一下EXTI的基本结构\"><a href=\"#首先介绍一下EXTI的基本结构\" class=\"headerlink\" title=\"首先介绍一下EXTI的基本结构\"></a>首先介绍一下EXTI的基本结构</h4><p><img data-src=\"https://pic.imgdb.cn/item/64f355a9661c6c8e54de9017.png\"></p>\n<p>这里的每个GPIO都有16个引脚，显然对于只有16个输入口的EXT是远远超出的，所以我们中间加一个AFIO中断引脚选择器，你可以理解为GPIOA，B，C共用一个Pin引脚口，那么就可以解释了，为什么相同的引脚不能同时触发中断，因为这样，你根本不知道是哪个GPIO口发生了中断。</p>\n<p>经过EXTI后，分为了两种输出，一种直接接到NVIC，一种接入其他外设。</p>\n<p>根据常理，本来20种的中断输入应该有20种的中断输出，但是可能是STM公司觉得有点占用NVIC的通道，于是，将EXTI5<del>9， EXTI10</del>15分别合并为了一种通道， 也就是说EXTI5~9会触发同一种中断函数，同理10到15也是</p>\n<p>对于合并通道的中断函数，还需根据标志位进一步确定这个是由哪个中断函数进来的</p>\n<h4 id=\"AFIO复用IO口\"><a href=\"#AFIO复用IO口\" class=\"headerlink\" title=\"AFIO复用IO口\"></a>AFIO复用IO口</h4><p>AFIO主要用于引脚复用功能的选择和重定义，在STM32中，AFIO主要完成两个任务：复用功能引脚重映射、中断引脚选择。</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f360b1661c6c8e54e160f5.png\"></p>\n<p>这就是AFIO的作用</p>\n<h4 id=\"EXTI外部中断的框图\"><a href=\"#EXTI外部中断的框图\" class=\"headerlink\" title=\"EXTI外部中断的框图\"></a>EXTI外部中断的框图</h4><p><img data-src=\"https://pic.imgdb.cn/item/64f4a337661c6c8e541d2cc6.png\"></p>\n<p>记住其中带弧度的是或门，只要有一个输入端是1，那最终输出端的数值就是1</p>\n<p>平的是与门，记住电路的符号就行</p>\n<p>这也就能解释为什么软件的外部中断，也可以进行中断</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f4a5f3661c6c8e541d9481.png\"></p>\n<p>由于自身设计的微妙，我们可以做到A，B两个端口输出的波的相位差90度，可以通过判断A，B端口的高低电平，从而确定此时是正转还是反转。</p>\n<p>分析A端，当左端的端口并未进行接通时，由于VCC连接R1，相当于进行电位的上拉，从此A点的电位为高电位。而当左端的端口接上时A端相当于直接接GND。这里的R3起到了限流电阻的作用，防止电流过大。</p>\n<p>这里的C1起到了<strong>滤波电容</strong>的作用，防止输出的电位过于抖动</p>\n<p>滤波电容这块，感觉还是不太会</p>\n<p>右端的电路同理</p>\n<p>程序部分</p>\n<p>首先在Hardware文件夹中新建CountSensor.h和CountSensor.c文件</p>\n<pre><code class=\"c\">CountSensor.h文件\n    #ifndef _COUNT_SENSOR_H\n    #define _COUNT_SENSOR_H\n\n    void CountSensor_Init(void);\n    uint16_t get(void);\n\n    #endif\n</code></pre>\n<h4 id=\"那么如何配置外部的中断\"><a href=\"#那么如何配置外部的中断\" class=\"headerlink\" title=\"那么如何配置外部的中断\"></a>那么如何配置外部的中断</h4><p><img data-src=\"https://pic.imgdb.cn/item/64f355a9661c6c8e54de9017.png\"></p>\n<p>只需要把从GPIO到NVIC这一路的信号电路都打开即可</p>\n<p>第一步，配置RCC，把我们这里涉及到的外设时钟都打开，不打开时钟，外设是无法工作的</p>\n<p>第二步，配置GPIO口，选择我们的端口为输入模式</p>\n<p>第三步，配置AFIO，选择我们用的这一路GPIO，连接到后面的EXTI</p>\n<p>第四步，配置EXTI，选择边沿触发模式，不如上升沿，下降沿，或者双边沿</p>\n<p>第五步，配置NVIC，给我们这个中断一个合适的优先级别</p>\n<p>最后通过NVIC，外部中断的信号就能进入CPU了，这样，CPU才能收到中断信号来跳转到中断函数里面，执行中断程序</p>\n<p>那，这五步就是外部中断的配置流程</p>\n<p>1.首先第一步，配置时钟RCC</p>\n<pre><code class=\"c\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);\n</code></pre>\n<p>注意是RCC_APB2因为GPIOB是APB2的外设</p>\n<pre><code class=\"c\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);\n</code></pre>\n<p>当你不确定这个外设是接在哪个总线上的时候，我们可以跳转到这个函数的定义</p>\n<p>比如这个函数RCC_APB2这个函数，可以通过arg看到所有的这些外设类型</p>\n<pre><code class=\"c\">/**\n  * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.\n  * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.\n  *   This parameter can be any combination of the following values:\n  *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,\n  *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,\n  *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,\n  *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,\n  *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,\n  *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,\n  *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     \n  * @param  NewState: new state of the specified peripheral clock.\n  *   This parameter can be: ENABLE or DISABLE.\n  * @retval None\n  */\n</code></pre>\n<p><strong>接着还需要打开EXTI和NVIC的外设</strong>，但是这两个外设的时钟是一直打开的，所以不需要再次打开，</p>\n<p>NVIC不需要开启时钟的原因是因为，NVIC属于内核的外设，内核的外设都是不需要开启时钟的</p>\n<p>而RCC管的都是内核外的外设，所以管不到NVIC</p>\n<p>第二步，配置GPIO</p>\n<pre><code class=\"c++\">GPIO_InitTypeDef GPIO_InitStructure;//注释，这里的GPIO_InitStructure只是一个名称，也可以替换成为u，等等其他的名字\nGPIO_InitStructure.GPIO_Mode=GPIO_Mode_IPU;//这个输入模式，具体需要什么，需要到stm32手册中进行查询\nGPIO_InitStructure.GPIO_Pin=GPIO_Pin_14;\nGPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;\nGPIO_Init(GPIOB,&amp;GPIO_InitStructure);\n</code></pre>\n<p>接下来进行第三步，配置AFIO，AFIO并没有自己独立的库函数，它的对应函数在GPIO的文件中</p>\n<pre><code class=\"c++\">void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource);\n</code></pre>\n<p>然后在其中进行跳转，可以查到对应的</p>\n<pre><code class=\"c++\">/**\n  * @brief  Selects the GPIO pin used as EXTI Line.\n  * @param  GPIO_PortSource: selects the GPIO port to be used as source for EXTI lines.\n  *   This parameter can be GPIO_PortSourceGPIOx where x can be (A..G).\n  * @param  GPIO_PinSource: specifies the EXTI line to be configured.\n  *   This parameter can be GPIO_PinSourcex where x can be (0..15).\n  * @retval None\n  */\nvoid GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)\n&#123;\n  uint32_t tmp = 0x00;\n  /* Check the parameters */\n  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));\n  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));\n  \n  tmp = ((uint32_t)0x0F) &lt;&lt; (0x04 * (GPIO_PinSource &amp; (uint8_t)0x03));\n  AFIO-&gt;EXTICR[GPIO_PinSource &gt;&gt; 0x02] &amp;= ~tmp;\n  AFIO-&gt;EXTICR[GPIO_PinSource &gt;&gt; 0x02] |= (((uint32_t)GPIO_PortSource) &lt;&lt; (0x04 * (GPIO_PinSource &amp; (uint8_t)0x03)));\n&#125;\n</code></pre>\n<p>通过最后两行，我们可以发现，其实，这个函数就是配置AFIO的函数</p>\n<p>如果你想配置PB14号口为中断口，那么我们就可以这样写</p>\n<pre><code class=\"c++\">GPIO_EXTILineConfig(GPIO_PortSourceGPIOB,GPIO_PinSource14);\n</code></pre>\n<h4 id=\"第四步，配置EXTI文件\"><a href=\"#第四步，配置EXTI文件\" class=\"headerlink\" title=\"第四步，配置EXTI文件\"></a>第四步，配置EXTI文件</h4><p>首先先来学习一下EXTI的基本库函数</p>\n<pre><code class=\"c++\">void EXTI_DeInit(void);//调用它，就可以把EXTI的配置都清除，恢复成上电默认的状态\nvoid EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct);//可以根据这个结构体里的函数配置EXTI外设，初始化EXTI主要用的就是这个函数，使用方法与GPIO_Init等同对比就行 \nvoid EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct);\nvoid EXTI_GenerateSWInterrupt(uint32_t EXTI_Line);\nFlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line);\nvoid EXTI_ClearFlag(uint32_t EXTI_Line);\nITStatus EXTI_GetITStatus(uint32_t EXTI_Line);\nvoid EXTI_ClearITPendingBit(uint32_t EXTI_Line);\n</code></pre>\n<p>代码书写</p>\n<p>我们首先肯定得初始化外设</p>\n<pre><code class=\"C++\">/**\n  * @brief  Initializes the EXTI peripheral according to the specified\n  *         parameters in the EXTI_InitStruct.\n  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure\n  *         that contains the configuration information for the EXTI peripheral.\n  * @retval None\n  */\nvoid EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)\n</code></pre>\n<p>然后根据提示，进行相关参数的配置</p>\n<p>在文档中查找相关词EXTI_InitTypeDef，可以得到如下的代码</p>\n<pre><code class=\"c++\">    EXTI_InitTypeDef a;\n    a.EXTI_Line=EXTI_Line14;//这四项直接在定义完a后会直接出来\n    a.EXTI_LineCmd=ENABLE;\n    a.EXTI_Mode=EXTI_Mode_Interrupt;\n    a.EXTI_Trigger=EXTI_Trigger_Falling;\n    EXTI_Init(&amp;a);//初始化a去\n</code></pre>\n<p>在全局寻找EXTI_Line，<strong>第一个参数</strong></p>\n<pre><code class=\"c\">\n#define EXTI_Line0       ((uint32_t)0x00001)  /*!&lt; External interrupt line 0 */\n#define EXTI_Line1       ((uint32_t)0x00002)  /*!&lt; External interrupt line 1 */\n#define EXTI_Line2       ((uint32_t)0x00004)  /*!&lt; External interrupt line 2 */\n#define EXTI_Line3       ((uint32_t)0x00008)  /*!&lt; External interrupt line 3 */\n#define EXTI_Line4       ((uint32_t)0x00010)  /*!&lt; External interrupt line 4 */\n#define EXTI_Line5       ((uint32_t)0x00020)  /*!&lt; External interrupt line 5 */\n#define EXTI_Line6       ((uint32_t)0x00040)  /*!&lt; External interrupt line 6 */\n#define EXTI_Line7       ((uint32_t)0x00080)  /*!&lt; External interrupt line 7 */\n#define EXTI_Line8       ((uint32_t)0x00100)  /*!&lt; External interrupt line 8 */\n#define EXTI_Line9       ((uint32_t)0x00200)  /*!&lt; External interrupt line 9 */\n#define EXTI_Line10      ((uint32_t)0x00400)  /*!&lt; External interrupt line 10 */\n#define EXTI_Line11      ((uint32_t)0x00800)  /*!&lt; External interrupt line 11 */\n#define EXTI_Line12      ((uint32_t)0x01000)  /*!&lt; External interrupt line 12 */\n#define EXTI_Line13      ((uint32_t)0x02000)  /*!&lt; External interrupt line 13 */\n#define EXTI_Line14      ((uint32_t)0x04000)  /*!&lt; External interrupt line 14 */\n#define EXTI_Line15      ((uint32_t)0x08000)  /*!&lt; External interrupt line 15 */\n#define EXTI_Line16      ((uint32_t)0x10000)  /*!&lt; External interrupt line 16 Connected to the PVD Output */\n#define EXTI_Line17      ((uint32_t)0x20000)  /*!&lt; External interrupt line 17 Connected to the RTC Alarm event */\n#define EXTI_Line18      ((uint32_t)0x40000)  /*!&lt; External interrupt line 18 Connected to the USB Device/USB OTG FS\n                                                   Wakeup from suspend event */                                    \n#define EXTI_Line19      ((uint32_t)0x80000)  /*!&lt; External interrupt line 19 Connected to the Ethernet Wakeup event */\n                                          \n</code></pre>\n<p><strong>第二个参数</strong></p>\n<pre><code class=\"c\">FunctionalState EXTI_LineCmd;     /*!&lt; Specifies the new state of the selected EXTI lines.\n                                         This parameter can be set either to ENABLE or DISABLE */ \n\n开始中断还是不开启，ENABLE还是DISABLE\n</code></pre>\n<p><strong>第三个参数</strong></p>\n<pre><code class=\"c\">\ntypedef enum\n&#123;\n  EXTI_Mode_Interrupt = 0x00,\n  EXTI_Mode_Event = 0x04\n&#125;EXTIMode_TypeDef;\n</code></pre>\n<p>是外部中断还是事件中断，这里我们采用外部中断</p>\n<p><strong>第四个参数</strong></p>\n<pre><code class=\"c\">/** \n  * @brief  EXTI Trigger enumeration  \n  */\n\ntypedef enum\n&#123;\n  EXTI_Trigger_Rising = 0x08,\n  EXTI_Trigger_Falling = 0x0C,  \n  EXTI_Trigger_Rising_Falling = 0x10\n&#125;EXTITrigger_TypeDef;\n</code></pre>\n<p>这里代表的是选择上升沿触发，下降沿触发，还是上升下降沿都触发</p>\n<p>到此为止，外部中断配置完成，第四步结束</p>\n<pre><code class=\"c\">    EXTI_InitTypeDef a;\n    a.EXTI_Line=EXTI_Line14;\n    a.EXTI_LineCmd=ENABLE;\n    a.EXTI_Mode=EXTI_Mode_Interrupt;\n    a.EXTI_Trigger=EXTI_Trigger_Falling;\n    EXTI_Init(&amp;a);\n</code></pre>\n<h5 id=\"第五步，配置NVIC外设\"><a href=\"#第五步，配置NVIC外设\" class=\"headerlink\" title=\"第五步，配置NVIC外设\"></a>第五步，配置NVIC外设</h5><p>因为NVIC属于stm32内核，所以其库函数，被分配到杂项misc中</p>\n<p>先学习一下NVIC的库函数</p>\n<pre><code class=\"c\">void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);\n</code></pre>\n<p>这个函数用来配置中断分组的，参数是中断分组的方式</p>\n<pre><code class=\"c\">void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);\n</code></pre>\n<p>根据NVIC结构体中指定的参数初始化NVIC</p>\n<p>跳转</p>\n<pre><code class=\"c\">NVIC_PriorityGroupConfig\n</code></pre>\n<p>查到</p>\n<pre><code class=\"c\">/**\n  * @brief  Configures the priority grouping: pre-emption priority and subpriority.\n  * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. \n  *   This parameter can be one of the following values:\n  *     @arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority\n  *                                4 bits for subpriority\n  *     @arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority\n  *                                3 bits for subpriority\n  *     @arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority\n  *                                2 bits for subpriority\n  *     @arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority\n  *                                1 bits for subpriority\n  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority\n  *                                0 bits for subpriority\n  * @retval None\n  */\nvoid NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)\n&#123;\n  /* Check the parameters */\n  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));\n  \n  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */\n  SCB-&gt;AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;\n&#125;\n\n//pre-emption priority代表的是抢占优先级，subpriority代表的是相应优先级\n</code></pre>\n<p>这里我们选择第二组，两位响应，两位抢占，稍微平均一点</p>\n<p>即配置成</p>\n<pre><code class=\"c++\">void NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);\n</code></pre>\n<p>然后就是经典操作了</p>\n<p>对NVIC的初始化</p>\n<pre><code class=\"c\">    NVIC_InitTypeDef b;\n    b.NVIC_IRQChannel= ;\n    b.NVIC_IRQChannelCmd= ;\n    b.NVIC_IRQChannelPreemptionPriority= ;\n    b.NVIC_IRQChannelSubPriority=  ;\n    NVIC_Init(&amp;b);\n</code></pre>\n<p>接下来就是配置参数</p>\n<p>跳转定义，全局工程文件搜索IRQn_Type</p>\n<p>根据我们选择芯片的种类，选择对应的中断函数</p>\n<pre><code class=\"c\">#ifdef STM32F10X_MD\n  ADC1_2_IRQn                 = 18,     /*!&lt; ADC1 and ADC2 global Interrupt                       */\n  USB_HP_CAN1_TX_IRQn         = 19,     /*!&lt; USB Device High Priority or CAN1 TX Interrupts       */\n  USB_LP_CAN1_RX0_IRQn        = 20,     /*!&lt; USB Device Low Priority or CAN1 RX0 Interrupts       */\n  CAN1_RX1_IRQn               = 21,     /*!&lt; CAN1 RX1 Interrupt                                   */\n  CAN1_SCE_IRQn               = 22,     /*!&lt; CAN1 SCE Interrupt                                   */\n  EXTI9_5_IRQn                = 23,     /*!&lt; External Line[9:5] Interrupts                        */\n  TIM1_BRK_IRQn               = 24,     /*!&lt; TIM1 Break Interrupt                                 */\n  TIM1_UP_IRQn                = 25,     /*!&lt; TIM1 Update Interrupt                                */\n  TIM1_TRG_COM_IRQn           = 26,     /*!&lt; TIM1 Trigger and Commutation Interrupt               */\n  TIM1_CC_IRQn                = 27,     /*!&lt; TIM1 Capture Compare Interrupt                       */\n  TIM2_IRQn                   = 28,     /*!&lt; TIM2 global Interrupt                                */\n  TIM3_IRQn                   = 29,     /*!&lt; TIM3 global Interrupt                                */\n  TIM4_IRQn                   = 30,     /*!&lt; TIM4 global Interrupt                                */\n  I2C1_EV_IRQn                = 31,     /*!&lt; I2C1 Event Interrupt                                 */\n  I2C1_ER_IRQn                = 32,     /*!&lt; I2C1 Error Interrupt                                 */\n  I2C2_EV_IRQn                = 33,     /*!&lt; I2C2 Event Interrupt                                 */\n  I2C2_ER_IRQn                = 34,     /*!&lt; I2C2 Error Interrupt                                 */\n  SPI1_IRQn                   = 35,     /*!&lt; SPI1 global Interrupt                                */\n  SPI2_IRQn                   = 36,     /*!&lt; SPI2 global Interrupt                                */\n  USART1_IRQn                 = 37,     /*!&lt; USART1 global Interrupt                              */\n  USART2_IRQn                 = 38,     /*!&lt; USART2 global Interrupt                              */\n  USART3_IRQn                 = 39,     /*!&lt; USART3 global Interrupt                              */\n  EXTI15_10_IRQn              = 40,     /*!&lt; External Line[15:10] Interrupts                      */\n  RTCAlarm_IRQn               = 41,     /*!&lt; RTC Alarm through EXTI Line Interrupt                */\n  USBWakeUp_IRQn              = 42      /*!&lt; USB Device WakeUp from suspend through EXTI Line Interrupt */  \n#endif /* STM32F10X_MD */  \n</code></pre>\n<p>配置第一个参数</p>\n<pre><code class=\"c\">b.NVIC_IRQChannel=EXTI15_10_IRQn ;\n</code></pre>\n<p>配置第二个参数</p>\n<pre><code class=\"c\">FunctionalState NVIC_IRQChannelCmd;         /*!&lt; Specifies whether the IRQ channel defined in NVIC_IRQChannel\n                                                   will be enabled or disabled. \n                                                   This parameter can be set either to ENABLE or DISABLE */ \n</code></pre>\n<p>负责确定中断通道是使能还是失能，这里我们选择ENABLE</p>\n<p>配置第三个参数</p>\n<pre><code class=\"c\">NVIC_IRQChannelPreemptionPriority\n这个是负责的抢占优先级\nNVIC_IRQChannelSubPriority\n    这个是负责相应优先级\n</code></pre>\n<p>对于当前我们的这种情况，因为只有一种中断，所以我们采用参数可以 随便一点，只有当有很多个中断的时候，才会出现拥挤</p>\n<pre><code class=\"c\">    b.NVIC_IRQChannelPreemptionPriority=1 ;\n    b.NVIC_IRQChannelSubPriority= 1 ;\n</code></pre>\n<p>高电平(GPIO_PIN_SET)、低电平(GPIO_PIN_RESET)。</p>\n<p>那么中断程序应该放在哪里呢，这就需要我们写一个中断函数</p>\n<p>在STM32中，中断函数的名称都是固定的，每个中断通道都对应一个中断函数</p>\n<p>中断函数的名字，我们可以参照一下启动文件，在其中找到中断函数</p>\n<pre><code class=\"c\">EXTI15_10_IRQHandler\n</code></pre>\n<p>注意，这个中断函数一定要书写正确，因为如果中断函数写错了，那么程序就无法进入中断了</p>\n<pre><code class=\"c\">void EXTI15_10_IRQHandler(void)\n&#123;\n        if(EXTI_GetITStatus(EXTI_Line14)==1)//获取一下是哪个中断置为1了\n        &#123;\n            EXTI_ClearITPendingBit(EXTI_Line14);//这里需要清除一下中断，因为如果中断函数不清除的话，会一直在中断函数里面循环。如果你不清楚中断标志位，那么它就会一直申请中断。这样程序就会不断相应中断，执行中断程序，那么程序就会卡死在中断程序里面了，所以我们每次中断程序结束后，都应该清除一下标志位\n            num++;\n        &#125;\t\t\n    \n&#125;\t\n</code></pre>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E5%9B%BA%E4%BB%B6%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E5%9B%BA%E4%BB%B6%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "title": "stm32定时器外设时钟",
            "date_published": "2023-09-02T07:28:00.000Z",
            "content_html": "<pre><code class=\"c\">void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState);\nvoid RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);\nvoid RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState);\n</code></pre>\n<p>定时器函数</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210427151456665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjI5NTYz,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);</p>\n<p>NewState参数是一个枚举类型，用于指示要使能或禁用指定的外设时钟。可选值为：ENABLE和DISABLE。</p>\n<p><strong>例1-1</strong>：以下代码片段用于使能GPIOA和USART1外设的时钟：</p>\n<pre><code class=\"text\">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_USART1, ENABLE);\n</code></pre>\n<p>在操作外设之前，必须先使能其时钟。</p>\n<h3 id=\"2、引脚配置\"><a href=\"#2、引脚配置\" class=\"headerlink\" title=\"2、引脚配置\"></a>2、引脚配置</h3><p>GPIO_InitTypeDef结构体是STM32固件库中提供给开发者的一个方便、易用的工具，当我们要配置一个GPIO引脚时，需要设置该引脚的多个参数，如引脚方向、输出类型、速度、上拉&#x2F;下拉模式等，这些参数需要通过寄存器进行设置。而寄存器的操作比较繁琐，容易出错，因此STM32固件库提供了GPIO_InitTypeDef结构体，它封装了对GPIO外设寄存器的访问，使得开发者可以通过设置结构体的成员变量，来快速、简单地配置GPIO引脚的多个参数。</p>\n<p>先配置GPIO_InitTypeDef结构体；结构体的定义如下：</p>\n<p>这个是已经配置好的模式</p>\n<pre><code class=\"text\">typedef struct\n&#123;\n  uint16_t GPIO_Pin;             /*!&lt; Specifies the GPIO pins to be configured.\n                                      This parameter can be any value of @ref GPIO_pins_define */\n\n  GPIOSpeed_TypeDef GPIO_Speed;  /*!&lt; Specifies the speed for the selected pins.\n                                      This parameter can be a value of @ref GPIOSpeed_TypeDef */\n\n  GPIOMode_TypeDef GPIO_Mode;    /*!&lt; Specifies the operating mode for the selected pins.\n                                      This parameter can be a value of @ref GPIOMode_TypeDef */\n&#125;GPIO_InitTypeDef;\n</code></pre>\n<p>GPIO_Pin表示要配置的GPIO引脚，可以使用逻辑或运算符“|”将多个引脚组合在一起。</p>\n<p>GPIO_Mode表示GPIO引脚的工作模式。</p>\n<table>\n<thead>\n<tr>\n<th>输入</th>\n<th></th>\n<th>输出</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GPIO_Mode_AIN</td>\n<td>模拟输入</td>\n<td>GPIO_Mode_Out_OD</td>\n<td>普通开漏输出</td>\n</tr>\n<tr>\n<td>GPIO_Mode_IN_FLOATING</td>\n<td>浮空输入</td>\n<td>GPIO_Mode_Out_PP</td>\n<td>普通推挽输出</td>\n</tr>\n<tr>\n<td>GPIO_Mode_IPU</td>\n<td>上拉输入</td>\n<td>GPIO_Mode_AF_OD</td>\n<td>复用推挽输出</td>\n</tr>\n<tr>\n<td>GPIO_Mode_IPD</td>\n<td>下拉输入</td>\n<td>GPIO_Mode_AF_PP</td>\n<td>复用开漏输出</td>\n</tr>\n</tbody></table>\n<p>GPIO_Speed表示GPIO引脚的速度，可选值为低速（GPIO_Speed_2MHz）、中速（GPIO_Speed_10MHz）或高速（GPIO_Speed_50MHz）。</p>\n<p>一般默认为普通推挽输出</p>\n<p><strong>例2-1：</strong>将PA0和PA1两个引脚配置为50MHz的推挽输出，并应用于GPIOA外设。</p>\n<pre><code class=\"c\">GPIO_InitTypeDef GPIO_InitStructure;//这个GPIO_InitStructure就是一个结构体的名称，你也可以改为u,然后后面的名称对应都变成u就行\nGPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;\nGPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;\nGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;\nGPIO_Init(GPIOA, &amp;GPIO_InitStructure);\n</code></pre>\n<p>以上代码将GPIOA的PA0引脚输出低&#x2F;高电平，即将PA0引脚对应的寄存器的输出位设置为0&#x2F;1。</p>\n<p>注意：在操作GPIO引脚之前，必须先配置其为输出模式。否则，GPIO引脚将不能输出电平。</p>\n<p>*注意：在很多开发板上，GPIO输出控制LED等外设的亮灭，常常使用了PNP型晶体管或是开漏输出方式。这种方式下，当GPIO引脚输出低电平时，PNP型晶体管或是开漏输出器件会通电，外设（如LED）被点亮，而当GPIO引脚输出高电平时，PNP型晶体管或是开漏输出器件不通电，外设（如LED）被熄灭。</p>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/stm32%206-1Tim%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD/",
            "url": "https://bangdexuanyuan.github.io/stm32/stm32%206-1Tim%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD/",
            "title": "定时器学习",
            "date_published": "2023-09-02T02:32:00.000Z",
            "content_html": "<h4 id=\"stm32-6-1Tim定时器中断\"><a href=\"#stm32-6-1Tim定时器中断\" class=\"headerlink\" title=\"stm32 6-1Tim定时器中断\"></a>stm32 6-1Tim定时器中断</h4><p>stm32拥有16位计数器，预分频器，自动重装寄存器的实际单元。如果预分频器和自动重装寄存器都设置最大，2的16次方，因为2的16次方为66536</p>\n<p>在72MHz计数时钟下可以实现最大59.65s的定时</p>\n<p>这部分之后再听一遍</p>\n<p>不仅具有基本的定时中断功能，而且还包括内外时钟源的选择，输入捕获，输出比较，编码器接口，主从触发模式等多种功能</p>\n<p>![](C:\\all study document\\Microcontroller study\\32\\图片笔记\\Snipaste_2023-08-24_22-05-54.png)</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/650fb062c458853aef4a4114.png\"></p>\n<p>时基单元：由自动重装寄存器，预分频器与CNT计数器组成，预分频器之前，连接的就是基准计数时钟的输入，最终来到了控制器的这个位置，由于基本定时器只能选择内部时钟，所以你可以直接认为这根线直接连接到了输入端这里，也就是内部时钟CK_INT，内部时钟的来源是RCC的TIMxCLK，这里的频率一般是内部系统的主频72MHz</p>\n<p>我们看时基单元，它可以首先对输入进来的72MHz计数时钟进行预分频，比如这个寄存器写0，就是不分频，或者说是1分频，这个时候的输出频率等于输入频率等于72MHz，如果预分频器写1，就是2分频，那么输出的频率就为36MHz，如果写2，就是三分频，输出频率等于72&#x2F;3等于24MHz，以此类推</p>\n<p>实际的分频系数等于预分频器的系数加一，这个预分频器是16位的，所以最大值可以写65535，也就是最大65536分频的，这就是预分频器，就是对输入的频率提前进行预分频的操作</p>\n<p>然后就是计数器，就是对预分频后的计数时钟进行计数，计数时钟每来一个上升沿，计数时钟的值就加一，这个计数器也是16位的，可以从0计数到65535；如果再加的话，计数器就会回到零，重新进行计数，所以计数器的值在运行过程中会不断进行自增运行，当自增达到目标值的时候，产生中断，就完成了定时的任务。</p>\n<p>所以现在还需要一个存储目标值函数的计数器，就是自动重装载寄存器，自动重装载计数器也是16位的，它存储的就是我们的计数目标，在运行的过程中，计数值不断增加，自动重装值是固定的目标，当计数值等于重装计数器的值的时候，也就是即使时间到了，那它就会产生一个中断信号，并且清零计数器</p>\n<p>在这里有一个向上的箭头，表示这里会产生一个中断信号，像这种计数值等于重装值产生的中断，我们一般称之为更新中断，这个更新中断之后，就会通往NVIC，我们再配置好NVIC的定时器通道，那定时器的更新中断就能得到CPU的响应了，这里向下的箭头，代表这里会产生一个事件，这里对应的事件，就叫做更新事件</p>\n",
            "tags": [
                "单片机"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/life/hello-world/",
            "url": "https://bangdexuanyuan.github.io/life/hello-world/",
            "title": "hello world",
            "date_published": "2023-09-02T02:00:00.000Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "哈尔滨生活"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/life/%E9%9D%92%E5%B2%9B%E4%B9%8B%E6%97%85/",
            "url": "https://bangdexuanyuan.github.io/life/%E9%9D%92%E5%B2%9B%E4%B9%8B%E6%97%85/",
            "title": "青岛之旅",
            "date_published": "2023-09-02T02:00:00.000Z",
            "content_html": "<p>2023年8月7~9，和zjx和lh去了趟从没有去过得青岛，真的，碰见高中同学，虽然长时间没有联系，还是原来的感觉。</p>\n<p>去了海军博物馆</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f2d252661c6c8e54b43cb9.jpg\"></p>\n<p>去了小麦岛，去了鹿儿岛</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f2d24a661c6c8e54b43172.jpg\"></p>\n<p>去了栈桥，人是真的多嘞</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f2d2fd661c6c8e54b4e2da.jpg\"></p>\n<p>还吃了好吃的鲅鱼饺子，墨鱼丸，啤酒成为那段时间的专属</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f2d316661c6c8e54b4ea1d.jpg\"></p>\n<p>记得凌晨3，4点的火车硬座，还有LOL的solo的时候，zjx的破防，这是一段短暂而小有遗憾的时光。</p>\n",
            "tags": [
                "青岛生活"
            ]
        }
    ]
}