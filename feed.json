{
    "version": "https://jsonfeed.org/version/1",
    "title": "null",
    "description": "欢迎大家来到邦的轩辕的小屋，这里会分享everything",
    "home_page_url": "https://bangdexuanyuan.github.io",
    "items": [
        {
            "id": "https://bangdexuanyuan.github.io/under%20water%20robot/%E4%B8%B2%E5%8F%A3%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/",
            "url": "https://bangdexuanyuan.github.io/under%20water%20robot/%E4%B8%B2%E5%8F%A3%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE/",
            "title": "STM32串口传输数据",
            "date_published": "2024-03-21T10:30:00.000Z",
            "content_html": "<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>T</mi><mi>M</mi><mn>32</mn><mi>C</mi><mi>U</mi><mi>B</mi><mi>E</mi><mi>M</mi><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">STM32CUBEMX</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> 利用串口传输数据</p>\n<p>1. 串口的发送与接收</p>\n<ul>\n<li>\n<p>HAL_UART_Transmit (); 串口发送数据，使用超时管理机制</p>\n</li>\n<li>\n<p>HAL_UART_Receive (); 串口接收数据，使用超时管理机制</p>\n</li>\n<li>\n<p>HAL_UART_Transmit_IT (); 串口中断模式发送</p>\n</li>\n<li>\n<p>HAL_UART_Receive_IT (); 串口中断模式接收</p>\n</li>\n<li>\n<p>HAL_UART_Transmit_DMA (); 串口 DMA 模式发送</p>\n</li>\n<li>\n<p>HAL_UART_Transmit_DMA (); 串口 DMA 模式接收</p>\n</li>\n</ul>\n<pre><code class=\"language-c++\">HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)\n\n</code></pre>\n<p>功能：<strong>串口</strong>发送指定长度的数据。如果超时没发送完成，则不再发送，返回超时标志（HAL_TIMEOUT）。</p>\n<pre><code>UART_HandleTypeDef*huart 例如huart1就是其中一个别名\n</code></pre>\n</li>\n</ul>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/study/hello-world/",
            "url": "https://bangdexuanyuan.github.io/study/hello-world/",
            "title": "英语论文学习",
            "date_published": "2024-03-13T10:30:00.000Z",
            "content_html": "<p>英语论文写作的时候，一般由以下的结构组成：</p>\n<ul>\n<li><strong>title,author,abstract,keywords</strong></li>\n</ul>\n<p>Descriptive (说明性的) information that lets readers search for an article.</p>\n<ul>\n<li><strong>Information</strong></li>\n</ul>\n<p>What is the context for this project?</p>\n<p>How does it fit in with other research on the topic?</p>\n<p>What is the research question?</p>\n<p>总结：以上说的是 WHY 部分</p>\n<ul>\n<li><strong>Methods</strong></li>\n</ul>\n<p>What did the author do to answer the research question?</p>\n<p>总结：以上部分说的是 HOW 部分</p>\n<ul>\n<li><strong>Results</strong></li>\n</ul>\n<p>What was the answer to the question?</p>\n<p>This is often shown in tables and figures.</p>\n<p>总结：以上部分说的是 WHAT</p>\n<ul>\n<li><strong>Discussion/Conclusion</strong></li>\n</ul>\n<p>What is the significance of this project?</p>\n<p>How does it fit in with what else is known about the topic?</p>\n<p>总结：以上部分说的是 SO WHAT 部分</p>\n<ul>\n<li><strong>References</strong>（参考文献部分）</li>\n</ul>\n",
            "tags": [
                "英语"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E6%97%A0%E7%BA%BF%E9%80%9A%E8%AE%AF%E4%B8%8B%E8%BD%BD%E5%99%A8/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E6%97%A0%E7%BA%BF%E9%80%9A%E8%AE%AF%E4%B8%8B%E8%BD%BD%E5%99%A8/",
            "title": "无线下载器",
            "date_published": "2024-03-10T11:40:00.000Z",
            "content_html": "<p>无线通讯：</p>\n<p>无线空中传输速率，指的是无线模块在空中传输的频率。</p>\n<p>2M：速度最快，此时调试器的性能最大，最快</p>\n<p>1M：速度会减慢，但是减慢的速度并不多，可以稍微增加一点距离，但是增加的不多。</p>\n<p>250K：距离增加的非常多，但是调试器速度下降也比较多。建议远距离的可以使用。</p>\n<p>无限地址的设置：</p>\n<p>内部无线模块的地址，接收端和发送端的地址必须一样。</p>\n<p><strong>唯一使用的注意事项：</strong></p>\n<p>在 keil 中，我们点击魔术棒按钮，然后在 Debug 这个界面里面，在右侧界面，把 stlink 的选项设置为 CMSIS-DAP-Debugger。</p>\n<p>之后点击 settings 按钮，通过观察右侧的 SW Device 看看对于单片机的类型，是否进行了识别。</p>\n<p>然后把 CMSIS-DAP-JTAG/SW Adapter 这个选项修改成第二行。</p>\n<p>并把端口的类型改成 SW 类型。</p>\n<p>**tips：** 使用的时候，我们接收端直接通过 USB 与电脑相连，另一个接收端，通过 SW，采用杜邦线和目标单片机进行相连。</p>\n<p>需要注意的是，我们接收端的供电采用充电宝或者自己画板子的时候，可以加一个供电的 USB 口。</p>\n<p>另外，自己于 2024.3.10 日调试的时候，因为单片机的问题，也曾出现过，检测不到单片机的问题。</p>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/PWM/",
            "url": "https://bangdexuanyuan.github.io/stm32/PWM/",
            "title": "",
            "date_published": "2023-12-18T14:13:26.699Z",
            "content_html": "<p>PWM 参数计算</p>\n<p>时基单元：</p>\n<p><img data-src=\"\" alt=\"\"></p>\n<p>![Snipaste_2023-12-18_21-35-40](C:\\all study document\\Microcontroller study\\32\\ 图片笔记 \\Snipaste_2023-12-18_21-35-40.png)</p>\n<p>跟 Keil51 一样，先进行预分频。</p>\n<p>自动重装器：设置一个值 ARR，每次计数从 0 开始，计数到 ARR 后清零，计数 ARR+1 次</p>\n<p>计数器 cnt：后根据内部时钟进行计数，每次和 CCR 捕获比较器进行比较；当 CNT&lt;CCR 时，电平置为有效电平；同理，当 CNT&gt;=CCR 时，置为无效电平，即为零；之后根据占空比进行电压的输出。</p>\n<p>keil 中代码的讲述</p>\n<pre><code>void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1);\nvoid TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2);\nvoid TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3);\nvoid TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4);\n</code></pre>\n<p>这个函数用来改变通道的占空比</p>\n<pre><code>void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);\nvoid TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);\nvoid TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);\nvoid TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);\n</code></pre>\n<p>这个是用结构体来初始化输出</p>\n<hr>\n<p>一。舵机不听指挥乱动</p>\n<p>没有与单片机共地</p>\n<p>舵机有三条线，分别是正负极和信号线 (用来输入 PWM 信号)，因为舵机所需要的驱动电压比较大，一般在 6v 往上了，一般的单片机供电无法驱动舵机，就需要单独的外接电源供电，这时注意舵机地线不仅要和外接电源负极相连，还要与单片机共地，不然 PWM 信号输入后舵机会不听使唤乱动，因为 PWM 信号由单片机输入，舵机与单片机没有供地，舵机就没有参考电平，就会乱转。</p>\n<p>PWM 需要和单片机共地，事实确实是这样</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%802/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%802/",
            "title": "",
            "date_published": "2023-10-04T10:57:34.951Z",
            "content_html": "<p>电路基础</p>\n<ul>\n<li>理想电压源阻抗为零，原因为：</li>\n</ul>\n<p>理想电压源 无论有多少电流流过都不会改变两端的电势差 ，所以内阻理想为零</p>\n<ul>\n<li>理想电流源阻抗为正无穷，原因如下：</li>\n</ul>\n<p><img data-src=\"https://pic.imgdb.cn/item/651d2bb1c458853aef9aa5d4.jpg\" alt=\"\"></p>\n<p>而理想化就是让他们两个的效率达到 100%<br>\n 那么对于电流源，效率最大就是让电流全流过工作电阻，即负载电阻 R，那么仅当内阻 Ro 为无穷大时能满足，此时为理想电流源。<br>\n同理，对于电压源，效率最大是把电压全加载负载电阻 R 两端，那么仅当内阻 Ro 为 0 时，Ro 不能分到电压，电压全分给 R，此时为理想电压源。</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/",
            "title": "",
            "date_published": "2023-09-14T08:25:48.744Z",
            "content_html": "<p>电路基础</p>\n<h5 id=\"明白什么是参考方向\"><a class=\"markdownIt-Anchor\" href=\"#明白什么是参考方向\">#</a> 明白什么是参考方向</h5>\n<p>首先，对于一个电路，一开始拿到手，我们是并不知道这个电路的电流和电压方向，那么就需要我们首先假定，假定电流一个流向，假定电压一个方向，也就是设定了一个参考方向</p>\n<p>那么，如果我们电流算出来了一个数，比如<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>I</mi><mi>A</mi></msub><mo>=</mo><mo>−</mo><mn>0.2</mn><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">I_A=-0.2A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">A</span></span></span></span>，就说明这个电流的实际方向，与参考方向是相反的，电压同理。那么很自然就会想到，电压电流，两个对象，一共就有 2*2 中组合方案，有参考方向相同的，就有参考方向相反的。于是我们引入关联与非关联，我们称电流的参考方向与电压的参考方向相同的，叫做关联，反之，称之为非关联。</p>\n<p>如果电压与电流关联，那么我们可</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/life/%E7%81%AB%E8%BD%A6%E9%A9%B6%E5%90%91%E4%BA%91%E5%A4%96%EF%BC%8C%E6%A2%A6%E5%AE%89%E9%AD%82%E4%BA%8E%E4%B9%9D%E9%9C%84/",
            "url": "https://bangdexuanyuan.github.io/life/%E7%81%AB%E8%BD%A6%E9%A9%B6%E5%90%91%E4%BA%91%E5%A4%96%EF%BC%8C%E6%A2%A6%E5%AE%89%E9%AD%82%E4%BA%8E%E4%B9%9D%E9%9C%84/",
            "title": "火车驶向云外 梦安魂于九霄",
            "date_published": "2023-09-13T02:39:00.000Z",
            "content_html": "<p>我那些残梦，灵异九霄。徒忙漫奋斗，满目沧愁。</p>\n<p>在滑翔之后，完美坠落。在四维宇宙，眩目遨游。</p>\n<p>我那些烂曲，流窜九州。云游魂飞奏，音愤符吼。</p>\n<p>在宿命身后，不停挥手。视死如归仇，毫无保留。</p>\n<p>黑色的不是夜晚，是漫长的孤单。看脚下一片黑暗，望头顶星光璀璨。</p>\n<p>叹世万物皆可盼，唯真爱最短暂。失去的永不复返，世守恒而今倍还。</p>\n<p>摇旗呐喊的热情，携光阴渐远去。人世间悲喜烂剧，昼夜轮播不停。</p>\n<p>纷飞的滥情男女，情仇爱恨别离。一代人终将老去，但总有人正年轻。</p>\n",
            "tags": [
                "音乐"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/Tim%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AD%A6%E4%B9%A0/",
            "url": "https://bangdexuanyuan.github.io/stm32/Tim%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AD%A6%E4%B9%A0/",
            "title": "",
            "date_published": "2023-09-06T14:18:20.175Z",
            "content_html": "<p>Tim 定时器学习</p>\n<p>定时器可以对输入的时钟进行计数，并在计数达到设定值的时候触发中断。当这个计数器的输入是一个准确可靠的基准时钟时，那它在对这个基准时钟进行计数的过程，实际上就是计时的过程</p>\n<p>16 位计数器、预分频器、自动重装寄存器的时基单元，在 72MHz 计数时钟下可以实现最大 59.65s 的定时。</p>\n<p>这里的计数器其实就是用来执行计数定时的一个寄存器，每来一个时钟，计数器加 1</p>\n<p>预分频器，可以对计数器的时钟进行分频，让这个计数更加灵活。</p>\n<p>自动重装寄存器就是计数的目标值，就是我想到计多少个时钟申请中断。</p>\n<p>这些寄存器构成了定时器最核心的部分，我们把这一块电路，成为时基单元。</p>\n<p>那这个时基单元里面的计数器，预分频器，自动重装寄存器都是 16 位。</p>\n<p>2 的 16 次方时 65536，也就是如果预分频器设置最大，自动重装也设置最大</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>编号</th>\n<th>总线</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>高级定时器</td>\n<td>TIM1、TIM8</td>\n<td>APB2</td>\n<td>拥有通用定时器全部功能，并额外具有重复计数器、死区生成、互补输出、刹车输入等功能</td>\n</tr>\n<tr>\n<td>通用定时器</td>\n<td>TIM2、TIM3、TIM4、TIM5</td>\n<td>APB1</td>\n<td>拥有基本定时器全部功能，并额外具有内外时钟源选择、输入捕获、输出比较、编码器接口、主从触发模式等功能</td>\n</tr>\n<tr>\n<td>基本定时器</td>\n<td>TIM6、TIM7</td>\n<td>APB1</td>\n<td>拥有定时中断、主模式触发 DAC 的功能</td>\n</tr>\n</tbody>\n</table>\n<p>STM32F103C8T6 定时器资源：TIM1、TIM2、TIM3、TIM4</p>\n<p>并额外具有重复计数器、死区生成、互补输出、刹车输入等功能，</p>\n",
            "tags": []
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/EXTI%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/",
            "url": "https://bangdexuanyuan.github.io/stm32/EXTI%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/",
            "title": "EXTI外部中断",
            "date_published": "2023-09-02T16:21:00.000Z",
            "content_html": "<h4 id=\"exti外部中断\"><a class=\"markdownIt-Anchor\" href=\"#exti外部中断\">#</a> EXTI 外部中断</h4>\n<p>NVIC 的名字叫做，嵌套中断向量控制器</p>\n<p>NVIC 的出现，就是为了当 CPU 的秘书，如果我们把所有的中断都接在 CPU 上，CPU 对应位置就得进行适配，设计上就很麻烦。并且如果很多中断进行申请，造成了拥堵，CPU 也会很难搞，因为 CPU 还是主要负责进行运算的，中断分配的任务就放到别的地方吧。</p>\n<p>NVIC 有很多个输入口，你有多少个中断都可以接过来</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f35828661c6c8e54dee9d2.png\" alt=\"\"></p>\n<p>NVIC 只有一个输出口，直接接到 CPU 上</p>\n<p>stm32 有 68 个可屏蔽中断通道，包含 EXTI、TIM、ADC、USART、SPI、I2C、RTC 等多个外设使用 NVIC 统一管理中断，每个中断通道都拥有 16 个可编程的优先等级，可对优先级进行分组，进一步设置抢占优先级和响应优先级</p>\n<p>NVIC 的中断优先级由优先级寄存器的 4 位（0~15）决定，这 4 位可以进行切分，分为高 n 位的抢占优先级和低 4-n 位的响应优先级，记住，值越小的优先级越高，比如 0 就是最高的优先级</p>\n<p>抢占优先级高的可以中断嵌套，响应优先级高的可以优先排队，<strong>抢占优先级和响应优先级均相同的按中断号排队</strong></p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f35a2d661c6c8e54df3a92.png\" alt=\"\"></p>\n<p>举个例子，就好像是有个医生在给一个人进行看病，抢占优先级高的可以直接把看病的那个人挤开，让自己去看。然后响应优先级就好像是有个人排队，他就应该排在第一位，大概就是这个意思。</p>\n<hr>\n<p>综上所述，现在我们可以这么理解，NVIC 其实可以理解成为一个叫号系统，而 CPU 就是那个医生，下面我们来介绍第一位病人，EXTI 外部中断</p>\n<hr>\n<p>EXTI（Extern Interrupt）外部中断</p>\n<p>EXTI 可以监测指定 GPIO 口的电平信号，当其指定的 GPIO 口产生电平变化时，EXTI 将立即向 NVIC 发出中断申请，经过 NVIC 裁决后即可中断 CPU 主程序，使 CPU 执行 EXTI 对应的中断程序</p>\n<p>支持的触发方式：上升沿 / 下降沿 / 双边沿 / 软件触发</p>\n<p><strong>解释一下</strong>：这里的上升沿是指由低电平上升到高电平，下降沿是由高电平降低到低电平，而双边沿就是指上下都计数</p>\n<p>支持的 GPIO 口：所有 GPIO 口，但相同的 Pin 不能同时触发中断</p>\n<p>通道数：16 个 GPIO_Pin，外加 PVD 输出、RTC 闹钟、USB 唤醒、以太网唤醒</p>\n<p>触发响应方式：中断响应 / 事件响应</p>\n<h4 id=\"首先介绍一下exti的基本结构\"><a class=\"markdownIt-Anchor\" href=\"#首先介绍一下exti的基本结构\">#</a> 首先介绍一下 EXTI 的基本结构</h4>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f355a9661c6c8e54de9017.png\" alt=\"\"></p>\n<p>这里的每个 GPIO 都有 16 个引脚，显然对于只有 16 个输入口的 EXT 是远远超出的，所以我们中间加一个 AFIO 中断引脚选择器，你可以理解为 GPIOA，B，C 共用一个 Pin 引脚口，那么就可以解释了，为什么相同的引脚不能同时触发中断，因为这样，你根本不知道是哪个 GPIO 口发生了中断。</p>\n<p>经过 EXTI 后，分为了两种输出，一种直接接到 NVIC，一种接入其他外设。</p>\n<p>根据常理，本来 20 种的中断输入应该有 20 种的中断输出，但是可能是 STM 公司觉得有点占用 NVIC 的通道，于是，将 EXTI5~9， EXTI10~15 分别合并为了一种通道， 也就是说 EXTI5~9 会触发同一种中断函数，同理 10 到 15 也是</p>\n<p>对于合并通道的中断函数，还需根据标志位进一步确定这个是由哪个中断函数进来的</p>\n<h4 id=\"afio复用io口\"><a class=\"markdownIt-Anchor\" href=\"#afio复用io口\">#</a> AFIO 复用 IO 口</h4>\n<p>AFIO 主要用于引脚复用功能的选择和重定义，在 STM32 中，AFIO 主要完成两个任务：复用功能引脚重映射、中断引脚选择。</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f360b1661c6c8e54e160f5.png\" alt=\"\"></p>\n<p>这就是 AFIO 的作用</p>\n<h4 id=\"exti外部中断的框图\"><a class=\"markdownIt-Anchor\" href=\"#exti外部中断的框图\">#</a> EXTI 外部中断的框图</h4>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f4a337661c6c8e541d2cc6.png\" alt=\"\"></p>\n<p>记住其中带弧度的是或门，只要有一个输入端是 1，那最终输出端的数值就是 1</p>\n<p>平的是与门，记住电路的符号就行</p>\n<p>这也就能解释为什么软件的外部中断，也可以进行中断</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f4a5f3661c6c8e541d9481.png\" alt=\"\"></p>\n<p>由于自身设计的微妙，我们可以做到 A，B 两个端口输出的波的相位差 90 度，可以通过判断 A，B 端口的高低电平，从而确定此时是正转还是反转。</p>\n<p>分析 A 端，当左端的端口并未进行接通时，由于 VCC 连接 R1，相当于进行电位的上拉，从此 A 点的电位为高电位。而当左端的端口接上时 A 端相当于直接接 GND。这里的 R3 起到了限流电阻的作用，防止电流过大。</p>\n<p>这里的 C1 起到了<strong>滤波电容</strong>的作用，防止输出的电位过于抖动</p>\n<p>滤波电容这块，感觉还是不太会</p>\n<p>右端的电路同理</p>\n<p>程序部分</p>\n<p>首先在 Hardware 文件夹中新建 CountSensor.h 和 CountSensor.c 文件</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CountSensor<span class=\"token punctuation\">.</span>h文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_COUNT_SENSOR_H</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_COUNT_SENSOR_H</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">CountSensor_Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">uint16_t</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><h4 id=\"那么如何配置外部的中断\"><a class=\"markdownIt-Anchor\" href=\"#那么如何配置外部的中断\">#</a> 那么如何配置外部的中断</h4>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f355a9661c6c8e54de9017.png\" alt=\"\"></p>\n<p>只需要把从 GPIO 到 NVIC 这一路的信号电路都打开即可</p>\n<p>第一步，配置 RCC，把我们这里涉及到的外设时钟都打开，不打开时钟，外设是无法工作的</p>\n<p>第二步，配置 GPIO 口，选择我们的端口为输入模式</p>\n<p>第三步，配置 AFIO，选择我们用的这一路 GPIO，连接到后面的 EXTI</p>\n<p>第四步，配置 EXTI，选择边沿触发模式，不如上升沿，下降沿，或者双边沿</p>\n<p>第五步，配置 NVIC，给我们这个中断一个合适的优先级别</p>\n<p>最后通过 NVIC，外部中断的信号就能进入 CPU 了，这样，CPU 才能收到中断信号来跳转到中断函数里面，执行中断程序</p>\n<p>那，这五步就是外部中断的配置流程</p>\n<p>1. 首先第一步，配置时钟 RCC</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_APB2Periph_GPIOB<span class=\"token punctuation\">,</span>ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意是 RCC_APB2 因为 GPIOB 是 APB2 的外设</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span>RCC_APB2Periph_AFIO<span class=\"token punctuation\">,</span>ENABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当你不确定这个外设是接在哪个总线上的时候，我们可以跳转到这个函数的定义</p>\n<p>比如这个函数 RCC_APB2 这个函数，可以通过 arg 看到所有的这些外设类型</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  *   This parameter can be any combination of the following values:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  * @param  NewState: new state of the specified peripheral clock.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  *   This parameter can be: ENABLE or DISABLE.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  * @retval None</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  */</span></pre></td></tr></table></figure><p><strong>接着还需要打开 EXTI 和 NVIC 的外设</strong>，但是这两个外设的时钟是一直打开的，所以不需要再次打开，</p>\n<p>NVIC 不需要开启时钟的原因是因为，NVIC 属于内核的外设，内核的外设都是不需要开启时钟的</p>\n<p>而 RCC 管的都是内核外的外设，所以管不到 NVIC</p>\n<p>第二步，配置 GPIO</p>\n<pre><code class=\"language-c++\">GPIO_InitTypeDef GPIO_InitStructure;//注释，这里的GPIO_InitStructure只是一个名称，也可以替换成为u，等等其他的名字\nGPIO_InitStructure.GPIO_Mode=GPIO_Mode_IPU;//这个输入模式，具体需要什么，需要到stm32手册中进行查询\nGPIO_InitStructure.GPIO_Pin=GPIO_Pin_14;\nGPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;\nGPIO_Init(GPIOB,&amp;GPIO_InitStructure);\n</code></pre>\n<p>接下来进行第三步，配置 AFIO，AFIO 并没有自己独立的库函数，它的对应函数在 GPIO 的文件中</p>\n<pre><code class=\"language-c++\">void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource);\n</code></pre>\n<p>然后在其中进行跳转，可以查到对应的</p>\n<pre><code class=\"language-c++\">/**\n  * @brief  Selects the GPIO pin used as EXTI Line.\n  * @param  GPIO_PortSource: selects the GPIO port to be used as source for EXTI lines.\n  *   This parameter can be GPIO_PortSourceGPIOx where x can be (A..G).\n  * @param  GPIO_PinSource: specifies the EXTI line to be configured.\n  *   This parameter can be GPIO_PinSourcex where x can be (0..15).\n  * @retval None\n  */\nvoid GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)\n&#123;\n  uint32_t tmp = 0x00;\n  /* Check the parameters */\n  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));\n  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));\n  \n  tmp = ((uint32_t)0x0F) &lt;&lt; (0x04 * (GPIO_PinSource &amp; (uint8_t)0x03));\n  AFIO-&gt;EXTICR[GPIO_PinSource &gt;&gt; 0x02] &amp;= ~tmp;\n  AFIO-&gt;EXTICR[GPIO_PinSource &gt;&gt; 0x02] |= (((uint32_t)GPIO_PortSource) &lt;&lt; (0x04 * (GPIO_PinSource &amp; (uint8_t)0x03)));\n&#125;\n</code></pre>\n<p>通过最后两行，我们可以发现，其实，这个函数就是配置 AFIO 的函数</p>\n<p>如果你想配置 PB14 号口为中断口，那么我们就可以这样写</p>\n<pre><code class=\"language-c++\">GPIO_EXTILineConfig(GPIO_PortSourceGPIOB,GPIO_PinSource14);\n</code></pre>\n<h4 id=\"第四步配置exti文件\"><a class=\"markdownIt-Anchor\" href=\"#第四步配置exti文件\">#</a> 第四步，配置 EXTI 文件</h4>\n<p>首先先来学习一下 EXTI 的基本库函数</p>\n<pre><code class=\"language-c++\">void EXTI_DeInit(void);//调用它，就可以把EXTI的配置都清除，恢复成上电默认的状态\nvoid EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct);//可以根据这个结构体里的函数配置EXTI外设，初始化EXTI主要用的就是这个函数，使用方法与GPIO_Init等同对比就行 \nvoid EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct);\nvoid EXTI_GenerateSWInterrupt(uint32_t EXTI_Line);\nFlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line);\nvoid EXTI_ClearFlag(uint32_t EXTI_Line);\nITStatus EXTI_GetITStatus(uint32_t EXTI_Line);\nvoid EXTI_ClearITPendingBit(uint32_t EXTI_Line);\n</code></pre>\n<p>代码书写</p>\n<p>我们首先肯定得初始化外设</p>\n<pre><code class=\"language-C++\">/**\n  * @brief  Initializes the EXTI peripheral according to the specified\n  *         parameters in the EXTI_InitStruct.\n  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure\n  *         that contains the configuration information for the EXTI peripheral.\n  * @retval None\n  */\nvoid EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)\n</code></pre>\n<p>然后根据提示，进行相关参数的配置</p>\n<p>在文档中查找相关词 EXTI_InitTypeDef，可以得到如下的代码</p>\n<pre><code class=\"language-c++\">\tEXTI_InitTypeDef a;\n\ta.EXTI_Line=EXTI_Line14;//这四项直接在定义完a后会直接出来\n\ta.EXTI_LineCmd=ENABLE;\n\ta.EXTI_Mode=EXTI_Mode_Interrupt;\n\ta.EXTI_Trigger=EXTI_Trigger_Falling;\n\tEXTI_Init(&amp;a);//初始化a去\n</code></pre>\n<p>在全局寻找 EXTI_Line，<strong>第一个参数</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line0</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00001</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 0 */</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line1</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00002</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 1 */</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line2</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00004</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 2 */</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line3</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00008</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 3 */</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line4</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00010</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 4 */</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line5</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00020</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 5 */</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line6</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00040</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 6 */</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line7</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00080</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 7 */</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line8</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00100</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 8 */</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line9</span>       <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00200</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 9 */</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line10</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00400</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 10 */</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line11</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x00800</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 11 */</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line12</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x01000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 12 */</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line13</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x02000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 13 */</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line14</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x04000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 14 */</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line15</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x08000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 15 */</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line16</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x10000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 16 Connected to the PVD Output */</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line17</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x20000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 17 Connected to the RTC Alarm event */</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line18</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x40000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 18 Connected to the USB Device/USB OTG FS</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                                   Wakeup from suspend event */</span>                                    </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">EXTI_Line19</span>      <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x80000</span><span class=\"token punctuation\">)</span>  </span><span class=\"token comment\">/*!&lt; External interrupt line 19 Connected to the Ethernet Wakeup event */</span></span></pre></td></tr></table></figure><p><strong>第二个参数</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FunctionalState EXTI_LineCmd<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/*!&lt; Specifies the new state of the selected EXTI lines.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                         This parameter can be set either to ENABLE or DISABLE */</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>开始中断还是不开启，ENABLE还是DISABLE</pre></td></tr></table></figure><p><strong>第三个参数</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  EXTI_Mode_Interrupt <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  EXTI_Mode_Event <span class=\"token operator\">=</span> <span class=\"token number\">0x04</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>EXTIMode_TypeDef<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>是外部中断还是事件中断，这里我们采用外部中断</p>\n<p><strong>第四个参数</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  * @brief  EXTI Trigger enumeration  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  EXTI_Trigger_Rising <span class=\"token operator\">=</span> <span class=\"token number\">0x08</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  EXTI_Trigger_Falling <span class=\"token operator\">=</span> <span class=\"token number\">0x0C</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  EXTI_Trigger_Rising_Falling <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>EXTITrigger_TypeDef<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里代表的是选择上升沿触发，下降沿触发，还是上升下降沿都触发</p>\n<p>到此为止，外部中断配置完成，第四步结束</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>EXTI_InitTypeDef a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ta<span class=\"token punctuation\">.</span>EXTI_Line<span class=\"token operator\">=</span>EXTI_Line14<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ta<span class=\"token punctuation\">.</span>EXTI_LineCmd<span class=\"token operator\">=</span>ENABLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ta<span class=\"token punctuation\">.</span>EXTI_Mode<span class=\"token operator\">=</span>EXTI_Mode_Interrupt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ta<span class=\"token punctuation\">.</span>EXTI_Trigger<span class=\"token operator\">=</span>EXTI_Trigger_Falling<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">EXTI_Init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"第五步配置nvic外设\"><a class=\"markdownIt-Anchor\" href=\"#第五步配置nvic外设\">#</a> 第五步，配置 NVIC 外设</h5>\n<p>因为 NVIC 属于 stm32 内核，所以其库函数，被分配到杂项 misc 中</p>\n<p>先学习一下 NVIC 的库函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">NVIC_PriorityGroupConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> NVIC_PriorityGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个函数用来配置中断分组的，参数是中断分组的方式</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">NVIC_Init</span><span class=\"token punctuation\">(</span>NVIC_InitTypeDef<span class=\"token operator\">*</span> NVIC_InitStruct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>根据 NVIC 结构体中指定的参数初始化 NVIC</p>\n<p>跳转</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NVIC_PriorityGroupConfig</pre></td></tr></table></figure><p>查到</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  * @brief  Configures the priority grouping: pre-emption priority and subpriority.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  *   This parameter can be one of the following values:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  *     @arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  *                                4 bits for subpriority</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  *     @arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  *                                3 bits for subpriority</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  *     @arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  *                                2 bits for subpriority</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  *     @arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  *                                1 bits for subpriority</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  *                                0 bits for subpriority</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  * @retval None</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">NVIC_PriorityGroupConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> NVIC_PriorityGroup<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">/* Check the parameters */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">assert_param</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_NVIC_PRIORITY_GROUP</span><span class=\"token punctuation\">(</span>NVIC_PriorityGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">/* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  SCB<span class=\"token operator\">-></span>AIRCR <span class=\"token operator\">=</span> AIRCR_VECTKEY_MASK <span class=\"token operator\">|</span> NVIC_PriorityGroup<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//pre-emption priority 代表的是抢占优先级，subpriority 代表的是相应优先级</span></pre></td></tr></table></figure><p>这里我们选择第二组，两位响应，两位抢占，稍微平均一点</p>\n<p>即配置成</p>\n<pre><code class=\"language-c++\">void NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);\n</code></pre>\n<p>然后就是经典操作了</p>\n<p>对 NVIC 的初始化</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NVIC_InitTypeDef b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tb<span class=\"token punctuation\">.</span>NVIC_IRQChannel<span class=\"token operator\">=</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tb<span class=\"token punctuation\">.</span>NVIC_IRQChannelCmd<span class=\"token operator\">=</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tb<span class=\"token punctuation\">.</span>NVIC_IRQChannelPreemptionPriority<span class=\"token operator\">=</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tb<span class=\"token punctuation\">.</span>NVIC_IRQChannelSubPriority<span class=\"token operator\">=</span>  <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">NVIC_Init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接下来就是配置参数</p>\n<p>跳转定义，全局工程文件搜索 IRQn_Type</p>\n<p>根据我们选择芯片的种类，选择对应的中断函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">STM32F10X_MD</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  ADC1_2_IRQn                 <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; ADC1 and ADC2 global Interrupt                       */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  USB_HP_CAN1_TX_IRQn         <span class=\"token operator\">=</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; USB Device High Priority or CAN1 TX Interrupts       */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  USB_LP_CAN1_RX0_IRQn        <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; USB Device Low Priority or CAN1 RX0 Interrupts       */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  CAN1_RX1_IRQn               <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; CAN1 RX1 Interrupt                                   */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  CAN1_SCE_IRQn               <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; CAN1 SCE Interrupt                                   */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  EXTI9_5_IRQn                <span class=\"token operator\">=</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; External Line[9:5] Interrupts                        */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  TIM1_BRK_IRQn               <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; TIM1 Break Interrupt                                 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  TIM1_UP_IRQn                <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; TIM1 Update Interrupt                                */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  TIM1_TRG_COM_IRQn           <span class=\"token operator\">=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; TIM1 Trigger and Commutation Interrupt               */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  TIM1_CC_IRQn                <span class=\"token operator\">=</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; TIM1 Capture Compare Interrupt                       */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  TIM2_IRQn                   <span class=\"token operator\">=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; TIM2 global Interrupt                                */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  TIM3_IRQn                   <span class=\"token operator\">=</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; TIM3 global Interrupt                                */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  TIM4_IRQn                   <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; TIM4 global Interrupt                                */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  I2C1_EV_IRQn                <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; I2C1 Event Interrupt                                 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  I2C1_ER_IRQn                <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; I2C1 Error Interrupt                                 */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  I2C2_EV_IRQn                <span class=\"token operator\">=</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; I2C2 Event Interrupt                                 */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  I2C2_ER_IRQn                <span class=\"token operator\">=</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; I2C2 Error Interrupt                                 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  SPI1_IRQn                   <span class=\"token operator\">=</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; SPI1 global Interrupt                                */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  SPI2_IRQn                   <span class=\"token operator\">=</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; SPI2 global Interrupt                                */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  USART1_IRQn                 <span class=\"token operator\">=</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; USART1 global Interrupt                              */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  USART2_IRQn                 <span class=\"token operator\">=</span> <span class=\"token number\">38</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; USART2 global Interrupt                              */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  USART3_IRQn                 <span class=\"token operator\">=</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; USART3 global Interrupt                              */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  EXTI15_10_IRQn              <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; External Line[15:10] Interrupts                      */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  RTCAlarm_IRQn               <span class=\"token operator\">=</span> <span class=\"token number\">41</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">/*!&lt; RTC Alarm through EXTI Line Interrupt                */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  USBWakeUp_IRQn              <span class=\"token operator\">=</span> <span class=\"token number\">42</span>      <span class=\"token comment\">/*!&lt; USB Device WakeUp from suspend through EXTI Line Interrupt */</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* STM32F10X_MD */</span></span></pre></td></tr></table></figure><p>配置第一个参数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>b<span class=\"token punctuation\">.</span>NVIC_IRQChannel<span class=\"token operator\">=</span>EXTI15_10_IRQn <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>配置第二个参数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FunctionalState NVIC_IRQChannelCmd<span class=\"token punctuation\">;</span>         <span class=\"token comment\">/*!&lt; Specifies whether the IRQ channel defined in NVIC_IRQChannel</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                                   will be enabled or disabled. </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                                   This parameter can be set either to ENABLE or DISABLE */</span></pre></td></tr></table></figure><p>负责确定中断通道是使能还是失能，这里我们选择 ENABLE</p>\n<p>配置第三个参数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NVIC_IRQChannelPreemptionPriority</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这个是负责的抢占优先级</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NVIC_IRQChannelSubPriority</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    这个是负责相应优先级</pre></td></tr></table></figure><p>对于当前我们的这种情况，因为只有一种中断，所以我们采用参数可以 随便一点，只有当有很多个中断的时候，才会出现拥挤</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>b<span class=\"token punctuation\">.</span>NVIC_IRQChannelPreemptionPriority<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tb<span class=\"token punctuation\">.</span>NVIC_IRQChannelSubPriority<span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>高电平 (GPIO_PIN_SET)、低电平 (GPIO_PIN_RESET)。</p>\n<p>那么中断程序应该放在哪里呢，这就需要我们写一个中断函数</p>\n<p>在 STM32 中，中断函数的名称都是固定的，每个中断通道都对应一个中断函数</p>\n<p>中断函数的名字，我们可以参照一下启动文件，在其中找到中断函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>EXTI15_10_IRQHandler</pre></td></tr></table></figure><p>注意，这个中断函数一定要书写正确，因为如果中断函数写错了，那么程序就无法进入中断了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">EXTI15_10_IRQHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">EXTI_GetITStatus</span><span class=\"token punctuation\">(</span>EXTI_Line14<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 获取一下是哪个中断置为 1 了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token function\">EXTI_ClearITPendingBit</span><span class=\"token punctuation\">(</span>EXTI_Line14<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里需要清除一下中断，因为如果中断函数不清除的话，会一直在中断函数里面循环。如果你不清楚中断标志位，那么它就会一直申请中断。这样程序就会不断相应中断，执行中断程序，那么程序就会卡死在中断程序里面了，所以我们每次中断程序结束后，都应该清除一下标志位</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\tnum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/%E5%9B%BA%E4%BB%B6%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "url": "https://bangdexuanyuan.github.io/stm32/%E5%9B%BA%E4%BB%B6%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "title": "stm32定时器外设时钟",
            "date_published": "2023-09-02T07:28:00.000Z",
            "content_html": "<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RCC_AHBPeriphClockCmd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> RCC_AHBPeriph<span class=\"token punctuation\">,</span> FunctionalState NewState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RCC_APB2PeriphClockCmd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> RCC_APB2Periph<span class=\"token punctuation\">,</span> FunctionalState NewState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RCC_APB1PeriphClockCmd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> RCC_APB1Periph<span class=\"token punctuation\">,</span> FunctionalState NewState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>定时器函数</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210427151456665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjI5NTYz,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);</p>\n<p>NewState 参数是一个枚举类型，用于指示要使能或禁用指定的外设时钟。可选值为：ENABLE 和 DISABLE。</p>\n<p><strong>例 1-1</strong>：以下代码片段用于使能 GPIOA 和 USART1 外设的时钟：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_USART1, ENABLE);</pre></td></tr></table></figure><p>在操作外设之前，必须先使能其时钟。</p>\n<h3 id=\"2-引脚配置\"><a class=\"markdownIt-Anchor\" href=\"#2-引脚配置\">#</a> 2、引脚配置</h3>\n<p>GPIO_InitTypeDef 结构体是 STM32 固件库中提供给开发者的一个方便、易用的工具，当我们要配置一个 GPIO 引脚时，需要设置该引脚的多个参数，如引脚方向、输出类型、速度、上拉 / 下拉模式等，这些参数需要通过寄存器进行设置。而寄存器的操作比较繁琐，容易出错，因此 STM32 固件库提供了 GPIO_InitTypeDef 结构体，它封装了对 GPIO 外设寄存器的访问，使得开发者可以通过设置结构体的成员变量，来快速、简单地配置 GPIO 引脚的多个参数。</p>\n<p>先配置 GPIO_InitTypeDef 结构体；结构体的定义如下：</p>\n<p>这个是已经配置好的模式</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>typedef struct</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  uint16_t GPIO_Pin;             /*!&lt; Specifies the GPIO pins to be configured.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                      This parameter can be any value of @ref GPIO_pins_define */</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  GPIOSpeed_TypeDef GPIO_Speed;  /*!&lt; Specifies the speed for the selected pins.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                      This parameter can be a value of @ref GPIOSpeed_TypeDef */</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  GPIOMode_TypeDef GPIO_Mode;    /*!&lt; Specifies the operating mode for the selected pins.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                      This parameter can be a value of @ref GPIOMode_TypeDef */</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&#125;GPIO_InitTypeDef;</pre></td></tr></table></figure><p>GPIO_Pin 表示要配置的 GPIO 引脚，可以使用逻辑或运算符 “|” 将多个引脚组合在一起。</p>\n<p>GPIO_Mode 表示 GPIO 引脚的工作模式。</p>\n<table>\n<thead>\n<tr>\n<th>输入</th>\n<th></th>\n<th>输出</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GPIO_Mode_AIN</td>\n<td>模拟输入</td>\n<td>GPIO_Mode_Out_OD</td>\n<td>普通开漏输出</td>\n</tr>\n<tr>\n<td>GPIO_Mode_IN_FLOATING</td>\n<td>浮空输入</td>\n<td>GPIO_Mode_Out_PP</td>\n<td>普通推挽输出</td>\n</tr>\n<tr>\n<td>GPIO_Mode_IPU</td>\n<td>上拉输入</td>\n<td>GPIO_Mode_AF_OD</td>\n<td>复用推挽输出</td>\n</tr>\n<tr>\n<td>GPIO_Mode_IPD</td>\n<td>下拉输入</td>\n<td>GPIO_Mode_AF_PP</td>\n<td>复用开漏输出</td>\n</tr>\n</tbody>\n</table>\n<p>GPIO_Speed 表示 GPIO 引脚的速度，可选值为低速（GPIO_Speed_2MHz）、中速（GPIO_Speed_10MHz）或高速（GPIO_Speed_50MHz）。</p>\n<p>一般默认为普通推挽输出</p>\n<p>** 例 2-1：** 将 PA0 和 PA1 两个引脚配置为 50MHz 的推挽输出，并应用于 GPIOA 外设。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GPIO_InitTypeDef GPIO_InitStructure<span class=\"token punctuation\">;</span><span class=\"token comment\">// 这个 GPIO_InitStructure 就是一个结构体的名称，你也可以改为 u, 然后后面的名称对应都变成 u 就行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Pin <span class=\"token operator\">=</span> GPIO_Pin_0 <span class=\"token operator\">|</span> GPIO_Pin_1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Mode <span class=\"token operator\">=</span> GPIO_Mode_Out_PP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>GPIO_InitStructure<span class=\"token punctuation\">.</span>GPIO_Speed <span class=\"token operator\">=</span> GPIO_Speed_50MHz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">GPIO_Init</span><span class=\"token punctuation\">(</span>GPIOA<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>GPIO_InitStructure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上代码将 GPIOA 的 PA0 引脚输出低 / 高电平，即将 PA0 引脚对应的寄存器的输出位设置为 0/1。</p>\n<p>注意：在操作 GPIO 引脚之前，必须先配置其为输出模式。否则，GPIO 引脚将不能输出电平。</p>\n<p>* 注意：在很多开发板上，GPIO 输出控制 LED 等外设的亮灭，常常使用了 PNP 型晶体管或是开漏输出方式。这种方式下，当 GPIO 引脚输出低电平时，PNP 型晶体管或是开漏输出器件会通电，外设（如 LED）被点亮，而当 GPIO 引脚输出高电平时，PNP 型晶体管或是开漏输出器件不通电，外设（如 LED）被熄灭。</p>\n",
            "tags": [
                "stm32"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/stm32/stm32%206-1Tim%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD/",
            "url": "https://bangdexuanyuan.github.io/stm32/stm32%206-1Tim%E5%AE%9A%E6%97%B6%E5%99%A8%E4%B8%AD%E6%96%AD/",
            "title": "定时器学习",
            "date_published": "2023-09-02T02:32:00.000Z",
            "content_html": "<h4 id=\"stm32-6-1tim定时器中断\"><a class=\"markdownIt-Anchor\" href=\"#stm32-6-1tim定时器中断\">#</a> stm32 6-1Tim 定时器中断</h4>\n<p>stm32 拥有 16 位计数器，预分频器，自动重装寄存器的实际单元。如果预分频器和自动重装寄存器都设置最大，2 的 16 次方，因为 2 的 16 次方为 66536</p>\n<p>在 72MHz 计数时钟下可以实现最大 59.65s 的定时</p>\n<p>这部分之后再听一遍</p>\n<p>不仅具有基本的定时中断功能，而且还包括内外时钟源的选择，输入捕获，输出比较，编码器接口，主从触发模式等多种功能</p>\n<p>![](C:\\all study document\\Microcontroller study\\32\\ 图片笔记 \\Snipaste_2023-08-24_22-05-54.png)</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/650fb062c458853aef4a4114.png\" alt=\"\"></p>\n<p>时基单元：由自动重装寄存器，预分频器与 CNT 计数器组成，预分频器之前，连接的就是基准计数时钟的输入，最终来到了控制器的这个位置，由于基本定时器只能选择内部时钟，所以你可以直接认为这根线直接连接到了输入端这里，也就是内部时钟 CK_INT，内部时钟的来源是 RCC 的 TIMxCLK，这里的频率一般是内部系统的主频 72MHz</p>\n<p>我们看时基单元，它可以首先对输入进来的 72MHz 计数时钟进行预分频，比如这个寄存器写 0，就是不分频，或者说是 1 分频，这个时候的输出频率等于输入频率等于 72MHz，如果预分频器写 1，就是 2 分频，那么输出的频率就为 36MHz，如果写 2，就是三分频，输出频率等于 72/3 等于 24MHz，以此类推</p>\n<p>实际的分频系数等于预分频器的系数加一，这个预分频器是 16 位的，所以最大值可以写 65535，也就是最大 65536 分频的，这就是预分频器，就是对输入的频率提前进行预分频的操作</p>\n<p>然后就是计数器，就是对预分频后的计数时钟进行计数，计数时钟每来一个上升沿，计数时钟的值就加一，这个计数器也是 16 位的，可以从 0 计数到 65535；如果再加的话，计数器就会回到零，重新进行计数，所以计数器的值在运行过程中会不断进行自增运行，当自增达到目标值的时候，产生中断，就完成了定时的任务。</p>\n<p>所以现在还需要一个存储目标值函数的计数器，就是自动重装载寄存器，自动重装载计数器也是 16 位的，它存储的就是我们的计数目标，在运行的过程中，计数值不断增加，自动重装值是固定的目标，当计数值等于重装计数器的值的时候，也就是即使时间到了，那它就会产生一个中断信号，并且清零计数器</p>\n<p>在这里有一个向上的箭头，表示这里会产生一个中断信号，像这种计数值等于重装值产生的中断，我们一般称之为更新中断，这个更新中断之后，就会通往 NVIC，我们再配置好 NVIC 的定时器通道，那定时器的更新中断就能得到 CPU 的响应了，这里向下的箭头，代表这里会产生一个事件，这里对应的事件，就叫做更新事件</p>\n",
            "tags": [
                "单片机"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/life/hello-world/",
            "url": "https://bangdexuanyuan.github.io/life/hello-world/",
            "title": "hello world",
            "date_published": "2023-09-02T02:00:00.000Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "哈尔滨生活"
            ]
        },
        {
            "id": "https://bangdexuanyuan.github.io/life/%E9%9D%92%E5%B2%9B%E4%B9%8B%E6%97%85/",
            "url": "https://bangdexuanyuan.github.io/life/%E9%9D%92%E5%B2%9B%E4%B9%8B%E6%97%85/",
            "title": "青岛之旅",
            "date_published": "2023-09-02T02:00:00.000Z",
            "content_html": "<p>2023 年 8 月 7~9，和 zjx 和 lh 去了趟从没有去过得青岛，真的，碰见高中同学，虽然长时间没有联系，还是原来的感觉。</p>\n<p>去了海军博物馆</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f2d252661c6c8e54b43cb9.jpg\" alt=\"\"></p>\n<p>去了小麦岛，去了鹿儿岛</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f2d24a661c6c8e54b43172.jpg\" alt=\"\"></p>\n<p>去了栈桥，人是真的多嘞</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f2d2fd661c6c8e54b4e2da.jpg\" alt=\"\"></p>\n<p>还吃了好吃的鲅鱼饺子，墨鱼丸，啤酒成为那段时间的专属</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64f2d316661c6c8e54b4ea1d.jpg\" alt=\"\"></p>\n<p>记得凌晨 3，4 点的火车硬座，还有 LOL 的 solo 的时候，zjx 的破防，这是一段短暂而小有遗憾的时光。</p>\n",
            "tags": [
                "青岛生活"
            ]
        }
    ]
}